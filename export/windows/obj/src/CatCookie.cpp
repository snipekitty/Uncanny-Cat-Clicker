// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_CatCookie
#include <CatCookie.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_864a3c347917c9ac_9_new,"CatCookie","new",0xc9e11b2c,"CatCookie.new","CatCookie.hx",9,0xb5236dc4)
HX_LOCAL_STACK_FRAME(_hx_pos_864a3c347917c9ac_13_createCat,"CatCookie","createCat",0x9294b646,"CatCookie.createCat","CatCookie.hx",13,0xb5236dc4)

void CatCookie_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_864a3c347917c9ac_9_new)
            	}

Dynamic CatCookie_obj::__CreateEmpty() { return new CatCookie_obj; }

void *CatCookie_obj::_hx_vtable = 0;

Dynamic CatCookie_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CatCookie_obj > _hx_result = new CatCookie_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CatCookie_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x795cca7a;
}

void CatCookie_obj::createCat(){
            	HX_GC_STACKFRAME(&_hx_pos_864a3c347917c9ac_13_createCat)
HXLINE(  14)		this->catCookie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  15)		this->catCookie->loadGraphic(HX_("assets/images/UncannyCat.png",1a,fe,84,98),null(),null(),null(),null(),null());
HXLINE(  16)		{
HXLINE(  16)			 ::flixel::math::FlxBasePoint this1 = this->catCookie->scale;
HXDLIN(  16)			this1->set_x(((Float)0.4));
HXDLIN(  16)			this1->set_y(((Float)0.4));
            		}
HXLINE(  17)		this->catCookie->updateHitbox();
HXLINE(  18)		{
HXLINE(  18)			 ::flixel::FlxSprite _this = this->catCookie;
HXDLIN(  18)			int axes = 17;
HXDLIN(  18)			bool _hx_tmp;
HXDLIN(  18)			if ((axes != 1)) {
HXLINE(  18)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  18)				_hx_tmp = true;
            			}
HXDLIN(  18)			if (_hx_tmp) {
HXLINE(  18)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  18)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  18)			bool _hx_tmp2;
HXDLIN(  18)			if ((axes != 16)) {
HXLINE(  18)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  18)				_hx_tmp2 = true;
            			}
HXDLIN(  18)			if (_hx_tmp2) {
HXLINE(  18)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  18)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CatCookie_obj,createCat,(void))


::hx::ObjectPtr< CatCookie_obj > CatCookie_obj::__new() {
	::hx::ObjectPtr< CatCookie_obj > __this = new CatCookie_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CatCookie_obj > CatCookie_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CatCookie_obj *__this = (CatCookie_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CatCookie_obj), true, "CatCookie"));
	*(void **)__this = CatCookie_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CatCookie_obj::CatCookie_obj()
{
}

void CatCookie_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CatCookie);
	HX_MARK_MEMBER_NAME(catCookie,"catCookie");
	HX_MARK_END_CLASS();
}

void CatCookie_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(catCookie,"catCookie");
}

::hx::Val CatCookie_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"catCookie") ) { return ::hx::Val( catCookie ); }
		if (HX_FIELD_EQ(inName,"createCat") ) { return ::hx::Val( createCat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CatCookie_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"catCookie") ) { catCookie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CatCookie_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("catCookie",5a,75,46,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CatCookie_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CatCookie_obj,catCookie),HX_("catCookie",5a,75,46,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CatCookie_obj_sStaticStorageInfo = 0;
#endif

static ::String CatCookie_obj_sMemberFields[] = {
	HX_("catCookie",5a,75,46,14),
	HX_("createCat",7a,4a,d9,49),
	::String(null()) };

::hx::Class CatCookie_obj::__mClass;

void CatCookie_obj::__register()
{
	CatCookie_obj _hx_dummy;
	CatCookie_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CatCookie",3a,55,19,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CatCookie_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CatCookie_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CatCookie_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CatCookie_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


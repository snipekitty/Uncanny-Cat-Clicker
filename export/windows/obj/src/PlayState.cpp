// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_CatClicker
#include <CatClicker.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_9_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",9,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_15_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",15,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_27_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",27,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_40_updatemilktext,"PlayState","updatemilktext",0x45e3dc02,"PlayState.updatemilktext","PlayState.hx",40,0xb30d7781)

void PlayState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_9_new)
HXLINE(  13)		this->cannypoints = 0;
HXLINE(  12)		this->catClicker =  ::CatClicker_obj::__alloc( HX_CTX );
HXLINE(   9)		super::__construct();
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_15_create)
HXLINE(  16)		this->super::create();
HXLINE(  17)		this->add(this->catClicker);
HXLINE(  19)		::flixel::FlxG_obj::cameras->set_bgColor(-16777216);
HXLINE(  21)		this->cannypointstext =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,100,0,null(),HX_(" Milk",1b,09,08,a0),20,null());
HXLINE(  22)		{
HXLINE(  22)			int this1 = this->cannypointstext->color;
HXDLIN(  22)			Float _hx_tmp = (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ));
HXDLIN(  22)			Float _hx_tmp1 = ::Math_obj::max((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )));
            		}
HXLINE(  23)		this->add(this->cannypointstext);
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_27_update)
HXLINE(  28)		this->super::update(elapsed);
HXLINE(  30)		if (::flixel::FlxG_obj::mouse->overlaps(this->catClicker,null())) {
HXLINE(  32)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE(  34)				this->updatemilktext();
            			}
            		}
            	}


void PlayState_obj::updatemilktext(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_40_updatemilktext)
HXLINE(  41)		this->cannypoints = ::Std_obj::_hx_int(( (Float)((this->cannypoints + 1)) ));
HXLINE(  42)		this->cannypointstext->set_text((this->cannypoints + HX_(" Milk",1b,09,08,a0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updatemilktext,(void))


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new() {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(cannypointstext,"cannypointstext");
	HX_MARK_MEMBER_NAME(catClicker,"catClicker");
	HX_MARK_MEMBER_NAME(cannypoints,"cannypoints");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cannypointstext,"cannypointstext");
	HX_VISIT_MEMBER_NAME(catClicker,"catClicker");
	HX_VISIT_MEMBER_NAME(cannypoints,"cannypoints");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"catClicker") ) { return ::hx::Val( catClicker ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cannypoints") ) { return ::hx::Val( cannypoints ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatemilktext") ) { return ::hx::Val( updatemilktext_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cannypointstext") ) { return ::hx::Val( cannypointstext ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"catClicker") ) { catClicker=inValue.Cast<  ::CatClicker >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cannypoints") ) { cannypoints=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cannypointstext") ) { cannypointstext=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cannypointstext",6b,44,b2,53));
	outFields->push(HX_("catClicker",3f,79,9e,fc));
	outFields->push(HX_("cannypoints",be,40,76,88));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,cannypointstext),HX_("cannypointstext",6b,44,b2,53)},
	{::hx::fsObject /*  ::CatClicker */ ,(int)offsetof(PlayState_obj,catClicker),HX_("catClicker",3f,79,9e,fc)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,cannypoints),HX_("cannypoints",be,40,76,88)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("cannypointstext",6b,44,b2,53),
	HX_("catClicker",3f,79,9e,fc),
	HX_("cannypoints",be,40,76,88),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("updatemilktext",11,5a,a5,db),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


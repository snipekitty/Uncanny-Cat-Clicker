// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_utils_Namespace
#include <openfl/utils/Namespace.h>
#endif
#ifndef INCLUDED_openfl_utils_QName
#include <openfl/utils/QName.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d83a90597c2d3cb7_87_new,"openfl.utils.Namespace","new",0x196c9e12,"openfl.utils.Namespace.new","openfl/utils/Namespace.hx",87,0x8ea5db60)
HX_LOCAL_STACK_FRAME(_hx_pos_d83a90597c2d3cb7_141_get_uri,"openfl.utils.Namespace","get_uri",0x4e2482b5,"openfl.utils.Namespace.get_uri","openfl/utils/Namespace.hx",141,0x8ea5db60)
HX_LOCAL_STACK_FRAME(_hx_pos_d83a90597c2d3cb7_146_get_prefix,"openfl.utils.Namespace","get_prefix",0x839c75e9,"openfl.utils.Namespace.get_prefix","openfl/utils/Namespace.hx",146,0x8ea5db60)
namespace openfl{
namespace utils{

void Namespace_obj::__construct( ::Dynamic prefixValue, ::Dynamic uriValue){
            	HX_STACKFRAME(&_hx_pos_d83a90597c2d3cb7_87_new)
HXDLIN(  87)		bool _hx_tmp;
HXDLIN(  87)		if (::hx::IsNull( prefixValue )) {
HXDLIN(  87)			_hx_tmp = ::hx::IsNull( uriValue );
            		}
            		else {
HXDLIN(  87)			_hx_tmp = false;
            		}
HXDLIN(  87)		if (_hx_tmp) {
HXLINE(  89)			this->_hx___prefix = HX_("",00,00,00,00);
HXLINE(  90)			this->_hx___uri = HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  92)			bool _hx_tmp1;
HXDLIN(  92)			if (::hx::IsNotNull( prefixValue )) {
HXLINE(  92)				_hx_tmp1 = ::hx::IsNull( uriValue );
            			}
            			else {
HXLINE(  92)				_hx_tmp1 = false;
            			}
HXDLIN(  92)			if (_hx_tmp1) {
HXLINE(  94)				if (::Std_obj::isOfType(prefixValue,::hx::ClassOf< ::openfl::utils::Namespace >())) {
HXLINE(  96)					 ::openfl::utils::Namespace ns = ::hx::TCast<  ::openfl::utils::Namespace >::cast(prefixValue);
HXLINE(  97)					this->_hx___prefix = ns->get_prefix();
HXLINE(  98)					this->_hx___uri = ns->get_uri();
            				}
            				else {
HXLINE( 100)					if (::Std_obj::isOfType(prefixValue,::hx::ClassOf< ::openfl::utils::QName >())) {
HXLINE( 102)						 ::openfl::utils::QName qname = ::hx::TCast<  ::openfl::utils::QName >::cast(prefixValue);
HXLINE( 103)						this->_hx___prefix = null();
HXLINE( 104)						this->_hx___uri = qname->get_uri();
            					}
            					else {
HXLINE( 108)						this->_hx___prefix = null();
HXLINE( 109)						this->_hx___uri = ::Std_obj::string(prefixValue);
            					}
            				}
            			}
            			else {
HXLINE( 114)				if (::hx::IsNull( prefixValue )) {
HXLINE( 116)					this->_hx___prefix = null();
            				}
            				else {
HXLINE( 120)					this->_hx___prefix = ::Std_obj::string(prefixValue);
HXLINE( 121)					bool _hx_tmp2;
HXDLIN( 121)					if ((this->_hx___prefix.length > 0)) {
HXLINE( 121)						_hx_tmp2 = !(::openfl::Lib_obj::isXMLName(this->_hx___prefix));
            					}
            					else {
HXLINE( 121)						_hx_tmp2 = false;
            					}
HXDLIN( 121)					if (_hx_tmp2) {
HXLINE( 123)						this->_hx___prefix = null();
            					}
            				}
HXLINE( 126)				if (::Std_obj::isOfType(uriValue,::hx::ClassOf< ::openfl::utils::QName >())) {
HXLINE( 128)					 ::openfl::utils::QName qname1 = ::hx::TCast<  ::openfl::utils::QName >::cast(uriValue);
HXLINE( 129)					this->_hx___uri = qname1->get_uri();
            				}
            				else {
HXLINE( 133)					this->_hx___uri = ::Std_obj::string(uriValue);
            				}
            			}
            		}
            	}

Dynamic Namespace_obj::__CreateEmpty() { return new Namespace_obj; }

void *Namespace_obj::_hx_vtable = 0;

Dynamic Namespace_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Namespace_obj > _hx_result = new Namespace_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Namespace_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x29dc4666;
}

::String Namespace_obj::get_uri(){
            	HX_STACKFRAME(&_hx_pos_d83a90597c2d3cb7_141_get_uri)
HXDLIN( 141)		return this->_hx___uri;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Namespace_obj,get_uri,return )

::String Namespace_obj::get_prefix(){
            	HX_STACKFRAME(&_hx_pos_d83a90597c2d3cb7_146_get_prefix)
HXDLIN( 146)		return this->_hx___prefix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Namespace_obj,get_prefix,return )


::hx::ObjectPtr< Namespace_obj > Namespace_obj::__new( ::Dynamic prefixValue, ::Dynamic uriValue) {
	::hx::ObjectPtr< Namespace_obj > __this = new Namespace_obj();
	__this->__construct(prefixValue,uriValue);
	return __this;
}

::hx::ObjectPtr< Namespace_obj > Namespace_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic prefixValue, ::Dynamic uriValue) {
	Namespace_obj *__this = (Namespace_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Namespace_obj), true, "openfl.utils.Namespace"));
	*(void **)__this = Namespace_obj::_hx_vtable;
	__this->__construct(prefixValue,uriValue);
	return __this;
}

Namespace_obj::Namespace_obj()
{
}

void Namespace_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Namespace);
	HX_MARK_MEMBER_NAME(_hx___prefix,"__prefix");
	HX_MARK_MEMBER_NAME(_hx___uri,"__uri");
	HX_MARK_END_CLASS();
}

void Namespace_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___prefix,"__prefix");
	HX_VISIT_MEMBER_NAME(_hx___uri,"__uri");
}

::hx::Val Namespace_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uri") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_uri() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__uri") ) { return ::hx::Val( _hx___uri ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prefix") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_prefix() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_uri") ) { return ::hx::Val( get_uri_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__prefix") ) { return ::hx::Val( _hx___prefix ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_prefix") ) { return ::hx::Val( get_prefix_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Namespace_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__uri") ) { _hx___uri=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__prefix") ) { _hx___prefix=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Namespace_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("prefix",92,d9,b6,ae));
	outFields->push(HX_("uri",6c,2b,59,00));
	outFields->push(HX_("__prefix",b2,44,e6,56));
	outFields->push(HX_("__uri",4c,8c,35,f2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Namespace_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Namespace_obj,_hx___prefix),HX_("__prefix",b2,44,e6,56)},
	{::hx::fsString,(int)offsetof(Namespace_obj,_hx___uri),HX_("__uri",4c,8c,35,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Namespace_obj_sStaticStorageInfo = 0;
#endif

static ::String Namespace_obj_sMemberFields[] = {
	HX_("__prefix",b2,44,e6,56),
	HX_("__uri",4c,8c,35,f2),
	HX_("get_uri",03,f4,cd,26),
	HX_("get_prefix",5b,49,3e,9f),
	::String(null()) };

::hx::Class Namespace_obj::__mClass;

void Namespace_obj::__register()
{
	Namespace_obj _hx_dummy;
	Namespace_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.utils.Namespace",20,ed,e3,e8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Namespace_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Namespace_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Namespace_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Namespace_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace utils

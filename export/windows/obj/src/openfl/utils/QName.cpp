// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_utils_Namespace
#include <openfl/utils/Namespace.h>
#endif
#ifndef INCLUDED_openfl_utils_QName
#include <openfl/utils/QName.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc671d3761f227d4_78_new,"openfl.utils.QName","new",0x27a0acd3,"openfl.utils.QName.new","openfl/utils/QName.hx",78,0x625d16bf)
HX_LOCAL_STACK_FRAME(_hx_pos_bc671d3761f227d4_125_get_uri,"openfl.utils.QName","get_uri",0x42cd85f6,"openfl.utils.QName.get_uri","openfl/utils/QName.hx",125,0x625d16bf)
HX_LOCAL_STACK_FRAME(_hx_pos_bc671d3761f227d4_130_get_localName,"openfl.utils.QName","get_localName",0x9307d760,"openfl.utils.QName.get_localName","openfl/utils/QName.hx",130,0x625d16bf)
namespace openfl{
namespace utils{

void QName_obj::__construct( ::Dynamic _hx_namespace, ::Dynamic name){
            	HX_STACKFRAME(&_hx_pos_bc671d3761f227d4_78_new)
HXDLIN(  78)		bool _hx_tmp;
HXDLIN(  78)		if (::hx::IsNull( _hx_namespace )) {
HXDLIN(  78)			_hx_tmp = ::hx::IsNull( name );
            		}
            		else {
HXDLIN(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  80)			this->_hx___uri = HX_("",00,00,00,00);
HXLINE(  81)			this->_hx___localName = HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  83)			bool _hx_tmp1;
HXDLIN(  83)			if (::hx::IsNotNull( _hx_namespace )) {
HXLINE(  83)				_hx_tmp1 = ::hx::IsNull( name );
            			}
            			else {
HXLINE(  83)				_hx_tmp1 = false;
            			}
HXDLIN(  83)			if (_hx_tmp1) {
HXLINE(  85)				if (::Std_obj::isOfType(_hx_namespace,::hx::ClassOf< ::openfl::utils::QName >())) {
HXLINE(  87)					 ::openfl::utils::QName other = ::hx::TCast<  ::openfl::utils::QName >::cast(_hx_namespace);
HXLINE(  88)					this->_hx___uri = other->get_uri();
HXLINE(  89)					this->_hx___localName = other->get_localName();
            				}
            				else {
HXLINE(  93)					this->_hx___uri = HX_("",00,00,00,00);
HXLINE(  94)					this->_hx___localName = ::Std_obj::string(_hx_namespace);
            				}
            			}
            			else {
HXLINE(  99)				if (::Std_obj::isOfType(_hx_namespace,::hx::ClassOf< ::openfl::utils::Namespace >())) {
HXLINE( 101)					this->_hx___uri = ::hx::TCast<  ::openfl::utils::Namespace >::cast(_hx_namespace)->get_uri();
            				}
            				else {
HXLINE( 103)					if (::hx::IsNotNull( _hx_namespace )) {
HXLINE( 105)						this->_hx___uri = ::Std_obj::string(_hx_namespace);
            					}
            					else {
HXLINE( 109)						this->_hx___uri = null();
            					}
            				}
HXLINE( 111)				if (::Std_obj::isOfType(name,::hx::ClassOf< ::openfl::utils::QName >())) {
HXLINE( 113)					this->_hx___localName = ::hx::TCast<  ::openfl::utils::QName >::cast(name)->get_localName();
            				}
            				else {
HXLINE( 117)					this->_hx___localName = ::Std_obj::string(name);
            				}
            			}
            		}
            	}

Dynamic QName_obj::__CreateEmpty() { return new QName_obj; }

void *QName_obj::_hx_vtable = 0;

Dynamic QName_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QName_obj > _hx_result = new QName_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool QName_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f88c37b;
}

::String QName_obj::get_uri(){
            	HX_STACKFRAME(&_hx_pos_bc671d3761f227d4_125_get_uri)
HXDLIN( 125)		return this->_hx___uri;
            	}


HX_DEFINE_DYNAMIC_FUNC0(QName_obj,get_uri,return )

::String QName_obj::get_localName(){
            	HX_STACKFRAME(&_hx_pos_bc671d3761f227d4_130_get_localName)
HXDLIN( 130)		return this->_hx___localName;
            	}


HX_DEFINE_DYNAMIC_FUNC0(QName_obj,get_localName,return )


::hx::ObjectPtr< QName_obj > QName_obj::__new( ::Dynamic _hx_namespace, ::Dynamic name) {
	::hx::ObjectPtr< QName_obj > __this = new QName_obj();
	__this->__construct(_hx_namespace,name);
	return __this;
}

::hx::ObjectPtr< QName_obj > QName_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic _hx_namespace, ::Dynamic name) {
	QName_obj *__this = (QName_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QName_obj), true, "openfl.utils.QName"));
	*(void **)__this = QName_obj::_hx_vtable;
	__this->__construct(_hx_namespace,name);
	return __this;
}

QName_obj::QName_obj()
{
}

void QName_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(QName);
	HX_MARK_MEMBER_NAME(_hx___uri,"__uri");
	HX_MARK_MEMBER_NAME(_hx___localName,"__localName");
	HX_MARK_END_CLASS();
}

void QName_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___uri,"__uri");
	HX_VISIT_MEMBER_NAME(_hx___localName,"__localName");
}

::hx::Val QName_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uri") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_uri() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__uri") ) { return ::hx::Val( _hx___uri ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_uri") ) { return ::hx::Val( get_uri_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localName") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_localName() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__localName") ) { return ::hx::Val( _hx___localName ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_localName") ) { return ::hx::Val( get_localName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QName_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__uri") ) { _hx___uri=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__localName") ) { _hx___localName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QName_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("uri",6c,2b,59,00));
	outFields->push(HX_("localName",56,f9,41,0b));
	outFields->push(HX_("__uri",4c,8c,35,f2));
	outFields->push(HX_("__localName",36,42,6e,39));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QName_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(QName_obj,_hx___uri),HX_("__uri",4c,8c,35,f2)},
	{::hx::fsString,(int)offsetof(QName_obj,_hx___localName),HX_("__localName",36,42,6e,39)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QName_obj_sStaticStorageInfo = 0;
#endif

static ::String QName_obj_sMemberFields[] = {
	HX_("__uri",4c,8c,35,f2),
	HX_("__localName",36,42,6e,39),
	HX_("get_uri",03,f4,cd,26),
	HX_("get_localName",2d,cd,a5,cc),
	::String(null()) };

::hx::Class QName_obj::__mClass;

void QName_obj::__register()
{
	QName_obj _hx_dummy;
	QName_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.utils.QName",61,47,57,44);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QName_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QName_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QName_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QName_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace utils

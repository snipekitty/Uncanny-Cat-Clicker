// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_CatClicker
#include <CatClicker.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_61496b72eeeb752f_10_new,"CatClicker","new",0x2f1eb9d1,"CatClicker.new","CatClicker.hx",10,0xa6ab2abf)

void CatClicker_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_61496b72eeeb752f_10_new)
HXLINE(  11)		super::__construct(null(),null(),null());
HXLINE(  12)		this->loadGraphic(HX_("assets/images/UncannyCat.png",1a,fe,84,98),null(),null(),null(),null(),null());
HXLINE(  13)		{
HXLINE(  13)			 ::flixel::math::FlxBasePoint this1 = this->scale;
HXDLIN(  13)			this1->set_x(((Float)0.4));
HXDLIN(  13)			this1->set_y(((Float)0.4));
            		}
HXLINE(  14)		this->updateHitbox();
HXLINE(  15)		{
HXLINE(  15)			int axes = 17;
HXDLIN(  15)			bool _hx_tmp;
HXDLIN(  15)			if ((axes != 1)) {
HXLINE(  15)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  15)				_hx_tmp = true;
            			}
HXDLIN(  15)			if (_hx_tmp) {
HXLINE(  15)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  15)				this->set_x(((( (Float)(_hx_tmp1) ) - this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  15)			bool _hx_tmp2;
HXDLIN(  15)			if ((axes != 16)) {
HXLINE(  15)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  15)				_hx_tmp2 = true;
            			}
HXDLIN(  15)			if (_hx_tmp2) {
HXLINE(  15)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  15)				this->set_y(((( (Float)(_hx_tmp3) ) - this->get_height()) / ( (Float)(2) )));
            			}
            		}
            	}

Dynamic CatClicker_obj::__CreateEmpty() { return new CatClicker_obj; }

void *CatClicker_obj::_hx_vtable = 0;

Dynamic CatClicker_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CatClicker_obj > _hx_result = new CatClicker_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CatClicker_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x0b12a01f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b12a01f;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}


::hx::ObjectPtr< CatClicker_obj > CatClicker_obj::__new() {
	::hx::ObjectPtr< CatClicker_obj > __this = new CatClicker_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CatClicker_obj > CatClicker_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CatClicker_obj *__this = (CatClicker_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CatClicker_obj), true, "CatClicker"));
	*(void **)__this = CatClicker_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CatClicker_obj::CatClicker_obj()
{
}

void CatClicker_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CatClicker);
	HX_MARK_MEMBER_NAME(catClicker,"catClicker");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CatClicker_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(catClicker,"catClicker");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CatClicker_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"catClicker") ) { return ::hx::Val( catClicker ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CatClicker_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"catClicker") ) { catClicker=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CatClicker_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("catClicker",3f,79,9e,fc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CatClicker_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CatClicker_obj,catClicker),HX_("catClicker",3f,79,9e,fc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CatClicker_obj_sStaticStorageInfo = 0;
#endif

static ::String CatClicker_obj_sMemberFields[] = {
	HX_("catClicker",3f,79,9e,fc),
	::String(null()) };

::hx::Class CatClicker_obj::__mClass;

void CatClicker_obj::__register()
{
	CatClicker_obj _hx_dummy;
	CatClicker_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CatClicker",5f,7d,4f,f3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CatClicker_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CatClicker_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CatClicker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CatClicker_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


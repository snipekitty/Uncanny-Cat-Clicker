// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_path_FlxTypedBasePath
#include <flixel/path/FlxTypedBasePath.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignalHandler
#include <flixel/util/_FlxSignal/FlxSignalHandler.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_55e64b3c9045493d_60_new,"flixel.path.FlxTypedBasePath","new",0xcd36bdf7,"flixel.path.FlxTypedBasePath.new","flixel/path/FlxBasePath.hx",60,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_117_destroy,"flixel.path.FlxTypedBasePath","destroy",0xf3653211,"flixel.path.FlxTypedBasePath.destroy","flixel/path/FlxBasePath.hx",117,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_127_restart,"flixel.path.FlxTypedBasePath","restart",0x3984cce6,"flixel.path.FlxTypedBasePath.restart","flixel/path/FlxBasePath.hx",127,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_136_getStartingNode,"flixel.path.FlxTypedBasePath","getStartingNode",0x4399e1af,"flixel.path.FlxTypedBasePath.getStartingNode","flixel/path/FlxBasePath.hx",136,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_140_nodeReached,"flixel.path.FlxTypedBasePath","nodeReached",0xf0161947,"flixel.path.FlxTypedBasePath.nodeReached","flixel/path/FlxBasePath.hx",140,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_153_advance,"flixel.path.FlxTypedBasePath","advance",0xbdeb0d99,"flixel.path.FlxTypedBasePath.advance","flixel/path/FlxBasePath.hx",153,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_169_setNextIndex,"flixel.path.FlxTypedBasePath","setNextIndex",0x6d6d9ca6,"flixel.path.FlxTypedBasePath.setNextIndex","flixel/path/FlxBasePath.hx",169,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_211_startAt,"flixel.path.FlxTypedBasePath","startAt",0x03fa0f0c,"flixel.path.FlxTypedBasePath.startAt","flixel/path/FlxBasePath.hx",211,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_221_update,"flixel.path.FlxTypedBasePath","update",0x7ec3f0d2,"flixel.path.FlxTypedBasePath.update","flixel/path/FlxBasePath.hx",221,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_240_isTargetAtNext,"flixel.path.FlxTypedBasePath","isTargetAtNext",0xf4def08a,"flixel.path.FlxTypedBasePath.isTargetAtNext","flixel/path/FlxBasePath.hx",240,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_244_updateTarget,"flixel.path.FlxTypedBasePath","updateTarget",0x6a74c1c3,"flixel.path.FlxTypedBasePath.updateTarget","flixel/path/FlxBasePath.hx",244,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_248_get_totalNodes,"flixel.path.FlxTypedBasePath","get_totalNodes",0x971911df,"flixel.path.FlxTypedBasePath.get_totalNodes","flixel/path/FlxBasePath.hx",248,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_253_get_finished,"flixel.path.FlxTypedBasePath","get_finished",0x2dec6f04,"flixel.path.FlxTypedBasePath.get_finished","flixel/path/FlxBasePath.hx",253,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_258_get_current,"flixel.path.FlxTypedBasePath","get_current",0xbb5ad8e7,"flixel.path.FlxTypedBasePath.get_current","flixel/path/FlxBasePath.hx",258,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_263_get_next,"flixel.path.FlxTypedBasePath","get_next",0xfd02af85,"flixel.path.FlxTypedBasePath.get_next","flixel/path/FlxBasePath.hx",263,0xefb220ed)
HX_LOCAL_STACK_FRAME(_hx_pos_55e64b3c9045493d_275_getCameras,"flixel.path.FlxTypedBasePath","getCameras",0x16591381,"flixel.path.FlxTypedBasePath.getCameras","flixel/path/FlxBasePath.hx",275,0xefb220ed)
namespace flixel{
namespace path{

void FlxTypedBasePath_obj::__construct(::Array< ::Dynamic> nodes, ::Dynamic target,::hx::Null< bool >  __o_direction){
            		bool direction = __o_direction.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_55e64b3c9045493d_60_new)
HXLINE(  92)		this->nextIndex = -1;
HXLINE(  90)		this->currentIndex = -1;
HXLINE(  87)		this->onFinish =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE(  84)		this->onNodeReached =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE(  81)		this->onEndReached =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE(  72)		this->direction = true;
HXLINE(  69)		this->loopType = 16;
HXLINE( 107)		this->nodes = nodes;
HXLINE( 108)		this->target = target;
HXLINE( 109)		this->direction = direction;
HXLINE( 110)		super::__construct();
HXLINE( 112)		bool _hx_tmp;
HXDLIN( 112)		bool _hx_tmp1;
HXDLIN( 112)		if (::hx::IsNotNull( nodes )) {
HXLINE( 112)			_hx_tmp1 = (nodes->length > 0);
            		}
            		else {
HXLINE( 112)			_hx_tmp1 = false;
            		}
HXDLIN( 112)		if (_hx_tmp1) {
HXLINE( 112)			_hx_tmp = ::hx::IsNotNull( target );
            		}
            		else {
HXLINE( 112)			_hx_tmp = false;
            		}
HXDLIN( 112)		if (_hx_tmp) {
HXLINE( 113)			this->restart();
            		}
            	}

Dynamic FlxTypedBasePath_obj::__CreateEmpty() { return new FlxTypedBasePath_obj; }

void *FlxTypedBasePath_obj::_hx_vtable = 0;

Dynamic FlxTypedBasePath_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTypedBasePath_obj > _hx_result = new FlxTypedBasePath_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxTypedBasePath_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x7ccf8994;
	} else {
		return inClassId==(int)0x7f944777;
	}
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_path_FlxTypedBasePath__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flixel::path::FlxTypedBasePath_obj::destroy,
};

void *FlxTypedBasePath_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_path_FlxTypedBasePath__hx_flixel_util_IFlxDestroyable;
	}
	return super::_hx_getInterface(inHash);
}

void FlxTypedBasePath_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_117_destroy)
HXLINE( 118)		::flixel::util::FlxDestroyUtil_obj::putArray(this->nodes);
HXLINE( 119)		this->nodes = null();
HXLINE( 120)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->onEndReached->handlers);
            	}


 ::flixel::path::FlxTypedBasePath FlxTypedBasePath_obj::restart(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_127_restart)
HXLINE( 128)		this->currentIndex = this->getStartingNode();
HXLINE( 129)		this->setNextIndex();
HXLINE( 131)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,restart,return )

int FlxTypedBasePath_obj::getStartingNode(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_136_getStartingNode)
HXDLIN( 136)		if ((this->direction == false)) {
HXDLIN( 136)			return (this->nodes->length - 1);
            		}
            		else {
HXDLIN( 136)			return 0;
            		}
HXDLIN( 136)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,getStartingNode,return )

void FlxTypedBasePath_obj::nodeReached(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_140_nodeReached)
HXLINE( 141)		this->advance();
HXLINE( 143)		this->onNodeReached->dispatch(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 145)		if ((this->nextIndex < 0)) {
HXLINE( 147)			this->onFinish->dispatch(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,nodeReached,(void))

void FlxTypedBasePath_obj::advance(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_153_advance)
HXLINE( 154)		if ((this->nextIndex < 0)) {
HXLINE( 156)			::flixel::FlxG_obj::log->advanced(HX_("Cannot advance after path is finished",2c,20,30,7b),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/path/FlxBasePath.hx",ed,20,b2,ef),156,HX_("flixel.path.FlxTypedBasePath",85,f6,7c,19),HX_("advance",82,08,0c,ef)));
HXLINE( 157)			return;
            		}
HXLINE( 160)		this->currentIndex = this->nextIndex;
HXLINE( 161)		this->setNextIndex();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,advance,(void))

void FlxTypedBasePath_obj::setNextIndex(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_169_setNextIndex)
HXLINE( 171)		bool _hx_tmp;
HXDLIN( 171)		if ((this->currentIndex == (this->nodes->length - 1))) {
HXLINE( 171)			_hx_tmp = (this->direction == true);
            		}
            		else {
HXLINE( 171)			_hx_tmp = false;
            		}
HXDLIN( 171)		if (_hx_tmp) {
HXLINE( 173)			int _hx_tmp1;
HXDLIN( 173)			switch((int)(this->loopType)){
            				case (int)0: {
HXLINE( 173)					_hx_tmp1 = -1;
            				}
            				break;
            				case (int)16: {
HXLINE( 173)					_hx_tmp1 = 0;
            				}
            				break;
            				case (int)4096: {
HXLINE( 178)					this->direction = false;
HXLINE( 173)					_hx_tmp1 = (this->currentIndex - 1);
            				}
            				break;
            			}
HXDLIN( 173)			this->nextIndex = _hx_tmp1;
HXLINE( 181)			this->onEndReached->dispatch(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 182)			return;
            		}
HXLINE( 186)		bool _hx_tmp2;
HXDLIN( 186)		if ((this->currentIndex == 0)) {
HXLINE( 186)			_hx_tmp2 = (this->direction == false);
            		}
            		else {
HXLINE( 186)			_hx_tmp2 = false;
            		}
HXDLIN( 186)		if (_hx_tmp2) {
HXLINE( 188)			int _hx_tmp3;
HXDLIN( 188)			switch((int)(this->loopType)){
            				case (int)0: {
HXLINE( 188)					_hx_tmp3 = -1;
            				}
            				break;
            				case (int)16: {
HXLINE( 188)					_hx_tmp3 = (this->nodes->length - 1);
            				}
            				break;
            				case (int)4096: {
HXLINE( 193)					this->direction = true;
HXLINE( 188)					_hx_tmp3 = (this->currentIndex + 1);
            				}
            				break;
            			}
HXDLIN( 188)			this->nextIndex = _hx_tmp3;
HXLINE( 196)			this->onEndReached->dispatch(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 197)			return;
            		}
HXLINE( 200)		int _hx_tmp4;
HXDLIN( 200)		if (this->direction) {
HXLINE( 200)			_hx_tmp4 = 1;
            		}
            		else {
HXLINE( 200)			_hx_tmp4 = -1;
            		}
HXDLIN( 200)		this->nextIndex = (this->currentIndex + _hx_tmp4);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,setNextIndex,(void))

 ::flixel::path::FlxTypedBasePath FlxTypedBasePath_obj::startAt(int index){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_211_startAt)
HXLINE( 212)		this->currentIndex = index;
HXLINE( 213)		this->setNextIndex();
HXLINE( 215)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedBasePath_obj,startAt,return )

void FlxTypedBasePath_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_221_update)
HXLINE( 222)		this->super::update(elapsed);
HXLINE( 224)		bool _hx_tmp;
HXDLIN( 224)		if ((this->nextIndex >= 0)) {
HXLINE( 224)			_hx_tmp = ::hx::IsNull( this->target );
            		}
            		else {
HXLINE( 224)			_hx_tmp = true;
            		}
HXDLIN( 224)		if (_hx_tmp) {
HXLINE( 225)			return;
            		}
HXLINE( 227)		if (this->isTargetAtNext(elapsed)) {
HXLINE( 229)			this->nodeReached();
HXLINE( 230)			if ((this->nextIndex < 0)) {
HXLINE( 231)				return;
            			}
            		}
HXLINE( 234)		this->updateTarget(elapsed);
            	}


bool FlxTypedBasePath_obj::isTargetAtNext(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_240_isTargetAtNext)
HXDLIN( 240)		HX_STACK_DO_THROW(HX_("isTargetAtNext is not implemented",fe,99,53,eb));
HXDLIN( 240)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedBasePath_obj,isTargetAtNext,return )

void FlxTypedBasePath_obj::updateTarget(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_244_updateTarget)
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedBasePath_obj,updateTarget,(void))

int FlxTypedBasePath_obj::get_totalNodes(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_248_get_totalNodes)
HXDLIN( 248)		if (::hx::IsNotNull( this->nodes )) {
HXDLIN( 248)			return this->nodes->length;
            		}
            		else {
HXDLIN( 248)			return 0;
            		}
HXDLIN( 248)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,get_totalNodes,return )

bool FlxTypedBasePath_obj::get_finished(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_253_get_finished)
HXDLIN( 253)		return (this->nextIndex < 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,get_finished,return )

 ::flixel::math::FlxBasePoint FlxTypedBasePath_obj::get_current(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_258_get_current)
HXDLIN( 258)		bool _hx_tmp;
HXDLIN( 258)		if (::hx::IsNotNull( this->nodes )) {
HXDLIN( 258)			_hx_tmp = (this->currentIndex >= 0);
            		}
            		else {
HXDLIN( 258)			_hx_tmp = false;
            		}
HXDLIN( 258)		if (_hx_tmp) {
HXDLIN( 258)			return this->nodes->__get(this->currentIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
            		else {
HXDLIN( 258)			return null();
            		}
HXDLIN( 258)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,get_current,return )

 ::flixel::math::FlxBasePoint FlxTypedBasePath_obj::get_next(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_263_get_next)
HXDLIN( 263)		bool _hx_tmp;
HXDLIN( 263)		if (::hx::IsNotNull( this->nodes )) {
HXDLIN( 263)			_hx_tmp = (this->nextIndex >= 0);
            		}
            		else {
HXDLIN( 263)			_hx_tmp = false;
            		}
HXDLIN( 263)		if (_hx_tmp) {
HXDLIN( 263)			return this->nodes->__get(this->nextIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
            		else {
HXDLIN( 263)			return null();
            		}
HXDLIN( 263)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedBasePath_obj,get_next,return )

::Array< ::Dynamic> FlxTypedBasePath_obj::getCameras(){
            	HX_STACKFRAME(&_hx_pos_55e64b3c9045493d_275_getCameras)
HXDLIN( 275)		if (::hx::IsNotNull( this->_cameras )) {
HXLINE( 276)			return this->_cameras;
            		}
            		else {
HXLINE( 277)			if (::hx::IsNotNull( this->get_container() )) {
HXLINE( 278)				return this->get_container()->getCameras();
            			}
            			else {
HXLINE( 279)				if (::hx::IsNotNull( this->target )) {
HXLINE( 280)					return ( ( ::flixel::FlxBasic)(this->target) )->getCameras();
            				}
            				else {
HXLINE( 282)					return ::flixel::FlxCamera_obj::_defaultCameras;
            				}
            			}
            		}
HXLINE( 275)		return null();
            	}



::hx::ObjectPtr< FlxTypedBasePath_obj > FlxTypedBasePath_obj::__new(::Array< ::Dynamic> nodes, ::Dynamic target,::hx::Null< bool >  __o_direction) {
	::hx::ObjectPtr< FlxTypedBasePath_obj > __this = new FlxTypedBasePath_obj();
	__this->__construct(nodes,target,__o_direction);
	return __this;
}

::hx::ObjectPtr< FlxTypedBasePath_obj > FlxTypedBasePath_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> nodes, ::Dynamic target,::hx::Null< bool >  __o_direction) {
	FlxTypedBasePath_obj *__this = (FlxTypedBasePath_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypedBasePath_obj), true, "flixel.path.FlxTypedBasePath"));
	*(void **)__this = FlxTypedBasePath_obj::_hx_vtable;
	__this->__construct(nodes,target,__o_direction);
	return __this;
}

FlxTypedBasePath_obj::FlxTypedBasePath_obj()
{
}

void FlxTypedBasePath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedBasePath);
	HX_MARK_MEMBER_NAME(nodes,"nodes");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(loopType,"loopType");
	HX_MARK_MEMBER_NAME(direction,"direction");
	HX_MARK_MEMBER_NAME(onEndReached,"onEndReached");
	HX_MARK_MEMBER_NAME(onNodeReached,"onNodeReached");
	HX_MARK_MEMBER_NAME(onFinish,"onFinish");
	HX_MARK_MEMBER_NAME(currentIndex,"currentIndex");
	HX_MARK_MEMBER_NAME(nextIndex,"nextIndex");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedBasePath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nodes,"nodes");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(loopType,"loopType");
	HX_VISIT_MEMBER_NAME(direction,"direction");
	HX_VISIT_MEMBER_NAME(onEndReached,"onEndReached");
	HX_VISIT_MEMBER_NAME(onNodeReached,"onNodeReached");
	HX_VISIT_MEMBER_NAME(onFinish,"onFinish");
	HX_VISIT_MEMBER_NAME(currentIndex,"currentIndex");
	HX_VISIT_MEMBER_NAME(nextIndex,"nextIndex");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxTypedBasePath_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_next() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nodes") ) { return ::hx::Val( nodes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_current() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"restart") ) { return ::hx::Val( restart_dyn() ); }
		if (HX_FIELD_EQ(inName,"advance") ) { return ::hx::Val( advance_dyn() ); }
		if (HX_FIELD_EQ(inName,"startAt") ) { return ::hx::Val( startAt_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loopType") ) { return ::hx::Val( loopType ); }
		if (HX_FIELD_EQ(inName,"finished") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_finished() ); }
		if (HX_FIELD_EQ(inName,"onFinish") ) { return ::hx::Val( onFinish ); }
		if (HX_FIELD_EQ(inName,"get_next") ) { return ::hx::Val( get_next_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return ::hx::Val( direction ); }
		if (HX_FIELD_EQ(inName,"nextIndex") ) { return ::hx::Val( nextIndex ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalNodes") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_totalNodes() ); }
		if (HX_FIELD_EQ(inName,"getCameras") ) { return ::hx::Val( getCameras_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nodeReached") ) { return ::hx::Val( nodeReached_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_current") ) { return ::hx::Val( get_current_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onEndReached") ) { return ::hx::Val( onEndReached ); }
		if (HX_FIELD_EQ(inName,"currentIndex") ) { return ::hx::Val( currentIndex ); }
		if (HX_FIELD_EQ(inName,"setNextIndex") ) { return ::hx::Val( setNextIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTarget") ) { return ::hx::Val( updateTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_finished") ) { return ::hx::Val( get_finished_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onNodeReached") ) { return ::hx::Val( onNodeReached ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isTargetAtNext") ) { return ::hx::Val( isTargetAtNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_totalNodes") ) { return ::hx::Val( get_totalNodes_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getStartingNode") ) { return ::hx::Val( getStartingNode_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxTypedBasePath_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"nodes") ) { nodes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loopType") ) { loopType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onFinish") ) { onFinish=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextIndex") ) { nextIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onEndReached") ) { onEndReached=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentIndex") ) { currentIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onNodeReached") ) { onNodeReached=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedBasePath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nodes",31,b8,be,9f));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("loopType",3e,c7,76,3f));
	outFields->push(HX_("direction",3f,62,40,10));
	outFields->push(HX_("totalNodes",cd,ad,5f,a6));
	outFields->push(HX_("finished",72,93,0e,95));
	outFields->push(HX_("onEndReached",f6,c1,9d,80));
	outFields->push(HX_("onNodeReached",d1,59,83,e9));
	outFields->push(HX_("onFinish",d2,36,2c,66));
	outFields->push(HX_("currentIndex",19,80,20,05));
	outFields->push(HX_("nextIndex",1f,b5,59,65));
	outFields->push(HX_("current",39,9c,e3,cb));
	outFields->push(HX_("next",f3,84,02,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTypedBasePath_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxTypedBasePath_obj,nodes),HX_("nodes",31,b8,be,9f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTypedBasePath_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsInt,(int)offsetof(FlxTypedBasePath_obj,loopType),HX_("loopType",3e,c7,76,3f)},
	{::hx::fsBool,(int)offsetof(FlxTypedBasePath_obj,direction),HX_("direction",3f,62,40,10)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal1 */ ,(int)offsetof(FlxTypedBasePath_obj,onEndReached),HX_("onEndReached",f6,c1,9d,80)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal1 */ ,(int)offsetof(FlxTypedBasePath_obj,onNodeReached),HX_("onNodeReached",d1,59,83,e9)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal1 */ ,(int)offsetof(FlxTypedBasePath_obj,onFinish),HX_("onFinish",d2,36,2c,66)},
	{::hx::fsInt,(int)offsetof(FlxTypedBasePath_obj,currentIndex),HX_("currentIndex",19,80,20,05)},
	{::hx::fsInt,(int)offsetof(FlxTypedBasePath_obj,nextIndex),HX_("nextIndex",1f,b5,59,65)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxTypedBasePath_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedBasePath_obj_sMemberFields[] = {
	HX_("nodes",31,b8,be,9f),
	HX_("target",51,f3,ec,86),
	HX_("loopType",3e,c7,76,3f),
	HX_("direction",3f,62,40,10),
	HX_("onEndReached",f6,c1,9d,80),
	HX_("onNodeReached",d1,59,83,e9),
	HX_("onFinish",d2,36,2c,66),
	HX_("currentIndex",19,80,20,05),
	HX_("nextIndex",1f,b5,59,65),
	HX_("destroy",fa,2c,86,24),
	HX_("restart",cf,c7,a5,6a),
	HX_("getStartingNode",98,6d,fd,52),
	HX_("nodeReached",b0,3c,99,86),
	HX_("advance",82,08,0c,ef),
	HX_("setNextIndex",1d,75,a9,89),
	HX_("startAt",f5,09,1b,35),
	HX_("update",09,86,05,87),
	HX_("isTargetAtNext",c1,14,1b,7a),
	HX_("updateTarget",3a,9a,b0,86),
	HX_("get_totalNodes",16,36,55,1c),
	HX_("get_finished",7b,47,28,4a),
	HX_("get_current",50,fc,dd,51),
	HX_("get_next",7c,40,bd,c8),
	HX_("getCameras",38,10,93,32),
	::String(null()) };

::hx::Class FlxTypedBasePath_obj::__mClass;

void FlxTypedBasePath_obj::__register()
{
	FlxTypedBasePath_obj _hx_dummy;
	FlxTypedBasePath_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.path.FlxTypedBasePath",85,f6,7c,19);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTypedBasePath_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTypedBasePath_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedBasePath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedBasePath_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace path

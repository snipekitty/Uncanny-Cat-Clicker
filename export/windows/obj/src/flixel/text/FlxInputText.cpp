// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_text_FlxInputText
#include <flixel/text/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxInputTextFilterMode
#include <flixel/text/FlxInputTextFilterMode.h>
#endif
#ifndef INCLUDED_flixel_text_FlxInputTextManager
#include <flixel/text/FlxInputTextManager.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_IFlxInputText
#include <flixel/text/IFlxInputText.h>
#endif
#ifndef INCLUDED_flixel_text_MoveCursorAction
#include <flixel/text/MoveCursorAction.h>
#endif
#ifndef INCLUDED_flixel_text_TypingAction
#include <flixel/text/TypingAction.h>
#endif
#ifndef INCLUDED_flixel_text_TypingCommand
#include <flixel/text/TypingCommand.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_461edb9762e701d5_25_new,"flixel.text.FlxInputText","new",0x041d8be6,"flixel.text.FlxInputText.new","flixel/text/FlxInputText.hx",25,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_372_setManager,"flixel.text.FlxInputText","setManager",0x27bc1825,"flixel.text.FlxInputText.setManager","flixel/text/FlxInputText.hx",372,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_396_startFocus,"flixel.text.FlxInputText","startFocus",0xe1bb9950,"flixel.text.FlxInputText.startFocus","flixel/text/FlxInputText.hx",396,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_423_endFocus,"flixel.text.FlxInputText","endFocus",0xf669b0b7,"flixel.text.FlxInputText.endFocus","flixel/text/FlxInputText.hx",423,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_445_update,"flixel.text.FlxInputText","update",0x3a554243,"flixel.text.FlxInputText.update","flixel/text/FlxInputText.hx",445,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_466_draw,"flixel.text.FlxInputText","draw",0x8f2a85be,"flixel.text.FlxInputText.draw","flixel/text/FlxInputText.hx",466,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_484_destroy,"flixel.text.FlxInputText","destroy",0x56fb2380,"flixel.text.FlxInputText.destroy","flixel/text/FlxInputText.hx",484,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_509_applyFormats,"flixel.text.FlxInputText","applyFormats",0xe63db148,"flixel.text.FlxInputText.applyFormats","flixel/text/FlxInputText.hx",509,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_532_regenGraphic,"flixel.text.FlxInputText","regenGraphic",0x52daf925,"flixel.text.FlxInputText.regenGraphic","flixel/text/FlxInputText.hx",532,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_547_dispatchTypingAction,"flixel.text.FlxInputText","dispatchTypingAction",0xbed29921,"flixel.text.FlxInputText.dispatchTypingAction","flixel/text/FlxInputText.hx",547,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_566_replaceSelectedText,"flixel.text.FlxInputText","replaceSelectedText",0x4703a682,"flixel.text.FlxInputText.replaceSelectedText","flixel/text/FlxInputText.hx",566,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_591_setSelection,"flixel.text.FlxInputText","setSelection",0x7a0c5c04,"flixel.text.FlxInputText.setSelection","flixel/text/FlxInputText.hx",591,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_605_addText,"flixel.text.FlxInputText","addText",0xbbac05f4,"flixel.text.FlxInputText.addText","flixel/text/FlxInputText.hx",605,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_619_clipSprite,"flixel.text.FlxInputText","clipSprite",0xbaff1c2f,"flixel.text.FlxInputText.clipSprite","flixel/text/FlxInputText.hx",619,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_646_drawSprite,"flixel.text.FlxInputText","drawSprite",0xc674b863,"flixel.text.FlxInputText.drawSprite","flixel/text/FlxInputText.hx",646,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_661_filterText,"flixel.text.FlxInputText","filterText",0x1a59b5bf,"flixel.text.FlxInputText.filterText","flixel/text/FlxInputText.hx",661,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_704_getCaretOffsetX,"flixel.text.FlxInputText","getCaretOffsetX",0xf9ea005e,"flixel.text.FlxInputText.getCaretOffsetX","flixel/text/FlxInputText.hx",704,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_720_getCharAtPosition,"flixel.text.FlxInputText","getCharAtPosition",0xe62b306e,"flixel.text.FlxInputText.getCharAtPosition","flixel/text/FlxInputText.hx",720,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_773_getCharBoundaries,"flixel.text.FlxInputText","getCharBoundaries",0x06921f7a,"flixel.text.FlxInputText.getCharBoundaries","flixel/text/FlxInputText.hx",773,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_811_getCharIndexOnDifferentLine,"flixel.text.FlxInputText","getCharIndexOnDifferentLine",0x206b12ae,"flixel.text.FlxInputText.getCharIndexOnDifferentLine","flixel/text/FlxInputText.hx",811,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_843_getLineIndexOfChar,"flixel.text.FlxInputText","getLineIndexOfChar",0xb92f93ef,"flixel.text.FlxInputText.getLineIndexOfChar","flixel/text/FlxInputText.hx",843,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_852_getLineY,"flixel.text.FlxInputText","getLineY",0xc8bbac29,"flixel.text.FlxInputText.getLineY","flixel/text/FlxInputText.hx",852,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_867_getLimeBounds,"flixel.text.FlxInputText","getLimeBounds",0x43d30aa6,"flixel.text.FlxInputText.getLimeBounds","flixel/text/FlxInputText.hx",867,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_898_getScrollVOffset,"flixel.text.FlxInputText","getScrollVOffset",0xb1579660,"flixel.text.FlxInputText.getScrollVOffset","flixel/text/FlxInputText.hx",898,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_905_isCaretLineVisible,"flixel.text.FlxInputText","isCaretLineVisible",0xd195dd5f,"flixel.text.FlxInputText.isCaretLineVisible","flixel/text/FlxInputText.hx",905,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_921_moveCursor,"flixel.text.FlxInputText","moveCursor",0x50326a01,"flixel.text.FlxInputText.moveCursor","flixel/text/FlxInputText.hx",921,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1060_regenBackground,"flixel.text.FlxInputText","regenBackground",0xcf806191,"flixel.text.FlxInputText.regenBackground","flixel/text/FlxInputText.hx",1060,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1095_replaceText,"flixel.text.FlxInputText","replaceText",0x986f1c87,"flixel.text.FlxInputText.replaceText","flixel/text/FlxInputText.hx",1095,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1111_runCommand,"flixel.text.FlxInputText","runCommand",0xad05627a,"flixel.text.FlxInputText.runCommand","flixel/text/FlxInputText.hx",1111,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1192_restartCaretTimer,"flixel.text.FlxInputText","restartCaretTimer",0xc53bb9f7,"flixel.text.FlxInputText.restartCaretTimer","flixel/text/FlxInputText.hx",1192,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1199_updateBackgroundPosition,"flixel.text.FlxInputText","updateBackgroundPosition",0x4440c1da,"flixel.text.FlxInputText.updateBackgroundPosition","flixel/text/FlxInputText.hx",1199,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1213_updateCaretPosition,"flixel.text.FlxInputText","updateCaretPosition",0x7cccb109,"flixel.text.FlxInputText.updateCaretPosition","flixel/text/FlxInputText.hx",1213,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1249_updateCaretSize,"flixel.text.FlxInputText","updateCaretSize",0xa2fe0121,"flixel.text.FlxInputText.updateCaretSize","flixel/text/FlxInputText.hx",1249,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1324_updateSelection,"flixel.text.FlxInputText","updateSelection",0x095db589,"flixel.text.FlxInputText.updateSelection","flixel/text/FlxInputText.hx",1324,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1354_updateSelectionBoxes,"flixel.text.FlxInputText","updateSelectionBoxes",0x8ee2f8f0,"flixel.text.FlxInputText.updateSelectionBoxes","flixel/text/FlxInputText.hx",1354,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1441_updateSelectionSprites,"flixel.text.FlxInputText","updateSelectionSprites",0xffcdce45,"flixel.text.FlxInputText.updateSelectionSprites","flixel/text/FlxInputText.hx",1441,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1450_updateSpritePositions,"flixel.text.FlxInputText","updateSpritePositions",0x6e7397e2,"flixel.text.FlxInputText.updateSpritePositions","flixel/text/FlxInputText.hx",1450,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1462_updateMouseInput,"flixel.text.FlxInputText","updateMouseInput",0x3b0d8fc8,"flixel.text.FlxInputText.updateMouseInput","flixel/text/FlxInputText.hx",1462,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1516_updateTouchInput,"flixel.text.FlxInputText","updateTouchInput",0x16d17fee,"flixel.text.FlxInputText.updateTouchInput","flixel/text/FlxInputText.hx",1516,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1572_checkPointerOverlap,"flixel.text.FlxInputText","checkPointerOverlap",0xa5008eb8,"flixel.text.FlxInputText.checkPointerOverlap","flixel/text/FlxInputText.hx",1572,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1595_updatePointerPress,"flixel.text.FlxInputText","updatePointerPress",0xf9529c69,"flixel.text.FlxInputText.updatePointerPress","flixel/text/FlxInputText.hx",1595,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1611_updatePointerDrag,"flixel.text.FlxInputText","updatePointerDrag",0xc46101ce,"flixel.text.FlxInputText.updatePointerDrag","flixel/text/FlxInputText.hx",1611,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1650_updatePointerMove,"flixel.text.FlxInputText","updatePointerMove",0xca51b8eb,"flixel.text.FlxInputText.updatePointerMove","flixel/text/FlxInputText.hx",1650,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1671_updatePointerRelease,"flixel.text.FlxInputText","updatePointerRelease",0x0788542d,"flixel.text.FlxInputText.updatePointerRelease","flixel/text/FlxInputText.hx",1671,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1698_updatePointerDoublePress,"flixel.text.FlxInputText","updatePointerDoublePress",0x9798d418,"flixel.text.FlxInputText.updatePointerDoublePress","flixel/text/FlxInputText.hx",1698,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1727_getRelativePosition,"flixel.text.FlxInputText","getRelativePosition",0x75f2d5d1,"flixel.text.FlxInputText.getRelativePosition","flixel/text/FlxInputText.hx",1727,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1737_set_bold,"flixel.text.FlxInputText","set_bold",0x6316553c,"flixel.text.FlxInputText.set_bold","flixel/text/FlxInputText.hx",1737,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1747_set_clipRect,"flixel.text.FlxInputText","set_clipRect",0xea1f0b4b,"flixel.text.FlxInputText.set_clipRect","flixel/text/FlxInputText.hx",1747,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1760_set_color,"flixel.text.FlxInputText","set_color",0xe3daddcc,"flixel.text.FlxInputText.set_color","flixel/text/FlxInputText.hx",1760,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1770_set_fieldHeight,"flixel.text.FlxInputText","set_fieldHeight",0xef58796a,"flixel.text.FlxInputText.set_fieldHeight","flixel/text/FlxInputText.hx",1770,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1781_set_fieldWidth,"flixel.text.FlxInputText","set_fieldWidth",0x5c1825e3,"flixel.text.FlxInputText.set_fieldWidth","flixel/text/FlxInputText.hx",1781,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1792_set_font,"flixel.text.FlxInputText","set_font",0x65bb3186,"flixel.text.FlxInputText.set_font","flixel/text/FlxInputText.hx",1792,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1803_set_italic,"flixel.text.FlxInputText","set_italic",0xbb849e67,"flixel.text.FlxInputText.set_italic","flixel/text/FlxInputText.hx",1803,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1814_set_size,"flixel.text.FlxInputText","set_size",0x6e4e7478,"flixel.text.FlxInputText.set_size","flixel/text/FlxInputText.hx",1814,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1825_set_systemFont,"flixel.text.FlxInputText","set_systemFont",0xb676bb55,"flixel.text.FlxInputText.set_systemFont","flixel/text/FlxInputText.hx",1825,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1836_set_text,"flixel.text.FlxInputText","set_text",0x6ef4a064,"flixel.text.FlxInputText.set_text","flixel/text/FlxInputText.hx",1836,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1876_set_x,"flixel.text.FlxInputText","set_x",0x5083c461,"flixel.text.FlxInputText.set_x","flixel/text/FlxInputText.hx",1876,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1887_set_y,"flixel.text.FlxInputText","set_y",0x5083c462,"flixel.text.FlxInputText.set_y","flixel/text/FlxInputText.hx",1887,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1898_set_background,"flixel.text.FlxInputText","set_background",0xea508ae5,"flixel.text.FlxInputText.set_background","flixel/text/FlxInputText.hx",1898,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1923_set_backgroundColor,"flixel.text.FlxInputText","set_backgroundColor",0x60beb83e,"flixel.text.FlxInputText.set_backgroundColor","flixel/text/FlxInputText.hx",1923,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1935_get_bottomScrollV,"flixel.text.FlxInputText","get_bottomScrollV",0x0ce89d5b,"flixel.text.FlxInputText.get_bottomScrollV","flixel/text/FlxInputText.hx",1935,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1939_set_caretColor,"flixel.text.FlxInputText","set_caretColor",0x2dd683d7,"flixel.text.FlxInputText.set_caretColor","flixel/text/FlxInputText.hx",1939,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1951_get_caretIndex,"flixel.text.FlxInputText","get_caretIndex",0x816ec512,"flixel.text.FlxInputText.get_caretIndex","flixel/text/FlxInputText.hx",1951,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1955_set_caretIndex,"flixel.text.FlxInputText","set_caretIndex",0xa18ead86,"flixel.text.FlxInputText.set_caretIndex","flixel/text/FlxInputText.hx",1955,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1971_set_caretWidth,"flixel.text.FlxInputText","set_caretWidth",0xaddcc87a,"flixel.text.FlxInputText.set_caretWidth","flixel/text/FlxInputText.hx",1971,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1984_set_fieldBorderColor,"flixel.text.FlxInputText","set_fieldBorderColor",0xd2cf7074,"flixel.text.FlxInputText.set_fieldBorderColor","flixel/text/FlxInputText.hx",1984,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_1995_set_fieldBorderThickness,"flixel.text.FlxInputText","set_fieldBorderThickness",0xfb954d05,"flixel.text.FlxInputText.set_fieldBorderThickness","flixel/text/FlxInputText.hx",1995,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2008_set_filterMode,"flixel.text.FlxInputText","set_filterMode",0x18d85232,"flixel.text.FlxInputText.set_filterMode","flixel/text/FlxInputText.hx",2008,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2019_set_forceCase,"flixel.text.FlxInputText","set_forceCase",0x33362324,"flixel.text.FlxInputText.set_forceCase","flixel/text/FlxInputText.hx",2019,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2031_get_maxChars,"flixel.text.FlxInputText","get_maxChars",0x6c8c475c,"flixel.text.FlxInputText.get_maxChars","flixel/text/FlxInputText.hx",2031,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2035_set_maxChars,"flixel.text.FlxInputText","set_maxChars",0x81856ad0,"flixel.text.FlxInputText.set_maxChars","flixel/text/FlxInputText.hx",2035,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2047_get_maxScrollH,"flixel.text.FlxInputText","get_maxScrollH",0x3f0fbbda,"flixel.text.FlxInputText.get_maxScrollH","flixel/text/FlxInputText.hx",2047,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2052_get_maxScrollV,"flixel.text.FlxInputText","get_maxScrollV",0x3f0fbbe8,"flixel.text.FlxInputText.get_maxScrollV","flixel/text/FlxInputText.hx",2052,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2057_get_multiline,"flixel.text.FlxInputText","get_multiline",0x454345ca,"flixel.text.FlxInputText.get_multiline","flixel/text/FlxInputText.hx",2057,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2061_set_multiline,"flixel.text.FlxInputText","set_multiline",0x8a4927d6,"flixel.text.FlxInputText.set_multiline","flixel/text/FlxInputText.hx",2061,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2072_get_passwordMode,"flixel.text.FlxInputText","get_passwordMode",0xcfff4161,"flixel.text.FlxInputText.get_passwordMode","flixel/text/FlxInputText.hx",2072,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2076_set_passwordMode,"flixel.text.FlxInputText","set_passwordMode",0x26412ed5,"flixel.text.FlxInputText.set_passwordMode","flixel/text/FlxInputText.hx",2076,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2087_get_scrollH,"flixel.text.FlxInputText","get_scrollH",0xedac4538,"flixel.text.FlxInputText.get_scrollH","flixel/text/FlxInputText.hx",2087,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2091_set_scrollH,"flixel.text.FlxInputText","set_scrollH",0xf8194c44,"flixel.text.FlxInputText.set_scrollH","flixel/text/FlxInputText.hx",2091,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2102_get_scrollV,"flixel.text.FlxInputText","get_scrollV",0xedac4546,"flixel.text.FlxInputText.get_scrollV","flixel/text/FlxInputText.hx",2102,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2106_set_scrollV,"flixel.text.FlxInputText","set_scrollV",0xf8194c52,"flixel.text.FlxInputText.set_scrollV","flixel/text/FlxInputText.hx",2106,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2116_set_selectedTextColor,"flixel.text.FlxInputText","set_selectedTextColor",0xff96f984,"flixel.text.FlxInputText.set_selectedTextColor","flixel/text/FlxInputText.hx",2116,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2129_get_selectionBeginIndex,"flixel.text.FlxInputText","get_selectionBeginIndex",0x114e08b2,"flixel.text.FlxInputText.get_selectionBeginIndex","flixel/text/FlxInputText.hx",2129,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2133_set_selectionColor,"flixel.text.FlxInputText","set_selectionColor",0x65aa93ee,"flixel.text.FlxInputText.set_selectionColor","flixel/text/FlxInputText.hx",2133,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2149_get_selectionEndIndex,"flixel.text.FlxInputText","get_selectionEndIndex",0xa69d2580,"flixel.text.FlxInputText.get_selectionEndIndex","flixel/text/FlxInputText.hx",2149,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_2153_set_useSelectedTextFormat,"flixel.text.FlxInputText","set_useSelectedTextFormat",0xffd45a8f,"flixel.text.FlxInputText.set_useSelectedTextFormat","flixel/text/FlxInputText.hx",2153,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_35_boot,"flixel.text.FlxInputText","boot",0x8dd5ddec,"flixel.text.FlxInputText.boot","flixel/text/FlxInputText.hx",35,0x805681ea)
HX_LOCAL_STACK_FRAME(_hx_pos_461edb9762e701d5_40_boot,"flixel.text.FlxInputText","boot",0x8dd5ddec,"flixel.text.FlxInputText.boot","flixel/text/FlxInputText.hx",40,0x805681ea)
static const ::String _hx_array_data_89ec60f4_105[] = {
	HX_("\n",0a,00,00,00),HX_(".",2e,00,00,00),HX_("!",21,00,00,00),HX_("?",3f,00,00,00),HX_(",",2c,00,00,00),HX_(" ",20,00,00,00),HX_(";",3b,00,00,00),HX_(":",3a,00,00,00),HX_("(",28,00,00,00),HX_(")",29,00,00,00),HX_("-",2d,00,00,00),HX_("_",5f,00,00,00),HX_("/",2f,00,00,00),
};
namespace flixel{
namespace text{

void FlxInputText_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_fieldWidth,::String text,::hx::Null< int >  __o_size,::hx::Null< int >  __o_textColor,::hx::Null< int >  __o_backgroundColor,::hx::Null< bool >  __o_embeddedFont, ::flixel::text::FlxInputTextManager manager){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float fieldWidth = __o_fieldWidth.Default(0);
            		int size = __o_size.Default(8);
            		int textColor = __o_textColor.Default(-16777216);
            		int backgroundColor = __o_backgroundColor.Default(-1);
            		bool embeddedFont = __o_embeddedFont.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_461edb9762e701d5_25_new)
HXLINE( 299)		this->_mouseDown = false;
HXLINE( 294)		this->_scrollVCounter = ((Float)0);
HXLINE( 289)		this->_lastPressTime = 0;
HXLINE( 284)		this->_selectionIndex = -1;
HXLINE( 280)		this->_selectionFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 276)		this->_selectionBoxes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 269)		this->_regenCaretSize = false;
HXLINE( 264)		this->_regenBackground = false;
HXLINE( 254)		this->_justGainedFocus = false;
HXLINE( 244)		this->_caretTimer = ((Float)0);
HXLINE( 240)		this->_caretIndex = -1;
HXLINE( 222)		this->useSelectedTextFormat = true;
HXLINE( 207)		this->selectionColor = -16777216;
HXLINE( 195)		this->selectedTextColor = -1;
HXLINE( 189)		this->selectable = true;
HXLINE( 171)		this->onTextChange =  ::flixel::util::_FlxSignal::FlxSignal2_obj::__alloc( HX_CTX );
HXLINE( 163)		this->onScrollChange =  ::flixel::util::_FlxSignal::FlxSignal2_obj::__alloc( HX_CTX );
HXLINE( 155)		this->onFocusChange =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE( 148)		this->onEnter =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE( 128)		this->mouseWheelEnabled = true;
HXLINE( 107)		this->hasFocus = false;
HXLINE( 102)		this->forceCase = 0;
HXLINE(  97)		this->filterMode = ::flixel::text::FlxInputTextFilterMode_obj::NONE_dyn();
HXLINE(  92)		this->fieldBorderThickness = 1;
HXLINE(  85)		this->fieldBorderColor = -16777216;
HXLINE(  80)		this->editable = true;
HXLINE(  75)		this->caretWidth = 1;
HXLINE(  50)		this->backgroundColor = -1;
HXLINE(  45)		this->background = false;
HXLINE( 334)		super::__construct(x,y,fieldWidth,text,size,embeddedFont);
HXLINE( 335)		bool _hx_tmp;
HXDLIN( 335)		if (::hx::IsNotNull( text )) {
HXLINE( 335)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 335)			_hx_tmp = true;
            		}
HXDLIN( 335)		if (_hx_tmp) {
HXLINE( 337)			this->textField->set_text(HX_("",00,00,00,00));
HXLINE( 338)			this->_regen = true;
            		}
HXLINE( 340)		this->set_backgroundColor(backgroundColor);
HXLINE( 343)		if ((this->textField->get_multiline() != false)) {
HXLINE( 343)			this->textField->set_multiline(false);
            		}
HXDLIN( 343)		this->set_wordWrap(false);
HXLINE( 346)		this->textField->set_type(1);
HXLINE( 348)		this->_selectionFormat->color = this->selectedTextColor;
HXLINE( 350)		this->_caret =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,null(),null(),null());
HXLINE( 351)		this->_caret->set_visible(false);
HXLINE( 352)		this->updateCaretSize();
HXLINE( 353)		this->updateCaretPosition();
HXLINE( 355)		this->set_color(textColor);
HXLINE( 357)		if ((backgroundColor != 0)) {
HXLINE( 359)			this->set_background(true);
            		}
HXLINE( 362)		if (::hx::IsNull( manager )) {
HXLINE( 364)			manager = ::flixel::text::FlxInputText_obj::globalManager;
            		}
HXLINE( 367)		this->manager = manager;
HXLINE( 368)		manager->registerInputText(::hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic FlxInputText_obj::__CreateEmpty() { return new FlxInputText_obj; }

void *FlxInputText_obj::_hx_vtable = 0;

Dynamic FlxInputText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxInputText_obj > _hx_result = new FlxInputText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool FlxInputText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x752f90b6) {
		if (inClassId<=(int)0x3674a1f6) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x3674a1f6;
			}
		} else {
			return inClassId==(int)0x752f90b6;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

static ::flixel::text::IFlxInputText_obj _hx_flixel_text_FlxInputText__hx_flixel_text_IFlxInputText= {
	( void (::hx::Object::*)())&::flixel::text::FlxInputText_obj::startFocus,
	( void (::hx::Object::*)())&::flixel::text::FlxInputText_obj::endFocus,
	( void (::hx::Object::*)( ::flixel::text::TypingAction))&::flixel::text::FlxInputText_obj::dispatchTypingAction,
};

void *FlxInputText_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x7c30ed85: return &_hx_flixel_text_FlxInputText__hx_flixel_text_IFlxInputText;
	}
	return super::_hx_getInterface(inHash);
}

void FlxInputText_obj::setManager( ::flixel::text::FlxInputTextManager manager){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_372_setManager)
HXLINE( 373)		if (::hx::IsNull( this->manager )) {
HXLINE( 375)			::flixel::FlxG_obj::log->advanced(HX_("Cannot set manager once destroyed",68,a1,f5,fc),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true,::hx::SourceInfo(HX_("flixel/text/FlxInputText.hx",ea,81,56,80),375,HX_("flixel.text.FlxInputText",f4,60,ec,89),HX_("setManager",eb,b6,a0,66)));
HXLINE( 376)			return;
            		}
HXLINE( 379)		if (::hx::IsInstanceEq( manager,this->manager )) {
HXLINE( 380)			return;
            		}
HXLINE( 382)		bool hasFocus = ::hx::IsInstanceEq( this->manager->focus,::hx::ObjectPtr<OBJ_>(this) );
HXLINE( 383)		this->manager->unregisterInputText(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 385)		manager->registerInputText(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 386)		if (hasFocus) {
HXLINE( 388)			manager->setFocus(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 391)		this->manager = manager;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,setManager,(void))

void FlxInputText_obj::startFocus(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_396_startFocus)
HXDLIN( 396)		if (!(this->hasFocus)) {
HXLINE( 399)			this->hasFocus = true;
HXLINE( 402)			 ::lime::math::Rectangle bounds = this->getLimeBounds(this->_pointerCamera);
HXLINE( 403)			::openfl::Lib_obj::get_current()->stage->window->setTextInputRect(bounds);
HXLINE( 405)			this->manager->setFocus(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 407)			if ((this->_caretIndex < 0)) {
HXLINE( 409)				this->_caretIndex = this->text.length;
HXLINE( 410)				this->_selectionIndex = this->_caretIndex;
HXLINE( 411)				this->updateSelection(true);
            			}
HXLINE( 414)			this->restartCaretTimer();
HXLINE( 416)			this->_justGainedFocus = true;
HXLINE( 417)			this->onFocusChange->dispatch(this->hasFocus);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,startFocus,(void))

void FlxInputText_obj::endFocus(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_423_endFocus)
HXDLIN( 423)		if (this->hasFocus) {
HXLINE( 426)			this->hasFocus = false;
HXLINE( 429)			if (::hx::IsInstanceEq( this->manager->focus,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 431)				this->manager->setFocus(null());
            			}
HXLINE( 434)			if ((this->_selectionIndex != this->_caretIndex)) {
HXLINE( 436)				this->_selectionIndex = this->_caretIndex;
HXLINE( 437)				this->updateSelection(true);
            			}
HXLINE( 440)			this->onFocusChange->dispatch(this->hasFocus);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,endFocus,(void))

void FlxInputText_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_445_update)
HXLINE( 446)		this->super::update(elapsed);
HXLINE( 448)		 ::flixel::text::FlxInputText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 448)		_hx_tmp->_caretTimer = (_hx_tmp->_caretTimer + elapsed);
HXLINE( 449)		bool showCaret = (::hx::Mod(this->_caretTimer,((Float)1.2)) < ((Float)0.6));
HXLINE( 450)		 ::flixel::FlxSprite _hx_tmp1 = this->_caret;
HXDLIN( 450)		bool _hx_tmp2;
HXDLIN( 450)		bool _hx_tmp3;
HXDLIN( 450)		bool _hx_tmp4;
HXDLIN( 450)		bool _hx_tmp5;
HXDLIN( 450)		if (showCaret) {
HXLINE( 450)			_hx_tmp5 = this->hasFocus;
            		}
            		else {
HXLINE( 450)			_hx_tmp5 = false;
            		}
HXDLIN( 450)		if (_hx_tmp5) {
HXLINE( 450)			_hx_tmp4 = this->editable;
            		}
            		else {
HXLINE( 450)			_hx_tmp4 = false;
            		}
HXDLIN( 450)		if (_hx_tmp4) {
HXLINE( 450)			_hx_tmp3 = (this->_selectionIndex == this->_caretIndex);
            		}
            		else {
HXLINE( 450)			_hx_tmp3 = false;
            		}
HXDLIN( 450)		if (_hx_tmp3) {
HXLINE( 450)			_hx_tmp2 = this->isCaretLineVisible();
            		}
            		else {
HXLINE( 450)			_hx_tmp2 = false;
            		}
HXDLIN( 450)		_hx_tmp1->set_visible(_hx_tmp2);
HXLINE( 453)		if (this->visible) {
HXLINE( 455)			if (!(this->updateMouseInput(elapsed))) {
HXLINE( 456)				this->updateTouchInput(elapsed);
            			}
            		}
HXLINE( 459)		if (this->_justGainedFocus) {
HXLINE( 461)			this->_justGainedFocus = false;
            		}
            	}


void FlxInputText_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_466_draw)
HXLINE( 467)		this->regenGraphic();
HXLINE( 469)		this->drawSprite(this->_fieldBorderSprite);
HXLINE( 470)		this->drawSprite(this->_backgroundSprite);
HXLINE( 472)		{
HXLINE( 472)			int _g = 0;
HXDLIN( 472)			::Array< ::Dynamic> _g1 = this->_selectionBoxes;
HXDLIN( 472)			while((_g < _g1->length)){
HXLINE( 472)				 ::flixel::FlxSprite box = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 472)				_g = (_g + 1);
HXLINE( 473)				this->drawSprite(box);
            			}
            		}
HXLINE( 475)		this->super::draw();
HXLINE( 477)		this->drawSprite(this->_caret);
            	}


void FlxInputText_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_484_destroy)
HXLINE( 485)		this->endFocus();
HXLINE( 486)		this->manager->unregisterInputText(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 488)		::flixel::util::FlxDestroyUtil_obj::destroy(this->onEnter);
HXLINE( 489)		::flixel::util::FlxDestroyUtil_obj::destroy(this->onFocusChange);
HXLINE( 490)		::flixel::util::FlxDestroyUtil_obj::destroy(this->onScrollChange);
HXLINE( 491)		::flixel::util::FlxDestroyUtil_obj::destroy(this->onTextChange);
HXLINE( 493)		this->_backgroundSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_backgroundSprite)) );
HXLINE( 494)		this->_caret = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_caret)) );
HXLINE( 495)		this->_fieldBorderSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_fieldBorderSprite)) );
HXLINE( 496)		this->_pointerCamera = null();
HXLINE( 497)		while((this->_selectionBoxes->length > 0)){
HXLINE( 498)			::flixel::util::FlxDestroyUtil_obj::destroy(this->_selectionBoxes->pop().StaticCast<  ::flixel::FlxSprite >());
            		}
HXLINE( 499)		this->_selectionBoxes = null();
HXLINE( 500)		this->_selectionFormat = null();
HXLINE( 505)		this->super::destroy();
            	}


void FlxInputText_obj::applyFormats( ::openfl::text::TextFormat formatAdjusted,::hx::Null< bool >  __o_useBorderColor){
            		bool useBorderColor = __o_useBorderColor.Default(false);
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_509_applyFormats)
HXLINE( 512)		int cacheScrollH = this->textField->get_scrollH();
HXLINE( 513)		int cacheScrollV = this->textField->get_scrollV();
HXLINE( 515)		this->super::applyFormats(formatAdjusted,useBorderColor);
HXLINE( 517)		bool _hx_tmp;
HXDLIN( 517)		bool _hx_tmp1;
HXDLIN( 517)		if (!(useBorderColor)) {
HXLINE( 517)			_hx_tmp1 = this->useSelectedTextFormat;
            		}
            		else {
HXLINE( 517)			_hx_tmp1 = false;
            		}
HXDLIN( 517)		if (_hx_tmp1) {
HXLINE( 517)			int _hx_tmp2 = this->get_selectionEndIndex();
HXDLIN( 517)			_hx_tmp = (_hx_tmp2 > this->get_selectionBeginIndex());
            		}
            		else {
HXLINE( 517)			_hx_tmp = false;
            		}
HXDLIN( 517)		if (_hx_tmp) {
HXLINE( 518)			 ::openfl::text::TextField _hx_tmp3 = this->textField;
HXDLIN( 518)			 ::openfl::text::TextFormat _hx_tmp4 = this->_selectionFormat;
HXDLIN( 518)			int _hx_tmp5 = this->get_selectionBeginIndex();
HXDLIN( 518)			_hx_tmp3->setTextFormat(_hx_tmp4,_hx_tmp5,this->get_selectionEndIndex());
            		}
HXLINE( 527)		this->textField->set_scrollH(cacheScrollH);
HXLINE( 528)		this->textField->set_scrollV(cacheScrollV);
            	}


void FlxInputText_obj::regenGraphic(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_532_regenGraphic)
HXLINE( 533)		bool regenSelection = this->_regen;
HXLINE( 535)		this->super::regenGraphic();
HXLINE( 537)		if (this->_regenCaretSize) {
HXLINE( 538)			this->updateCaretSize();
            		}
HXLINE( 539)		if (regenSelection) {
HXLINE( 540)			this->updateSelectionSprites();
            		}
HXLINE( 541)		if (this->_regenBackground) {
HXLINE( 542)			this->regenBackground();
            		}
            	}


void FlxInputText_obj::dispatchTypingAction( ::flixel::text::TypingAction action){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_547_dispatchTypingAction)
HXDLIN( 547)		switch((int)(action->_hx_getIndex())){
            			case (int)0: {
HXLINE( 549)				::String newText = action->_hx_getString(0);
HXLINE( 550)				if (this->editable) {
HXLINE( 552)					this->addText(newText);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 554)				 ::flixel::text::MoveCursorAction type = action->_hx_getObject(0).StaticCast<  ::flixel::text::MoveCursorAction >();
HXDLIN( 554)				bool shiftKey = action->_hx_getBool(1);
HXLINE( 555)				this->moveCursor(type,shiftKey);
            			}
            			break;
            			case (int)2: {
HXLINE( 556)				 ::flixel::text::TypingCommand cmd = action->_hx_getObject(0).StaticCast<  ::flixel::text::TypingCommand >();
HXLINE( 557)				this->runCommand(cmd);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,dispatchTypingAction,(void))

void FlxInputText_obj::replaceSelectedText(::String newText){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_566_replaceSelectedText)
HXLINE( 567)		if (::hx::IsNull( newText )) {
HXLINE( 568)			newText = HX_("",00,00,00,00);
            		}
HXLINE( 569)		bool _hx_tmp;
HXDLIN( 569)		if ((newText == HX_("",00,00,00,00))) {
HXLINE( 569)			_hx_tmp = (this->_selectionIndex == this->_caretIndex);
            		}
            		else {
HXLINE( 569)			_hx_tmp = false;
            		}
HXDLIN( 569)		if (_hx_tmp) {
HXLINE( 570)			return;
            		}
HXLINE( 572)		int beginIndex = this->get_selectionBeginIndex();
HXLINE( 573)		int endIndex = this->get_selectionEndIndex();
HXLINE( 575)		bool _hx_tmp1;
HXDLIN( 575)		bool _hx_tmp2;
HXDLIN( 575)		if ((beginIndex == endIndex)) {
HXLINE( 575)			_hx_tmp2 = (this->textField->get_maxChars() > 0);
            		}
            		else {
HXLINE( 575)			_hx_tmp2 = false;
            		}
HXDLIN( 575)		if (_hx_tmp2) {
HXLINE( 575)			int _hx_tmp3 = this->text.length;
HXDLIN( 575)			_hx_tmp1 = (_hx_tmp3 == this->textField->get_maxChars());
            		}
            		else {
HXLINE( 575)			_hx_tmp1 = false;
            		}
HXDLIN( 575)		if (_hx_tmp1) {
HXLINE( 576)			return;
            		}
HXLINE( 578)		if ((beginIndex < 0)) {
HXLINE( 580)			beginIndex = 0;
            		}
HXLINE( 583)		this->replaceText(beginIndex,endIndex,newText);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,replaceSelectedText,(void))

void FlxInputText_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_591_setSelection)
HXLINE( 592)		this->_selectionIndex = beginIndex;
HXLINE( 593)		this->_caretIndex = endIndex;
HXLINE( 595)		if (::hx::IsNull( this->textField )) {
HXLINE( 596)			return;
            		}
HXLINE( 598)		this->updateSelection(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,setSelection,(void))

void FlxInputText_obj::addText(::String newText){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_605_addText)
HXLINE( 606)		newText = this->filterText(newText,true);
HXLINE( 607)		if ((newText.length > 0)) {
HXLINE( 609)			this->replaceSelectedText(newText);
HXLINE( 610)			this->onTextChange->dispatch(this->text,HX_("input",0a,c4,1d,be));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,addText,(void))

void FlxInputText_obj::clipSprite( ::flixel::FlxSprite sprite,::hx::Null< bool >  __o_border){
            		bool border = __o_border.Default(false);
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_619_clipSprite)
HXLINE( 620)		if (::hx::IsNull( sprite )) {
HXLINE( 621)			return;
            		}
HXLINE( 623)		 ::flixel::math::FlxRect rect = sprite->clipRect;
HXLINE( 624)		if (::hx::IsNull( rect )) {
HXLINE( 625)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 625)			_this->x = ( (Float)(0) );
HXDLIN( 625)			_this->y = ( (Float)(0) );
HXDLIN( 625)			_this->width = ( (Float)(0) );
HXDLIN( 625)			_this->height = ( (Float)(0) );
HXDLIN( 625)			 ::flixel::math::FlxRect rect1 = _this;
HXDLIN( 625)			rect1->_inPool = false;
HXDLIN( 625)			rect = rect1;
            		}
HXLINE( 626)		{
HXLINE( 626)			Float Width = sprite->get_width();
HXDLIN( 626)			Float Height = sprite->get_height();
HXDLIN( 626)			rect->x = ( (Float)(0) );
HXDLIN( 626)			rect->y = ( (Float)(0) );
HXDLIN( 626)			rect->width = Width;
HXDLIN( 626)			rect->height = Height;
            		}
HXLINE( 628)		 ::flixel::math::FlxRect bounds;
HXDLIN( 628)		if (border) {
HXLINE( 628)			Float X = ( (Float)(-(this->fieldBorderThickness)) );
HXDLIN( 628)			Float Y = ( (Float)(-(this->fieldBorderThickness)) );
HXDLIN( 628)			Float Width1 = this->get_width();
HXDLIN( 628)			Float Width2 = (Width1 + (this->fieldBorderThickness * 2));
HXLINE( 629)			Float Height1 = this->get_height();
HXLINE( 628)			Float Height2 = (Height1 + (this->fieldBorderThickness * 2));
HXDLIN( 628)			 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 628)			_this1->x = X;
HXDLIN( 628)			_this1->y = Y;
HXDLIN( 628)			_this1->width = Width2;
HXDLIN( 628)			_this1->height = Height2;
HXDLIN( 628)			 ::flixel::math::FlxRect rect2 = _this1;
HXDLIN( 628)			rect2->_inPool = false;
HXDLIN( 628)			bounds = rect2;
            		}
            		else {
HXLINE( 629)			Float Width3 = this->get_width();
HXDLIN( 629)			Float Height3 = this->get_height();
HXDLIN( 629)			 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 629)			_this2->x = ( (Float)(0) );
HXDLIN( 629)			_this2->y = ( (Float)(0) );
HXDLIN( 629)			_this2->width = Width3;
HXDLIN( 629)			_this2->height = Height3;
HXDLIN( 629)			 ::flixel::math::FlxRect rect3 = _this2;
HXDLIN( 629)			rect3->_inPool = false;
HXLINE( 628)			bounds = rect3;
            		}
HXLINE( 630)		if (::hx::IsNotNull( this->clipRect )) {
HXLINE( 632)			bounds = bounds->clipTo(this->clipRect);
            		}
HXLINE( 634)		{
HXLINE( 634)			 ::flixel::math::FlxRect bounds1 = bounds;
HXDLIN( 634)			bounds1->x = (bounds1->x + (this->x - sprite->x));
HXDLIN( 634)			 ::flixel::math::FlxRect bounds2 = bounds;
HXDLIN( 634)			bounds2->y = (bounds2->y + (this->y - sprite->y));
            		}
HXLINE( 636)		sprite->set_clipRect(rect->clipTo(bounds));
HXLINE( 638)		if (!(bounds->_inPool)) {
HXLINE( 638)			bounds->_inPool = true;
HXDLIN( 638)			bounds->_weak = false;
HXDLIN( 638)			::flixel::math::FlxRect_obj::_pool->putUnsafe(bounds);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,clipSprite,(void))

void FlxInputText_obj::drawSprite( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_646_drawSprite)
HXDLIN( 646)		bool _hx_tmp;
HXDLIN( 646)		if (::hx::IsNotNull( sprite )) {
HXDLIN( 646)			_hx_tmp = sprite->visible;
            		}
            		else {
HXDLIN( 646)			_hx_tmp = false;
            		}
HXDLIN( 646)		if (_hx_tmp) {
HXLINE( 648)			{
HXLINE( 648)				 ::flixel::math::FlxBasePoint this1 = sprite->scrollFactor;
HXDLIN( 648)				 ::flixel::math::FlxBasePoint p = this->scrollFactor;
HXDLIN( 648)				{
HXLINE( 648)					Float y = p->y;
HXDLIN( 648)					this1->set_x(p->x);
HXDLIN( 648)					this1->set_y(y);
            				}
HXDLIN( 648)				{
HXLINE( 648)					 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 648)					if (_this->_weak) {
HXLINE( 648)						_this->put();
            					}
            				}
            			}
HXLINE( 649)			sprite->_cameras = this->_cameras;
HXLINE( 650)			sprite->draw();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,drawSprite,(void))

::String FlxInputText_obj::filterText(::String newText,::hx::Null< bool >  __o_selection){
            		bool selection = __o_selection.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_461edb9762e701d5_661_filterText)
HXLINE( 662)		if ((this->forceCase == 1)) {
HXLINE( 664)			newText = newText.toUpperCase();
            		}
            		else {
HXLINE( 666)			if ((this->forceCase == 2)) {
HXLINE( 668)				newText = newText.toLowerCase();
            			}
            		}
HXLINE( 671)		if (::hx::IsPointerNotEq( this->filterMode,::flixel::text::FlxInputTextFilterMode_obj::NONE_dyn() )) {
HXLINE( 673)			 ::EReg pattern;
HXDLIN( 673)			 ::flixel::text::FlxInputTextFilterMode _g = this->filterMode;
HXDLIN( 673)			switch((int)(_g->_hx_getIndex())){
            				case (int)1: {
HXLINE( 673)					pattern =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]*",50,38,19,1d),HX_("g",67,00,00,00));
            				}
            				break;
            				case (int)2: {
HXLINE( 673)					pattern =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^0-9]*",46,25,d3,1e),HX_("g",67,00,00,00));
            				}
            				break;
            				case (int)3: {
HXLINE( 673)					pattern =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z0-9]*",86,f4,79,aa),HX_("g",67,00,00,00));
            				}
            				break;
            				case (int)4: {
HXLINE( 681)					 ::EReg reg = _g->_hx_getObject(0).StaticCast<  ::EReg >();
HXLINE( 673)					pattern = reg;
            				}
            				break;
            				case (int)5: {
HXLINE( 683)					::String chars = _g->_hx_getString(0);
HXLINE( 685)					chars = ::StringTools_obj::replace(::StringTools_obj::replace(::StringTools_obj::replace(chars,HX_("\\",5c,00,00,00),HX_("\\\\",80,50,00,00)),HX_("-",2d,00,00,00),HX_("\\-",51,50,00,00)),HX_("]",5d,00,00,00),HX_("\\]",81,50,00,00));
HXLINE( 673)					pattern =  ::EReg_obj::__alloc( HX_CTX ,((HX_("[^",a3,4f,00,00) + chars) + HX_("]*",2d,51,00,00)),HX_("g",67,00,00,00));
            				}
            				break;
            				default:{
HXLINE( 688)					HX_STACK_DO_THROW(((HX_("Unknown filterMode (",79,06,14,ea) + ::Std_obj::string(this->filterMode)) + HX_(")",29,00,00,00)));
            				}
            			}
HXLINE( 690)			if (::hx::IsNotNull( pattern )) {
HXLINE( 691)				newText = pattern->replace(newText,HX_("",00,00,00,00));
            			}
            		}
HXLINE( 694)		return newText;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,filterText,return )

Float FlxInputText_obj::getCaretOffsetX(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_704_getCaretOffsetX)
HXDLIN( 704)		::String _hx_switch_0 = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(this->_defaultFormat->align);
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 706)			return (this->get_width() / ( (Float)(2) ));
HXDLIN( 706)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 707)			return (this->get_width() - ( (Float)(2) ));
HXDLIN( 707)			goto _hx_goto_18;
            		}
            		/* default */{
HXLINE( 708)			return ( (Float)(2) );
            		}
            		_hx_goto_18:;
HXLINE( 704)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,getCaretOffsetX,return )

int FlxInputText_obj::getCharAtPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_720_getCharAtPosition)
HXLINE( 721)		if ((x < 2)) {
HXLINE( 722)			x = ( (Float)(2) );
            		}
HXLINE( 724)		if ((y > this->textField->get_textHeight())) {
HXLINE( 725)			y = this->textField->get_textHeight();
            		}
HXLINE( 726)		if ((y < 2)) {
HXLINE( 727)			y = ( (Float)(2) );
            		}
HXLINE( 729)		{
HXLINE( 729)			int _g = 0;
HXDLIN( 729)			int _g1 = this->textField->get_numLines();
HXDLIN( 729)			while((_g < _g1)){
HXLINE( 729)				_g = (_g + 1);
HXDLIN( 729)				int line = (_g - 1);
HXLINE( 731)				Float lineY = (2 + this->getLineY(line));
HXLINE( 732)				int lineOffset = this->textField->getLineOffset(line);
HXLINE( 733)				Float lineHeight = this->textField->getLineMetrics(line)->height;
HXLINE( 734)				bool _hx_tmp;
HXDLIN( 734)				if ((y >= lineY)) {
HXLINE( 734)					_hx_tmp = (y <= (lineY + lineHeight));
            				}
            				else {
HXLINE( 734)					_hx_tmp = false;
            				}
HXDLIN( 734)				if (_hx_tmp) {
HXLINE( 737)					int lineLength = this->textField->getLineLength(line);
HXLINE( 738)					int lineEndIndex = (lineOffset + lineLength);
HXLINE( 739)					{
HXLINE( 739)						int _g2 = 0;
HXDLIN( 739)						int _g3 = lineLength;
HXDLIN( 739)						while((_g2 < _g3)){
HXLINE( 739)							_g2 = (_g2 + 1);
HXDLIN( 739)							int _hx_char = (_g2 - 1);
HXLINE( 741)							 ::openfl::geom::Rectangle boundaries = this->getCharBoundaries((lineOffset + _hx_char));
HXLINE( 743)							if (::hx::IsNull( boundaries )) {
HXLINE( 744)								return (lineOffset + _hx_char);
            							}
HXLINE( 745)							if ((x <= boundaries->get_right())) {
HXLINE( 747)								if ((x <= (boundaries->x + (boundaries->width / ( (Float)(2) ))))) {
HXLINE( 749)									return (lineOffset + _hx_char);
            								}
            								else {
HXLINE( 753)									if (((lineOffset + _hx_char) < lineEndIndex)) {
HXLINE( 753)										return ((lineOffset + _hx_char) + 1);
            									}
            									else {
HXLINE( 753)										return lineEndIndex;
            									}
            								}
            							}
            						}
            					}
HXLINE( 759)					return lineEndIndex;
            				}
            			}
            		}
HXLINE( 763)		return this->text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,getCharAtPosition,return )

 ::openfl::geom::Rectangle FlxInputText_obj::getCharBoundaries(int _hx_char){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_773_getCharBoundaries)
HXLINE( 786)		 ::openfl::geom::Rectangle boundaries = this->textField->getCharBoundaries(_hx_char);
HXLINE( 787)		if (::hx::IsNull( boundaries )) {
HXLINE( 793)			return null();
            		}
HXLINE( 803)		return boundaries;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,getCharBoundaries,return )

int FlxInputText_obj::getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_811_getCharIndexOnDifferentLine)
HXLINE( 812)		bool _hx_tmp;
HXDLIN( 812)		if ((charIndex >= 0)) {
HXLINE( 812)			_hx_tmp = (charIndex > this->text.length);
            		}
            		else {
HXLINE( 812)			_hx_tmp = true;
            		}
HXDLIN( 812)		if (_hx_tmp) {
HXLINE( 813)			return -1;
            		}
HXLINE( 814)		bool _hx_tmp1;
HXDLIN( 814)		if ((lineIndex >= 0)) {
HXLINE( 814)			_hx_tmp1 = (lineIndex > (this->textField->get_numLines() - 1));
            		}
            		else {
HXLINE( 814)			_hx_tmp1 = true;
            		}
HXDLIN( 814)		if (_hx_tmp1) {
HXLINE( 815)			return -1;
            		}
HXLINE( 817)		Float x = ((Float)0.0);
HXLINE( 818)		 ::openfl::geom::Rectangle charBoundaries = this->getCharBoundaries((charIndex - 1));
HXLINE( 819)		if (::hx::IsNotNull( charBoundaries )) {
HXLINE( 821)			x = charBoundaries->get_right();
            		}
            		else {
HXLINE( 825)			x = ( (Float)(2) );
            		}
HXLINE( 828)		Float y = (2 + this->getLineY(lineIndex));
HXDLIN( 828)		Float y1 = (y + (this->textField->getLineMetrics(lineIndex)->height / ( (Float)(2) )));
HXLINE( 830)		return this->getCharAtPosition(x,y1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,getCharIndexOnDifferentLine,return )

int FlxInputText_obj::getLineIndexOfChar(int _hx_char){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_843_getLineIndexOfChar)
HXDLIN( 843)		if ((_hx_char == this->text.length)) {
HXDLIN( 843)			return (this->textField->get_numLines() - 1);
            		}
            		else {
HXDLIN( 843)			return this->textField->getLineIndexOfChar(_hx_char);
            		}
HXDLIN( 843)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,getLineIndexOfChar,return )

Float FlxInputText_obj::getLineY(int line){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_852_getLineY)
HXLINE( 853)		Float scrollY = ((Float)0.0);
HXLINE( 854)		{
HXLINE( 854)			int _g = 0;
HXDLIN( 854)			int _g1 = line;
HXDLIN( 854)			while((_g < _g1)){
HXLINE( 854)				_g = (_g + 1);
HXDLIN( 854)				int i = (_g - 1);
HXLINE( 856)				scrollY = (scrollY + this->textField->getLineMetrics(i)->height);
            			}
            		}
HXLINE( 858)		return scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,getLineY,return )

 ::lime::math::Rectangle FlxInputText_obj::getLimeBounds( ::flixel::FlxCamera camera){
            	HX_GC_STACKFRAME(&_hx_pos_461edb9762e701d5_867_getLimeBounds)
HXLINE( 868)		if (::hx::IsNull( camera )) {
HXLINE( 869)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 871)		 ::flixel::math::FlxRect rect = this->getScreenBounds(null(),camera);
HXLINE( 874)		Float _hx_tmp = ((rect->x * camera->totalScaleX) - (((((Float)0.5) * ( (Float)(camera->width) )) * (camera->scaleX - camera->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN( 874)		rect->x = (_hx_tmp + ::flixel::FlxG_obj::game->get_x());
HXLINE( 875)		Float _hx_tmp1 = ((rect->y * camera->totalScaleY) - (((((Float)0.5) * ( (Float)(camera->height) )) * (camera->scaleY - camera->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN( 875)		rect->y = (_hx_tmp1 + ::flixel::FlxG_obj::game->get_y());
HXLINE( 876)		 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 876)		rect1->width = (rect1->width * camera->totalScaleX);
HXLINE( 877)		 ::flixel::math::FlxRect rect2 = rect;
HXDLIN( 877)		rect2->height = (rect2->height * camera->totalScaleY);
HXLINE( 890)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,getLimeBounds,return )

Float FlxInputText_obj::getScrollVOffset(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_898_getScrollVOffset)
HXDLIN( 898)		return this->getLineY((this->textField->get_scrollV() - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,getScrollVOffset,return )

bool FlxInputText_obj::isCaretLineVisible(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_905_isCaretLineVisible)
HXLINE( 907)		if ((this->text.length == 0)) {
HXLINE( 908)			return true;
            		}
HXLINE( 910)		int line = this->getLineIndexOfChar(this->_caretIndex);
HXLINE( 911)		if ((line >= (this->textField->get_scrollV() - 1))) {
HXLINE( 911)			return (line <= (this->textField->get_bottomScrollV() - 1));
            		}
            		else {
HXLINE( 911)			return false;
            		}
HXDLIN( 911)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,isCaretLineVisible,return )

void FlxInputText_obj::moveCursor( ::flixel::text::MoveCursorAction type,bool shiftKey){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_921_moveCursor)
HXDLIN( 921)		switch((int)(type->_hx_getIndex())){
            			case (int)0: {
HXLINE( 924)				if ((this->_caretIndex > 0)) {
HXLINE( 926)					this->_caretIndex--;
            				}
HXLINE( 929)				if (!(shiftKey)) {
HXLINE( 931)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE( 933)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE( 934)				this->restartCaretTimer();
            			}
            			break;
            			case (int)1: {
HXLINE( 936)				if ((this->_caretIndex < this->text.length)) {
HXLINE( 938)					this->_caretIndex++;
            				}
HXLINE( 941)				if (!(shiftKey)) {
HXLINE( 943)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE( 945)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE( 946)				this->restartCaretTimer();
            			}
            			break;
            			case (int)2: {
HXLINE( 948)				int lineIndex = this->getLineIndexOfChar(this->_caretIndex);
HXLINE( 949)				if ((lineIndex > 0)) {
HXLINE( 951)					this->_caretIndex = this->getCharIndexOnDifferentLine(this->_caretIndex,(lineIndex - 1));
            				}
HXLINE( 954)				if (!(shiftKey)) {
HXLINE( 956)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE( 958)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE( 959)				this->restartCaretTimer();
            			}
            			break;
            			case (int)3: {
HXLINE( 961)				int lineIndex1 = this->getLineIndexOfChar(this->_caretIndex);
HXLINE( 962)				if ((lineIndex1 < (this->textField->get_numLines() - 1))) {
HXLINE( 964)					this->_caretIndex = this->getCharIndexOnDifferentLine(this->_caretIndex,(lineIndex1 + 1));
            				}
HXLINE( 967)				if (!(shiftKey)) {
HXLINE( 969)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE( 971)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE( 972)				this->restartCaretTimer();
            			}
            			break;
            			case (int)4: {
HXLINE( 974)				this->_caretIndex = 0;
HXLINE( 976)				if (!(shiftKey)) {
HXLINE( 978)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE( 980)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE( 981)				this->restartCaretTimer();
            			}
            			break;
            			case (int)5: {
HXLINE( 983)				this->_caretIndex = this->text.length;
HXLINE( 985)				if (!(shiftKey)) {
HXLINE( 987)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE( 989)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE( 990)				this->restartCaretTimer();
            			}
            			break;
            			case (int)6: {
HXLINE( 992)				 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 992)				this->_caretIndex = _hx_tmp->getLineOffset(this->getLineIndexOfChar(this->_caretIndex));
HXLINE( 994)				if (!(shiftKey)) {
HXLINE( 996)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE( 998)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE( 999)				this->restartCaretTimer();
            			}
            			break;
            			case (int)7: {
HXLINE(1001)				int lineIndex2 = this->getLineIndexOfChar(this->_caretIndex);
HXLINE(1002)				if ((lineIndex2 < (this->textField->get_numLines() - 1))) {
HXLINE(1004)					this->_caretIndex = (this->textField->getLineOffset((lineIndex2 + 1)) - 1);
            				}
            				else {
HXLINE(1008)					this->_caretIndex = this->text.length;
            				}
HXLINE(1011)				if (!(shiftKey)) {
HXLINE(1013)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE(1015)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE(1016)				this->restartCaretTimer();
            			}
            			break;
            			case (int)8: {
HXLINE(1018)				if ((this->_caretIndex > 0)) {
HXLINE(1020)					this->_caretIndex--;
HXLINE(1021)					while(true){
HXLINE(1021)						bool _hx_tmp1;
HXDLIN(1021)						if ((this->_caretIndex > 0)) {
HXLINE(1021)							_hx_tmp1 = ::flixel::text::FlxInputText_obj::DELIMITERS->contains(this->text.charAt(this->_caretIndex));
            						}
            						else {
HXLINE(1021)							_hx_tmp1 = false;
            						}
HXDLIN(1021)						if (!(_hx_tmp1)) {
HXLINE(1021)							goto _hx_goto_31;
            						}
HXLINE(1023)						this->_caretIndex--;
            					}
            					_hx_goto_31:;
HXLINE(1025)					while(true){
HXLINE(1025)						bool _hx_tmp2;
HXDLIN(1025)						if ((this->_caretIndex > 0)) {
HXLINE(1025)							_hx_tmp2 = !(::flixel::text::FlxInputText_obj::DELIMITERS->contains(this->text.charAt((this->_caretIndex - 1))));
            						}
            						else {
HXLINE(1025)							_hx_tmp2 = false;
            						}
HXDLIN(1025)						if (!(_hx_tmp2)) {
HXLINE(1025)							goto _hx_goto_32;
            						}
HXLINE(1027)						this->_caretIndex--;
            					}
            					_hx_goto_32:;
            				}
HXLINE(1031)				if (!(shiftKey)) {
HXLINE(1033)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE(1035)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE(1036)				this->restartCaretTimer();
            			}
            			break;
            			case (int)9: {
HXLINE(1038)				while(true){
HXLINE(1038)					bool _hx_tmp3;
HXDLIN(1038)					if ((this->_caretIndex < this->text.length)) {
HXLINE(1038)						_hx_tmp3 = !(::flixel::text::FlxInputText_obj::DELIMITERS->contains(this->text.charAt(this->_caretIndex)));
            					}
            					else {
HXLINE(1038)						_hx_tmp3 = false;
            					}
HXDLIN(1038)					if (!(_hx_tmp3)) {
HXLINE(1038)						goto _hx_goto_33;
            					}
HXLINE(1040)					this->_caretIndex++;
            				}
            				_hx_goto_33:;
HXLINE(1042)				while(true){
HXLINE(1042)					bool _hx_tmp4;
HXDLIN(1042)					if ((this->_caretIndex < this->text.length)) {
HXLINE(1042)						_hx_tmp4 = ::flixel::text::FlxInputText_obj::DELIMITERS->contains(this->text.charAt(this->_caretIndex));
            					}
            					else {
HXLINE(1042)						_hx_tmp4 = false;
            					}
HXDLIN(1042)					if (!(_hx_tmp4)) {
HXLINE(1042)						goto _hx_goto_34;
            					}
HXLINE(1044)					this->_caretIndex++;
            				}
            				_hx_goto_34:;
HXLINE(1047)				if (!(shiftKey)) {
HXLINE(1049)					this->_selectionIndex = this->_caretIndex;
            				}
HXLINE(1051)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE(1052)				this->restartCaretTimer();
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,moveCursor,(void))

void FlxInputText_obj::regenBackground(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1060_regenBackground)
HXLINE(1061)		if (!(this->background)) {
HXLINE(1062)			return;
            		}
HXLINE(1064)		this->_regenBackground = false;
HXLINE(1066)		if ((this->fieldBorderThickness > 0)) {
HXLINE(1068)			 ::flixel::FlxSprite _hx_tmp = this->_fieldBorderSprite;
HXDLIN(1068)			int _hx_tmp1 = ::Std_obj::_hx_int(this->get_fieldWidth());
HXDLIN(1068)			int _hx_tmp2 = (_hx_tmp1 + (this->fieldBorderThickness * 2));
HXDLIN(1068)			int _hx_tmp3 = ::Std_obj::_hx_int(this->get_fieldHeight());
HXDLIN(1068)			_hx_tmp->makeGraphic(_hx_tmp2,(_hx_tmp3 + (this->fieldBorderThickness * 2)),this->fieldBorderColor,null(),null());
HXLINE(1070)			this->_fieldBorderSprite->set_visible(true);
            		}
            		else {
HXLINE(1074)			this->_fieldBorderSprite->set_visible(false);
            		}
HXLINE(1077)		if ((((this->backgroundColor >> 24) & 255) > 0)) {
HXLINE(1079)			 ::flixel::FlxSprite _hx_tmp4 = this->_backgroundSprite;
HXDLIN(1079)			int _hx_tmp5 = ::Std_obj::_hx_int(this->get_fieldWidth());
HXDLIN(1079)			int _hx_tmp6 = ::Std_obj::_hx_int(this->get_fieldHeight());
HXDLIN(1079)			_hx_tmp4->makeGraphic(_hx_tmp5,_hx_tmp6,this->backgroundColor,null(),null());
HXLINE(1080)			this->_backgroundSprite->set_visible(true);
            		}
            		else {
HXLINE(1084)			this->_backgroundSprite->set_visible(false);
            		}
HXLINE(1087)		this->updateBackgroundPosition();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,regenBackground,(void))

void FlxInputText_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1095_replaceText)
HXLINE(1096)		bool _hx_tmp;
HXDLIN(1096)		bool _hx_tmp1;
HXDLIN(1096)		bool _hx_tmp2;
HXDLIN(1096)		if ((endIndex >= beginIndex)) {
HXLINE(1096)			_hx_tmp2 = (beginIndex < 0);
            		}
            		else {
HXLINE(1096)			_hx_tmp2 = true;
            		}
HXDLIN(1096)		if (!(_hx_tmp2)) {
HXLINE(1096)			_hx_tmp1 = (endIndex > this->text.length);
            		}
            		else {
HXLINE(1096)			_hx_tmp1 = true;
            		}
HXDLIN(1096)		if (!(_hx_tmp1)) {
HXLINE(1096)			_hx_tmp = ::hx::IsNull( newText );
            		}
            		else {
HXLINE(1096)			_hx_tmp = true;
            		}
HXDLIN(1096)		if (_hx_tmp) {
HXLINE(1097)			return;
            		}
HXLINE(1099)		::String _hx_tmp3 = (this->text.substring(0,beginIndex) + newText);
HXDLIN(1099)		this->set_text((_hx_tmp3 + this->text.substring(endIndex,null())));
HXLINE(1101)		this->_selectionIndex = (this->_caretIndex = (beginIndex + newText.length));
HXLINE(1102)		this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE(1103)		this->restartCaretTimer();
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxInputText_obj,replaceText,(void))

void FlxInputText_obj::runCommand( ::flixel::text::TypingCommand cmd){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1111_runCommand)
HXDLIN(1111)		switch((int)(cmd->_hx_getIndex())){
            			case (int)0: {
HXLINE(1114)				bool _hx_tmp;
HXDLIN(1114)				if (this->editable) {
HXLINE(1114)					_hx_tmp = this->textField->get_multiline();
            				}
            				else {
HXLINE(1114)					_hx_tmp = false;
            				}
HXDLIN(1114)				if (_hx_tmp) {
HXLINE(1116)					this->addText(HX_("\n",0a,00,00,00));
            				}
            				else {
HXLINE(1120)					this->restartCaretTimer();
            				}
HXLINE(1122)				this->onEnter->dispatch(this->text);
            			}
            			break;
            			case (int)1: {
HXLINE(1124)				if (!(this->editable)) {
HXLINE(1125)					return;
            				}
HXLINE(1127)				bool _hx_tmp1;
HXDLIN(1127)				if ((this->_selectionIndex == this->_caretIndex)) {
HXLINE(1127)					_hx_tmp1 = (this->_caretIndex > 0);
            				}
            				else {
HXLINE(1127)					_hx_tmp1 = false;
            				}
HXDLIN(1127)				if (_hx_tmp1) {
HXLINE(1129)					this->_selectionIndex = (this->_caretIndex - 1);
            				}
HXLINE(1132)				if ((this->_selectionIndex != this->_caretIndex)) {
HXLINE(1134)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(1135)					this->_selectionIndex = this->_caretIndex;
HXLINE(1136)					this->onTextChange->dispatch(this->text,HX_("backspace",3f,85,ea,ca));
            				}
            				else {
HXLINE(1140)					this->restartCaretTimer();
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(1143)				if (!(this->editable)) {
HXLINE(1144)					return;
            				}
HXLINE(1146)				bool _hx_tmp2;
HXDLIN(1146)				if ((this->_selectionIndex == this->_caretIndex)) {
HXLINE(1146)					_hx_tmp2 = (this->_caretIndex < this->text.length);
            				}
            				else {
HXLINE(1146)					_hx_tmp2 = false;
            				}
HXDLIN(1146)				if (_hx_tmp2) {
HXLINE(1148)					this->_selectionIndex = (this->_caretIndex + 1);
            				}
HXLINE(1151)				if ((this->_selectionIndex != this->_caretIndex)) {
HXLINE(1153)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(1154)					this->_selectionIndex = this->_caretIndex;
HXLINE(1155)					this->onTextChange->dispatch(this->text,HX_("delete",2b,c0,d8,6a));
            				}
            				else {
HXLINE(1159)					this->restartCaretTimer();
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(1162)				bool _hx_tmp3;
HXDLIN(1162)				if ((this->_caretIndex != this->_selectionIndex)) {
HXLINE(1162)					_hx_tmp3 = !(this->textField->get_displayAsPassword());
            				}
            				else {
HXLINE(1162)					_hx_tmp3 = false;
            				}
HXDLIN(1162)				if (_hx_tmp3) {
HXLINE(1164)					::lime::_hx_system::Clipboard_obj::set_text(this->text.substring(this->_caretIndex,this->_selectionIndex));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE(1167)				bool _hx_tmp4;
HXDLIN(1167)				bool _hx_tmp5;
HXDLIN(1167)				if (this->editable) {
HXLINE(1167)					_hx_tmp5 = (this->_caretIndex != this->_selectionIndex);
            				}
            				else {
HXLINE(1167)					_hx_tmp5 = false;
            				}
HXDLIN(1167)				if (_hx_tmp5) {
HXLINE(1167)					_hx_tmp4 = !(this->textField->get_displayAsPassword());
            				}
            				else {
HXLINE(1167)					_hx_tmp4 = false;
            				}
HXDLIN(1167)				if (_hx_tmp4) {
HXLINE(1169)					::lime::_hx_system::Clipboard_obj::set_text(this->text.substring(this->_caretIndex,this->_selectionIndex));
HXLINE(1171)					this->replaceSelectedText(HX_("",00,00,00,00));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE(1174)				bool _hx_tmp6;
HXDLIN(1174)				if (this->editable) {
HXLINE(1174)					_hx_tmp6 = ::hx::IsNotNull( ::lime::_hx_system::Clipboard_obj::get_text() );
            				}
            				else {
HXLINE(1174)					_hx_tmp6 = false;
            				}
HXDLIN(1174)				if (_hx_tmp6) {
HXLINE(1176)					this->addText(::lime::_hx_system::Clipboard_obj::get_text());
            				}
            			}
            			break;
            			case (int)6: {
HXLINE(1179)				this->_selectionIndex = 0;
HXLINE(1180)				this->_caretIndex = this->text.length;
HXLINE(1181)				this->setSelection(this->_selectionIndex,this->_caretIndex);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,runCommand,(void))

void FlxInputText_obj::restartCaretTimer(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1192_restartCaretTimer)
HXDLIN(1192)		this->_caretTimer = ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,restartCaretTimer,(void))

void FlxInputText_obj::updateBackgroundPosition(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1199_updateBackgroundPosition)
HXLINE(1200)		if (!(this->background)) {
HXLINE(1201)			return;
            		}
HXLINE(1203)		this->_fieldBorderSprite->setPosition((this->x - ( (Float)(this->fieldBorderThickness) )),(this->y - ( (Float)(this->fieldBorderThickness) )));
HXLINE(1204)		this->_backgroundSprite->setPosition(this->x,this->y);
HXLINE(1205)		this->clipSprite(this->_fieldBorderSprite,true);
HXLINE(1206)		this->clipSprite(this->_backgroundSprite,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,updateBackgroundPosition,(void))

void FlxInputText_obj::updateCaretPosition(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1213_updateCaretPosition)
HXLINE(1214)		bool _hx_tmp;
HXDLIN(1214)		if (::hx::IsNotNull( this->textField )) {
HXLINE(1214)			_hx_tmp = ::hx::IsNull( this->_caret );
            		}
            		else {
HXLINE(1214)			_hx_tmp = true;
            		}
HXDLIN(1214)		if (_hx_tmp) {
HXLINE(1215)			return;
            		}
HXLINE(1217)		if ((this->text.length == 0)) {
HXLINE(1219)			 ::flixel::FlxSprite _hx_tmp1 = this->_caret;
HXDLIN(1219)			Float _hx_tmp2 = this->x;
HXDLIN(1219)			Float _hx_tmp3 = (_hx_tmp2 + this->getCaretOffsetX());
HXDLIN(1219)			_hx_tmp1->setPosition(_hx_tmp3,(this->y + 2));
            		}
            		else {
HXLINE(1223)			 ::openfl::geom::Rectangle boundaries = this->getCharBoundaries((this->_caretIndex - 1));
HXLINE(1224)			if (::hx::IsNotNull( boundaries )) {
HXLINE(1226)				 ::flixel::FlxSprite _hx_tmp4 = this->_caret;
HXDLIN(1226)				Float _hx_tmp5 = this->x;
HXDLIN(1226)				Float _hx_tmp6 = (_hx_tmp5 + boundaries->get_right());
HXDLIN(1226)				Float _hx_tmp7 = (_hx_tmp6 - ( (Float)(this->textField->get_scrollH()) ));
HXDLIN(1226)				Float _hx_tmp8 = (this->y + boundaries->y);
HXDLIN(1226)				_hx_tmp4->setPosition(_hx_tmp7,(_hx_tmp8 - this->getScrollVOffset()));
            			}
            			else {
HXLINE(1230)				boundaries = this->getCharBoundaries(this->_caretIndex);
HXLINE(1231)				if (::hx::IsNotNull( boundaries )) {
HXLINE(1233)					 ::flixel::FlxSprite _hx_tmp9 = this->_caret;
HXDLIN(1233)					Float _hx_tmp10 = (this->x + boundaries->x);
HXDLIN(1233)					Float _hx_tmp11 = (_hx_tmp10 - ( (Float)(this->textField->get_scrollH()) ));
HXDLIN(1233)					Float _hx_tmp12 = (this->y + boundaries->y);
HXDLIN(1233)					_hx_tmp9->setPosition(_hx_tmp11,(_hx_tmp12 - this->getScrollVOffset()));
            				}
            				else {
HXLINE(1237)					 ::flixel::FlxSprite _hx_tmp13 = this->_caret;
HXDLIN(1237)					Float _hx_tmp14 = this->x;
HXDLIN(1237)					Float _hx_tmp15 = (_hx_tmp14 + this->getCaretOffsetX());
HXDLIN(1237)					Float _hx_tmp16 = (this->y + 2);
HXDLIN(1237)					Float _hx_tmp17 = (_hx_tmp16 + this->getLineY(this->getLineIndexOfChar(this->_caretIndex)));
HXDLIN(1237)					_hx_tmp13->setPosition(_hx_tmp15,(_hx_tmp17 - this->getScrollVOffset()));
            				}
            			}
            		}
HXLINE(1242)		this->clipSprite(this->_caret,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,updateCaretPosition,(void))

void FlxInputText_obj::updateCaretSize(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1249_updateCaretSize)
HXLINE(1250)		if (::hx::IsNull( this->_caret )) {
HXLINE(1251)			return;
            		}
HXLINE(1252)		this->_regenCaretSize = false;
HXLINE(1254)		Float lineHeight = (this->get_height() - ( (Float)(4) ));
HXLINE(1255)		if ((this->text.length > 0)) {
HXLINE(1257)			lineHeight = this->textField->getLineMetrics(0)->height;
            		}
HXLINE(1260)		 ::flixel::FlxSprite _hx_tmp = this->_caret;
HXDLIN(1260)		int _hx_tmp1 = this->caretWidth;
HXDLIN(1260)		_hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int(lineHeight),null(),null(),null());
HXLINE(1261)		this->clipSprite(this->_caret,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,updateCaretSize,(void))

void FlxInputText_obj::updateSelection(::hx::Null< bool >  __o_keepScroll){
            		bool keepScroll = __o_keepScroll.Default(false);
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1324_updateSelection)
HXLINE(1325)		int cacheScrollH = this->textField->get_scrollH();
HXLINE(1326)		int cacheScrollV = this->textField->get_scrollV();
HXLINE(1328)		this->textField->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE(1329)		this->_regen = true;
HXLINE(1331)		if (keepScroll) {
HXLINE(1333)			this->set_scrollH(cacheScrollH);
HXLINE(1334)			this->set_scrollV(cacheScrollV);
            		}
            		else {
HXLINE(1343)			bool _hx_tmp;
HXDLIN(1343)			if ((this->textField->get_scrollH() == cacheScrollH)) {
HXLINE(1343)				_hx_tmp = (this->textField->get_scrollV() != cacheScrollV);
            			}
            			else {
HXLINE(1343)				_hx_tmp = true;
            			}
HXDLIN(1343)			if (_hx_tmp) {
HXLINE(1345)				 ::Dynamic _hx_tmp1 = this->onScrollChange->dispatch;
HXDLIN(1345)				int _hx_tmp2 = this->textField->get_scrollH();
HXDLIN(1345)				_hx_tmp1(_hx_tmp2,this->textField->get_scrollV());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,updateSelection,(void))

void FlxInputText_obj::updateSelectionBoxes(){
            	HX_GC_STACKFRAME(&_hx_pos_461edb9762e701d5_1354_updateSelectionBoxes)
HXLINE(1355)		bool _hx_tmp;
HXDLIN(1355)		if (::hx::IsNotNull( this->textField )) {
HXLINE(1355)			_hx_tmp = ::hx::IsNull( this->_selectionBoxes );
            		}
            		else {
HXLINE(1355)			_hx_tmp = true;
            		}
HXDLIN(1355)		if (_hx_tmp) {
HXLINE(1356)			return;
            		}
HXLINE(1358)		int visibleLines = this->textField->get_bottomScrollV();
HXDLIN(1358)		int visibleLines1 = ((visibleLines - this->textField->get_scrollV()) + 1);
HXLINE(1359)		while((this->_selectionBoxes->length > visibleLines1)){
HXLINE(1361)			 ::flixel::FlxSprite box = this->_selectionBoxes->pop().StaticCast<  ::flixel::FlxSprite >();
HXLINE(1362)			if (::hx::IsNotNull( box )) {
HXLINE(1363)				box->destroy();
            			}
            		}
HXLINE(1366)		if ((this->_caretIndex == this->_selectionIndex)) {
HXLINE(1368)			{
HXLINE(1368)				int _g = 0;
HXDLIN(1368)				::Array< ::Dynamic> _g1 = this->_selectionBoxes;
HXDLIN(1368)				while((_g < _g1->length)){
HXLINE(1368)					 ::flixel::FlxSprite box1 = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1368)					_g = (_g + 1);
HXLINE(1370)					if (::hx::IsNotNull( box1 )) {
HXLINE(1371)						box1->set_visible(false);
            					}
            				}
            			}
HXLINE(1374)			return;
            		}
HXLINE(1377)		int beginLine = this->getLineIndexOfChar(this->get_selectionBeginIndex());
HXLINE(1378)		int endLine = this->getLineIndexOfChar(this->get_selectionEndIndex());
HXLINE(1380)		int beginV = (this->textField->get_scrollV() - 1);
HXLINE(1381)		Float scrollVOffset = this->getScrollVOffset();
HXLINE(1383)		{
HXLINE(1383)			int _g2 = beginV;
HXDLIN(1383)			int _g3 = this->textField->get_bottomScrollV();
HXDLIN(1383)			while((_g2 < _g3)){
HXLINE(1383)				_g2 = (_g2 + 1);
HXDLIN(1383)				int line = (_g2 - 1);
HXLINE(1385)				int i = (line - beginV);
HXLINE(1386)				 ::flixel::FlxSprite box2 = this->_selectionBoxes->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1387)				bool _hx_tmp1;
HXDLIN(1387)				if ((line >= beginLine)) {
HXLINE(1387)					_hx_tmp1 = (line <= endLine);
            				}
            				else {
HXLINE(1387)					_hx_tmp1 = false;
            				}
HXDLIN(1387)				if (_hx_tmp1) {
HXLINE(1389)					int lineStartIndex = this->textField->getLineOffset(line);
HXLINE(1390)					int lineEndIndex = (lineStartIndex + this->textField->getLineLength(line));
HXLINE(1392)					int b = this->get_selectionBeginIndex();
HXDLIN(1392)					int startIndex;
HXDLIN(1392)					if ((lineStartIndex > b)) {
HXLINE(1392)						startIndex = lineStartIndex;
            					}
            					else {
HXLINE(1392)						startIndex = b;
            					}
HXLINE(1393)					int b1 = this->get_selectionEndIndex();
HXDLIN(1393)					int endIndex;
HXDLIN(1393)					if ((lineEndIndex > b1)) {
HXLINE(1393)						endIndex = b1;
            					}
            					else {
HXLINE(1393)						endIndex = lineEndIndex;
            					}
HXLINE(1395)					 ::openfl::geom::Rectangle startBoundaries = this->getCharBoundaries(startIndex);
HXLINE(1396)					 ::openfl::geom::Rectangle endBoundaries = this->getCharBoundaries((endIndex - 1));
HXLINE(1397)					bool _hx_tmp2;
HXDLIN(1397)					if (::hx::IsNull( endBoundaries )) {
HXLINE(1397)						_hx_tmp2 = (endIndex > startIndex);
            					}
            					else {
HXLINE(1397)						_hx_tmp2 = false;
            					}
HXDLIN(1397)					if (_hx_tmp2) {
HXLINE(1399)						endBoundaries = this->getCharBoundaries((endIndex - 2));
            					}
HXLINE(1405)					bool _hx_tmp3;
HXDLIN(1405)					bool _hx_tmp4;
HXDLIN(1405)					if (::hx::IsNotNull( startBoundaries )) {
HXLINE(1405)						_hx_tmp4 = ::hx::IsNotNull( endBoundaries );
            					}
            					else {
HXLINE(1405)						_hx_tmp4 = false;
            					}
HXDLIN(1405)					if (_hx_tmp4) {
HXLINE(1405)						_hx_tmp3 = (::Math_obj::abs((startBoundaries->y - endBoundaries->y)) <= ((Float)0.0000001));
            					}
            					else {
HXLINE(1405)						_hx_tmp3 = false;
            					}
HXDLIN(1405)					if (_hx_tmp3) {
HXLINE(1407)						if (::hx::IsNull( box2 )) {
HXLINE(1409)							box2 = (this->_selectionBoxes[i] =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null()));
HXLINE(1410)							box2->set_color(this->selectionColor);
            						}
HXLINE(1413)						Float startBoundaries1 = startBoundaries->x;
HXDLIN(1413)						Float X = (startBoundaries1 - ( (Float)(this->textField->get_scrollH()) ));
HXDLIN(1413)						Float Y = (startBoundaries->y - scrollVOffset);
HXLINE(1414)						Float Width = endBoundaries->get_right();
HXLINE(1413)						Float Width1 = (Width - startBoundaries->x);
HXDLIN(1413)						Float Height = startBoundaries->height;
HXDLIN(1413)						 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1413)						_this->x = X;
HXDLIN(1413)						_this->y = Y;
HXDLIN(1413)						_this->width = Width1;
HXDLIN(1413)						_this->height = Height;
HXDLIN(1413)						 ::flixel::math::FlxRect rect = _this;
HXDLIN(1413)						rect->_inPool = false;
HXDLIN(1413)						 ::flixel::math::FlxRect boxRect = rect;
HXLINE(1416)						Float Width2 = this->get_width();
HXDLIN(1416)						Float Height1 = this->get_height();
HXDLIN(1416)						 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1416)						_this1->x = ( (Float)(0) );
HXDLIN(1416)						_this1->y = ( (Float)(0) );
HXDLIN(1416)						_this1->width = Width2;
HXDLIN(1416)						_this1->height = Height1;
HXDLIN(1416)						 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN(1416)						rect1->_inPool = false;
HXDLIN(1416)						 ::flixel::math::FlxRect rect2 = rect1;
HXDLIN(1416)						rect2->_weak = true;
HXDLIN(1416)						boxRect->clipTo(rect2);
HXLINE(1418)						box2->setPosition((this->x + boxRect->x),(this->y + boxRect->y));
HXLINE(1419)						int _hx_tmp5 = ::Std_obj::_hx_int(boxRect->width);
HXDLIN(1419)						box2->makeGraphic(_hx_tmp5,::Std_obj::_hx_int(boxRect->height),null(),null(),null());
HXLINE(1420)						this->clipSprite(box2,null());
HXLINE(1421)						box2->set_visible(true);
HXLINE(1423)						if (!(boxRect->_inPool)) {
HXLINE(1423)							boxRect->_inPool = true;
HXDLIN(1423)							boxRect->_weak = false;
HXDLIN(1423)							::flixel::math::FlxRect_obj::_pool->putUnsafe(boxRect);
            						}
            					}
            					else {
HXLINE(1425)						if (::hx::IsNotNull( box2 )) {
HXLINE(1427)							box2->set_visible(false);
            						}
            					}
            				}
            				else {
HXLINE(1430)					if (::hx::IsNotNull( box2 )) {
HXLINE(1432)						box2->set_visible(false);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,updateSelectionBoxes,(void))

void FlxInputText_obj::updateSelectionSprites(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1441_updateSelectionSprites)
HXLINE(1442)		this->updateCaretPosition();
HXLINE(1443)		this->updateSelectionBoxes();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,updateSelectionSprites,(void))

void FlxInputText_obj::updateSpritePositions(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1450_updateSpritePositions)
HXLINE(1451)		this->updateBackgroundPosition();
HXLINE(1452)		this->updateCaretPosition();
HXLINE(1453)		this->updateSelectionBoxes();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,updateSpritePositions,(void))

bool FlxInputText_obj::updateMouseInput(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1462_updateMouseInput)
HXLINE(1463)		bool overlap = false;
HXLINE(1465)		if (this->_mouseDown) {
HXLINE(1467)			this->updatePointerDrag(::flixel::FlxG_obj::mouse,elapsed);
HXLINE(1469)			 ::flixel::input::mouse::FlxMouse _this = ::flixel::FlxG_obj::mouse;
HXDLIN(1469)			bool _hx_tmp;
HXDLIN(1469)			if ((_this->_prevX == _this->x)) {
HXLINE(1469)				_hx_tmp = (_this->_prevY != _this->y);
            			}
            			else {
HXLINE(1469)				_hx_tmp = true;
            			}
HXDLIN(1469)			if (_hx_tmp) {
HXLINE(1471)				this->updatePointerMove(::flixel::FlxG_obj::mouse);
            			}
HXLINE(1474)			 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(1474)			bool _hx_tmp1;
HXDLIN(1474)			if ((_this1->current != 0)) {
HXLINE(1474)				_hx_tmp1 = (_this1->current == -1);
            			}
            			else {
HXLINE(1474)				_hx_tmp1 = true;
            			}
HXDLIN(1474)			if (_hx_tmp1) {
HXLINE(1476)				this->updatePointerRelease(::flixel::FlxG_obj::mouse);
HXLINE(1477)				this->_mouseDown = false;
            			}
            		}
            		else {
HXLINE(1480)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE(1482)				this->_lastPressTime = 0;
            			}
            		}
HXLINE(1485)		if (this->checkPointerOverlap(::flixel::FlxG_obj::mouse)) {
HXLINE(1487)			overlap = true;
HXLINE(1488)			bool _hx_tmp2;
HXDLIN(1488)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1488)				_hx_tmp2 = this->selectable;
            			}
            			else {
HXLINE(1488)				_hx_tmp2 = false;
            			}
HXDLIN(1488)			if (_hx_tmp2) {
HXLINE(1490)				this->_mouseDown = true;
HXLINE(1491)				this->updatePointerPress(::flixel::FlxG_obj::mouse);
            			}
HXLINE(1493)			bool _hx_tmp3;
HXDLIN(1493)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE(1493)				_hx_tmp3 = this->mouseWheelEnabled;
            			}
            			else {
HXLINE(1493)				_hx_tmp3 = false;
            			}
HXDLIN(1493)			if (_hx_tmp3) {
HXLINE(1495)				int cacheScrollV = this->textField->get_scrollV();
HXLINE(1496)				int a = this->textField->get_scrollV();
HXDLIN(1496)				int a1 = (a - ::flixel::FlxG_obj::mouse->wheel);
HXDLIN(1496)				int b = this->textField->get_maxScrollV();
HXDLIN(1496)				int _hx_tmp4;
HXDLIN(1496)				if ((a1 > b)) {
HXLINE(1496)					_hx_tmp4 = b;
            				}
            				else {
HXLINE(1496)					_hx_tmp4 = a1;
            				}
HXDLIN(1496)				this->set_scrollV(_hx_tmp4);
HXLINE(1497)				if ((this->textField->get_scrollV() != cacheScrollV)) {
HXLINE(1499)					 ::Dynamic _hx_tmp5 = this->onScrollChange->dispatch;
HXDLIN(1499)					int _hx_tmp6 = this->textField->get_scrollH();
HXDLIN(1499)					_hx_tmp5(_hx_tmp6,this->textField->get_scrollV());
            				}
            			}
            		}
            		else {
HXLINE(1503)			bool _hx_tmp7;
HXDLIN(1503)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1503)				_hx_tmp7 = !(this->_justGainedFocus);
            			}
            			else {
HXLINE(1503)				_hx_tmp7 = false;
            			}
HXDLIN(1503)			if (_hx_tmp7) {
HXLINE(1505)				this->endFocus();
            			}
            		}
HXLINE(1508)		return overlap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,updateMouseInput,return )

bool FlxInputText_obj::updateTouchInput(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1516_updateTouchInput)
HXLINE(1517)		bool overlap = false;
HXLINE(1564)		return overlap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,updateTouchInput,return )

bool FlxInputText_obj::checkPointerOverlap( ::flixel::input::FlxPointer pointer){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1572_checkPointerOverlap)
HXLINE(1573)		bool overlap = false;
HXLINE(1574)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1574)		point->_inPool = false;
HXDLIN(1574)		 ::flixel::math::FlxBasePoint pointerPos = point;
HXLINE(1575)		{
HXLINE(1575)			int _g = 0;
HXDLIN(1575)			::Array< ::Dynamic> _g1 = this->getCameras();
HXDLIN(1575)			while((_g < _g1->length)){
HXLINE(1575)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(1575)				_g = (_g + 1);
HXLINE(1577)				pointer->getWorldPosition(camera,pointerPos);
HXLINE(1578)				if (this->overlapsPoint(pointerPos,true,camera)) {
HXLINE(1580)					if (::hx::IsNull( this->_pointerCamera )) {
HXLINE(1581)						this->_pointerCamera = camera;
            					}
HXLINE(1582)					overlap = true;
HXLINE(1583)					goto _hx_goto_52;
            				}
            			}
            			_hx_goto_52:;
            		}
HXLINE(1587)		pointerPos->put();
HXLINE(1588)		return overlap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,checkPointerOverlap,return )

void FlxInputText_obj::updatePointerPress( ::flixel::input::FlxPointer pointer){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1595_updatePointerPress)
HXLINE(1596)		this->startFocus();
HXLINE(1598)		 ::flixel::math::FlxBasePoint relativePos = this->getRelativePosition(pointer);
HXLINE(1599)		Float relativePos1 = relativePos->x;
HXDLIN(1599)		Float _hx_tmp = (relativePos1 + this->textField->get_scrollH());
HXDLIN(1599)		Float relativePos2 = relativePos->y;
HXDLIN(1599)		this->_caretIndex = this->getCharAtPosition(_hx_tmp,(relativePos2 + this->getScrollVOffset()));
HXLINE(1600)		this->_selectionIndex = this->_caretIndex;
HXLINE(1601)		this->updateSelection(true);
HXLINE(1602)		this->restartCaretTimer();
HXLINE(1604)		relativePos->put();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,updatePointerPress,(void))

void FlxInputText_obj::updatePointerDrag( ::flixel::input::FlxPointer pointer,Float elapsed){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1611_updatePointerDrag)
HXLINE(1612)		 ::flixel::math::FlxBasePoint relativePos = this->getRelativePosition(pointer);
HXLINE(1613)		int cacheScrollH = this->textField->get_scrollH();
HXLINE(1614)		int cacheScrollV = this->textField->get_scrollV();
HXLINE(1616)		Float relativePos1 = relativePos->x;
HXDLIN(1616)		if ((relativePos1 > (this->get_width() - ( (Float)(1) )))) {
HXLINE(1618)			int _hx_tmp = this->textField->get_scrollH();
HXDLIN(1618)			Float relativePos2 = relativePos->x;
HXDLIN(1618)			this->set_scrollH((_hx_tmp + ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min(((relativePos2 - this->get_width()) * ((Float).1)),( (Float)(10) )),( (Float)(1) )))));
            		}
            		else {
HXLINE(1620)			if ((relativePos->x < 1)) {
HXLINE(1622)				int _hx_tmp1 = this->textField->get_scrollH();
HXDLIN(1622)				this->set_scrollH((_hx_tmp1 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((relativePos->x * ((Float)-.1)),( (Float)(10) )),( (Float)(1) )))));
            			}
            		}
HXLINE(1625)		 ::flixel::text::FlxInputText _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1625)		_hx_tmp2->_scrollVCounter = (_hx_tmp2->_scrollVCounter + elapsed);
HXLINE(1627)		if ((this->_scrollVCounter > ((Float)0.1))) {
HXLINE(1629)			Float relativePos3 = relativePos->y;
HXDLIN(1629)			if ((relativePos3 > (this->get_height() - ( (Float)(2) )))) {
HXLINE(1631)				int _hx_tmp3 = this->textField->get_scrollV();
HXDLIN(1631)				Float relativePos4 = relativePos->y;
HXDLIN(1631)				Float _hx_tmp4 = (_hx_tmp3 + ::Math_obj::max(::Math_obj::min(((relativePos4 - this->get_height()) * ((Float).03)),( (Float)(5) )),( (Float)(1) )));
HXDLIN(1631)				this->set_scrollV(::Std_obj::_hx_int(::Math_obj::min(_hx_tmp4,( (Float)(this->textField->get_maxScrollV()) ))));
            			}
            			else {
HXLINE(1633)				if ((relativePos->y < 2)) {
HXLINE(1635)					int _hx_tmp5 = this->textField->get_scrollV();
HXDLIN(1635)					this->set_scrollV((_hx_tmp5 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((relativePos->y * ((Float)-.03)),( (Float)(5) )),( (Float)(1) )))));
            				}
            			}
HXLINE(1637)			this->_scrollVCounter = ( (Float)(0) );
            		}
HXLINE(1640)		bool _hx_tmp6;
HXDLIN(1640)		if ((this->textField->get_scrollH() == cacheScrollH)) {
HXLINE(1640)			_hx_tmp6 = (this->textField->get_scrollV() != cacheScrollV);
            		}
            		else {
HXLINE(1640)			_hx_tmp6 = true;
            		}
HXDLIN(1640)		if (_hx_tmp6) {
HXLINE(1642)			 ::Dynamic _hx_tmp7 = this->onScrollChange->dispatch;
HXDLIN(1642)			int _hx_tmp8 = this->textField->get_scrollH();
HXDLIN(1642)			_hx_tmp7(_hx_tmp8,this->textField->get_scrollV());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,updatePointerDrag,(void))

void FlxInputText_obj::updatePointerMove( ::flixel::input::FlxPointer pointer){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1650_updatePointerMove)
HXLINE(1651)		if ((this->_selectionIndex < 0)) {
HXLINE(1652)			return;
            		}
HXLINE(1654)		 ::flixel::math::FlxBasePoint relativePos = this->getRelativePosition(pointer);
HXLINE(1656)		Float relativePos1 = relativePos->x;
HXDLIN(1656)		Float _hx_char = (relativePos1 + this->textField->get_scrollH());
HXDLIN(1656)		Float relativePos2 = relativePos->y;
HXDLIN(1656)		int char1 = this->getCharAtPosition(_hx_char,(relativePos2 + this->getScrollVOffset()));
HXLINE(1657)		if ((char1 != this->_caretIndex)) {
HXLINE(1659)			this->_caretIndex = char1;
HXLINE(1660)			this->updateSelection(true);
HXLINE(1661)			this->restartCaretTimer();
            		}
HXLINE(1664)		relativePos->put();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,updatePointerMove,(void))

void FlxInputText_obj::updatePointerRelease( ::flixel::input::FlxPointer pointer){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1671_updatePointerRelease)
HXLINE(1672)		if (!(this->hasFocus)) {
HXLINE(1673)			return;
            		}
HXLINE(1676)		if (this->hasFocus) {
HXLINE(1678)			this->restartCaretTimer();
            		}
HXLINE(1681)		this->_pointerCamera = null();
HXLINE(1682)		int currentTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1683)		if (((currentTime - this->_lastPressTime) < 500)) {
HXLINE(1685)			this->updatePointerDoublePress(pointer);
HXLINE(1686)			this->_lastPressTime = 0;
            		}
            		else {
HXLINE(1690)			this->_lastPressTime = currentTime;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,updatePointerRelease,(void))

void FlxInputText_obj::updatePointerDoublePress( ::flixel::input::FlxPointer pointer){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1698_updatePointerDoublePress)
HXLINE(1699)		int rightPos = this->text.length;
HXLINE(1700)		bool _hx_tmp;
HXDLIN(1700)		bool _hx_tmp1;
HXDLIN(1700)		if ((this->text.length > 0)) {
HXLINE(1700)			_hx_tmp1 = (this->_caretIndex >= 0);
            		}
            		else {
HXLINE(1700)			_hx_tmp1 = false;
            		}
HXDLIN(1700)		if (_hx_tmp1) {
HXLINE(1700)			_hx_tmp = (rightPos >= this->_caretIndex);
            		}
            		else {
HXLINE(1700)			_hx_tmp = false;
            		}
HXDLIN(1700)		if (_hx_tmp) {
HXLINE(1702)			int leftPos = -1;
HXLINE(1703)			int a = this->_caretIndex;
HXDLIN(1703)			int startPos;
HXDLIN(1703)			if ((a > 1)) {
HXLINE(1703)				startPos = a;
            			}
            			else {
HXLINE(1703)				startPos = 1;
            			}
HXLINE(1705)			{
HXLINE(1705)				int _g = 0;
HXDLIN(1705)				::Array< ::String > _g1 = ::flixel::text::FlxInputText_obj::DELIMITERS;
HXDLIN(1705)				while((_g < _g1->length)){
HXLINE(1705)					::String c = _g1->__get(_g);
HXDLIN(1705)					_g = (_g + 1);
HXLINE(1707)					int pos = this->text.lastIndexOf(c,(startPos - 1));
HXLINE(1708)					if ((pos > leftPos)) {
HXLINE(1709)						leftPos = (pos + 1);
            					}
HXLINE(1711)					pos = this->text.indexOf(c,startPos);
HXLINE(1712)					bool _hx_tmp2;
HXDLIN(1712)					if ((pos < rightPos)) {
HXLINE(1712)						_hx_tmp2 = (pos != -1);
            					}
            					else {
HXLINE(1712)						_hx_tmp2 = false;
            					}
HXDLIN(1712)					if (_hx_tmp2) {
HXLINE(1713)						rightPos = pos;
            					}
            				}
            			}
HXLINE(1716)			if ((leftPos != rightPos)) {
HXLINE(1718)				this->setSelection(leftPos,rightPos);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,updatePointerDoublePress,(void))

 ::flixel::math::FlxBasePoint FlxInputText_obj::getRelativePosition( ::flixel::input::FlxPointer pointer){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1727_getRelativePosition)
HXLINE(1728)		 ::flixel::FlxCamera pointerPos = this->_pointerCamera;
HXDLIN(1728)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1728)		point->_inPool = false;
HXDLIN(1728)		 ::flixel::math::FlxBasePoint pointerPos1 = pointer->getWorldPosition(pointerPos,point);
HXLINE(1729)		this->getScreenPosition(this->_point,this->_pointerCamera);
HXLINE(1730)		Float x = ((pointerPos1->x - this->_pointerCamera->scroll->x) - this->_point->x);
HXDLIN(1730)		Float y = ((pointerPos1->y - this->_pointerCamera->scroll->y) - this->_point->y);
HXDLIN(1730)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN(1730)		point1->_inPool = false;
HXDLIN(1730)		 ::flixel::math::FlxBasePoint result = point1;
HXLINE(1731)		pointerPos1->put();
HXLINE(1732)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,getRelativePosition,return )

bool FlxInputText_obj::set_bold(bool value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1737_set_bold)
HXLINE(1738)		if ((( (bool)(this->_defaultFormat->bold) ) != value)) {
HXLINE(1740)			this->super::set_bold(value);
HXLINE(1741)			this->_regenCaretSize = (this->_regenBackground = true);
            		}
HXLINE(1744)		return value;
            	}


 ::flixel::math::FlxRect FlxInputText_obj::set_clipRect( ::flixel::math::FlxRect value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1747_set_clipRect)
HXLINE(1748)		this->super::set_clipRect(value);
HXLINE(1750)		this->clipSprite(this->_backgroundSprite,null());
HXLINE(1751)		this->clipSprite(this->_fieldBorderSprite,true);
HXLINE(1752)		this->clipSprite(this->_caret,null());
HXLINE(1753)		{
HXLINE(1753)			int _g = 0;
HXDLIN(1753)			::Array< ::Dynamic> _g1 = this->_selectionBoxes;
HXDLIN(1753)			while((_g < _g1->length)){
HXLINE(1753)				 ::flixel::FlxSprite box = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1753)				_g = (_g + 1);
HXLINE(1754)				this->clipSprite(box,null());
            			}
            		}
HXLINE(1756)		return value;
            	}


int FlxInputText_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1760_set_color)
HXLINE(1761)		if ((this->color != value)) {
HXLINE(1763)			this->super::set_color(value);
HXLINE(1764)			this->set_caretColor(value);
            		}
HXLINE(1767)		return value;
            	}


Float FlxInputText_obj::set_fieldHeight(Float value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1770_set_fieldHeight)
HXLINE(1771)		if ((this->get_fieldHeight() != value)) {
HXLINE(1773)			this->super::set_fieldHeight(value);
HXLINE(1774)			this->_regenBackground = true;
            		}
HXLINE(1777)		return value;
            	}


Float FlxInputText_obj::set_fieldWidth(Float value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1781_set_fieldWidth)
HXLINE(1782)		if ((this->get_fieldWidth() != value)) {
HXLINE(1784)			this->super::set_fieldWidth(value);
HXLINE(1785)			this->_regenBackground = true;
            		}
HXLINE(1788)		return value;
            	}


::String FlxInputText_obj::set_font(::String value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1792_set_font)
HXLINE(1793)		if ((this->_font != value)) {
HXLINE(1795)			this->super::set_font(value);
HXLINE(1796)			this->_regenCaretSize = (this->_regenBackground = true);
            		}
HXLINE(1799)		return value;
            	}


bool FlxInputText_obj::set_italic(bool value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1803_set_italic)
HXLINE(1804)		if ((( (bool)(this->_defaultFormat->italic) ) != value)) {
HXLINE(1806)			this->super::set_italic(value);
HXLINE(1807)			this->_regenCaretSize = (this->_regenBackground = true);
            		}
HXLINE(1810)		return value;
            	}


int FlxInputText_obj::set_size(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1814_set_size)
HXLINE(1815)		if ((::Std_obj::_hx_int(( (Float)(this->_defaultFormat->size) )) != value)) {
HXLINE(1817)			this->super::set_size(value);
HXLINE(1818)			this->_regenCaretSize = (this->_regenBackground = true);
            		}
HXLINE(1821)		return value;
            	}


::String FlxInputText_obj::set_systemFont(::String value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1825_set_systemFont)
HXLINE(1826)		if ((this->_defaultFormat->font != value)) {
HXLINE(1828)			this->super::set_systemFont(value);
HXLINE(1829)			this->_regenCaretSize = (this->_regenBackground = true);
            		}
HXLINE(1832)		return value;
            	}


::String FlxInputText_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1836_set_text)
HXLINE(1837)		if ((this->text != value)) {
HXLINE(1839)			this->super::set_text(value);
HXLINE(1841)			if (::hx::IsNotNull( this->textField )) {
HXLINE(1843)				if (this->hasFocus) {
HXLINE(1845)					if ((this->text.length < this->_selectionIndex)) {
HXLINE(1847)						this->_selectionIndex = this->text.length;
            					}
HXLINE(1849)					if ((this->text.length < this->_caretIndex)) {
HXLINE(1851)						this->_caretIndex = this->text.length;
            					}
            				}
            				else {
HXLINE(1856)					this->_selectionIndex = 0;
HXLINE(1857)					this->_caretIndex = 0;
            				}
HXLINE(1860)				this->setSelection(this->_selectionIndex,this->_caretIndex);
HXLINE(1861)				if (this->hasFocus) {
HXLINE(1863)					this->restartCaretTimer();
            				}
            			}
HXLINE(1866)			bool _hx_tmp;
HXDLIN(1866)			if (!(this->get_autoSize())) {
HXLINE(1866)				_hx_tmp = this->_autoHeight;
            			}
            			else {
HXLINE(1866)				_hx_tmp = true;
            			}
HXDLIN(1866)			if (_hx_tmp) {
HXLINE(1868)				this->_regenBackground = true;
            			}
            		}
HXLINE(1872)		return value;
            	}


Float FlxInputText_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1876_set_x)
HXLINE(1877)		if ((this->x != value)) {
HXLINE(1879)			this->super::set_x(value);
HXLINE(1880)			this->updateSpritePositions();
            		}
HXLINE(1883)		return value;
            	}


Float FlxInputText_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1887_set_y)
HXLINE(1888)		if ((this->y != value)) {
HXLINE(1890)			this->super::set_y(value);
HXLINE(1891)			this->updateSpritePositions();
            		}
HXLINE(1894)		return value;
            	}


bool FlxInputText_obj::set_background(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_461edb9762e701d5_1898_set_background)
HXLINE(1899)		if ((this->background != value)) {
HXLINE(1901)			this->background = value;
HXLINE(1903)			if (this->background) {
HXLINE(1905)				if (::hx::IsNull( this->_backgroundSprite )) {
HXLINE(1906)					this->_backgroundSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            				}
HXLINE(1907)				if (::hx::IsNull( this->_fieldBorderSprite )) {
HXLINE(1908)					this->_fieldBorderSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            				}
HXLINE(1910)				this->_regenBackground = true;
            			}
            			else {
HXLINE(1914)				this->_backgroundSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_backgroundSprite)) );
HXLINE(1915)				this->_fieldBorderSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_fieldBorderSprite)) );
            			}
            		}
HXLINE(1919)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_background,return )

int FlxInputText_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1923_set_backgroundColor)
HXLINE(1924)		if ((this->backgroundColor != value)) {
HXLINE(1926)			this->backgroundColor = value;
HXLINE(1927)			this->_regenBackground = true;
            		}
HXLINE(1930)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_backgroundColor,return )

int FlxInputText_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1935_get_bottomScrollV)
HXDLIN(1935)		return this->textField->get_bottomScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_bottomScrollV,return )

int FlxInputText_obj::set_caretColor(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1939_set_caretColor)
HXLINE(1940)		if ((this->caretColor != value)) {
HXLINE(1942)			this->caretColor = value;
HXLINE(1943)			this->_caret->set_color(this->caretColor);
            		}
HXLINE(1946)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_caretColor,return )

int FlxInputText_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1951_get_caretIndex)
HXDLIN(1951)		return this->_caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_caretIndex,return )

int FlxInputText_obj::set_caretIndex(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1955_set_caretIndex)
HXLINE(1956)		if ((value < 0)) {
HXLINE(1957)			value = 0;
            		}
HXLINE(1958)		if ((value > this->text.length)) {
HXLINE(1959)			value = this->text.length;
            		}
HXLINE(1960)		if ((this->_caretIndex != value)) {
HXLINE(1962)			this->_caretIndex = value;
HXLINE(1963)			this->setSelection(this->_caretIndex,this->_caretIndex);
HXLINE(1964)			this->restartCaretTimer();
            		}
HXLINE(1967)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_caretIndex,return )

int FlxInputText_obj::set_caretWidth(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1971_set_caretWidth)
HXLINE(1972)		if ((value < 1)) {
HXLINE(1973)			value = 1;
            		}
HXLINE(1974)		if ((this->caretWidth != value)) {
HXLINE(1976)			this->caretWidth = value;
HXLINE(1977)			this->_regenCaretSize = true;
            		}
HXLINE(1980)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_caretWidth,return )

int FlxInputText_obj::set_fieldBorderColor(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1984_set_fieldBorderColor)
HXLINE(1985)		if ((this->fieldBorderColor != value)) {
HXLINE(1987)			this->fieldBorderColor = value;
HXLINE(1988)			this->_regenBackground = true;
            		}
HXLINE(1991)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_fieldBorderColor,return )

int FlxInputText_obj::set_fieldBorderThickness(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_1995_set_fieldBorderThickness)
HXLINE(1996)		if ((value < 0)) {
HXLINE(1997)			value = 0;
            		}
HXLINE(1998)		if ((this->fieldBorderThickness != value)) {
HXLINE(2000)			this->fieldBorderThickness = value;
HXLINE(2001)			this->_regenBackground = true;
            		}
HXLINE(2004)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_fieldBorderThickness,return )

 ::flixel::text::FlxInputTextFilterMode FlxInputText_obj::set_filterMode( ::flixel::text::FlxInputTextFilterMode value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2008_set_filterMode)
HXLINE(2009)		if (::hx::IsPointerNotEq( this->filterMode,value )) {
HXLINE(2011)			this->filterMode = value;
HXLINE(2012)			this->set_text(this->filterText(this->text,null()));
            		}
HXLINE(2015)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_filterMode,return )

int FlxInputText_obj::set_forceCase(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2019_set_forceCase)
HXLINE(2020)		if ((this->forceCase != value)) {
HXLINE(2022)			this->forceCase = value;
HXLINE(2023)			this->set_text(this->filterText(this->text,null()));
            		}
HXLINE(2026)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_forceCase,return )

int FlxInputText_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2031_get_maxChars)
HXDLIN(2031)		return this->textField->get_maxChars();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_maxChars,return )

int FlxInputText_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2035_set_maxChars)
HXLINE(2036)		if ((this->textField->get_maxChars() != value)) {
HXLINE(2038)			this->textField->set_maxChars(value);
HXLINE(2039)			this->_regen = true;
            		}
HXLINE(2042)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_maxChars,return )

int FlxInputText_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2047_get_maxScrollH)
HXDLIN(2047)		return this->textField->get_maxScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_maxScrollH,return )

int FlxInputText_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2052_get_maxScrollV)
HXDLIN(2052)		return this->textField->get_maxScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_maxScrollV,return )

bool FlxInputText_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2057_get_multiline)
HXDLIN(2057)		return this->textField->get_multiline();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_multiline,return )

bool FlxInputText_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2061_set_multiline)
HXLINE(2062)		if ((this->textField->get_multiline() != value)) {
HXLINE(2064)			this->textField->set_multiline(value);
            		}
HXLINE(2067)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_multiline,return )

bool FlxInputText_obj::get_passwordMode(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2072_get_passwordMode)
HXDLIN(2072)		return this->textField->get_displayAsPassword();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_passwordMode,return )

bool FlxInputText_obj::set_passwordMode(bool value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2076_set_passwordMode)
HXLINE(2077)		if ((this->textField->get_displayAsPassword() != value)) {
HXLINE(2079)			this->textField->set_displayAsPassword(value);
HXLINE(2080)			this->_regen = true;
            		}
HXLINE(2082)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_passwordMode,return )

int FlxInputText_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2087_get_scrollH)
HXDLIN(2087)		return this->textField->get_scrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_scrollH,return )

int FlxInputText_obj::set_scrollH(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2091_set_scrollH)
HXLINE(2092)		if ((this->textField->get_scrollH() != value)) {
HXLINE(2094)			this->textField->set_scrollH(value);
HXLINE(2095)			this->_regen = true;
            		}
HXLINE(2097)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_scrollH,return )

int FlxInputText_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2102_get_scrollV)
HXDLIN(2102)		return this->textField->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_scrollV,return )

int FlxInputText_obj::set_scrollV(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2106_set_scrollV)
HXLINE(2107)		bool _hx_tmp;
HXDLIN(2107)		if ((this->textField->get_scrollV() == value)) {
HXLINE(2107)			_hx_tmp = (this->textField->get_scrollV() == 0);
            		}
            		else {
HXLINE(2107)			_hx_tmp = true;
            		}
HXDLIN(2107)		if (_hx_tmp) {
HXLINE(2109)			this->textField->set_scrollV(value);
HXLINE(2110)			this->_regen = true;
            		}
HXLINE(2112)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_scrollV,return )

int FlxInputText_obj::set_selectedTextColor(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2116_set_selectedTextColor)
HXLINE(2117)		if ((this->selectedTextColor != value)) {
HXLINE(2119)			this->selectedTextColor = value;
HXLINE(2120)			this->_selectionFormat->color = this->selectedTextColor;
HXLINE(2121)			this->_regen = true;
            		}
HXLINE(2124)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_selectedTextColor,return )

int FlxInputText_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2129_get_selectionBeginIndex)
HXDLIN(2129)		int a = this->_caretIndex;
HXDLIN(2129)		int b = this->_selectionIndex;
HXDLIN(2129)		if ((a > b)) {
HXDLIN(2129)			return b;
            		}
            		else {
HXDLIN(2129)			return a;
            		}
HXDLIN(2129)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_selectionBeginIndex,return )

int FlxInputText_obj::set_selectionColor(int value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2133_set_selectionColor)
HXLINE(2134)		if ((this->selectionColor != value)) {
HXLINE(2136)			this->selectionColor = value;
HXLINE(2137)			{
HXLINE(2137)				int _g = 0;
HXDLIN(2137)				::Array< ::Dynamic> _g1 = this->_selectionBoxes;
HXDLIN(2137)				while((_g < _g1->length)){
HXLINE(2137)					 ::flixel::FlxSprite box = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(2137)					_g = (_g + 1);
HXLINE(2139)					if (::hx::IsNotNull( box )) {
HXLINE(2140)						box->set_color(this->selectionColor);
            					}
            				}
            			}
            		}
HXLINE(2144)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_selectionColor,return )

int FlxInputText_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2149_get_selectionEndIndex)
HXDLIN(2149)		int a = this->_caretIndex;
HXDLIN(2149)		int b = this->_selectionIndex;
HXDLIN(2149)		if ((a > b)) {
HXDLIN(2149)			return a;
            		}
            		else {
HXDLIN(2149)			return b;
            		}
HXDLIN(2149)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_selectionEndIndex,return )

bool FlxInputText_obj::set_useSelectedTextFormat(bool value){
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_2153_set_useSelectedTextFormat)
HXLINE(2154)		if ((this->useSelectedTextFormat != value)) {
HXLINE(2156)			this->useSelectedTextFormat = value;
HXLINE(2157)			this->_regen = true;
            		}
HXLINE(2160)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_useSelectedTextFormat,return )

 ::flixel::text::FlxInputTextManager FlxInputText_obj::globalManager;

int FlxInputText_obj::GUTTER;

::Array< ::String > FlxInputText_obj::DELIMITERS;


::hx::ObjectPtr< FlxInputText_obj > FlxInputText_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_fieldWidth,::String text,::hx::Null< int >  __o_size,::hx::Null< int >  __o_textColor,::hx::Null< int >  __o_backgroundColor,::hx::Null< bool >  __o_embeddedFont, ::flixel::text::FlxInputTextManager manager) {
	::hx::ObjectPtr< FlxInputText_obj > __this = new FlxInputText_obj();
	__this->__construct(__o_x,__o_y,__o_fieldWidth,text,__o_size,__o_textColor,__o_backgroundColor,__o_embeddedFont,manager);
	return __this;
}

::hx::ObjectPtr< FlxInputText_obj > FlxInputText_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_fieldWidth,::String text,::hx::Null< int >  __o_size,::hx::Null< int >  __o_textColor,::hx::Null< int >  __o_backgroundColor,::hx::Null< bool >  __o_embeddedFont, ::flixel::text::FlxInputTextManager manager) {
	FlxInputText_obj *__this = (FlxInputText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxInputText_obj), true, "flixel.text.FlxInputText"));
	*(void **)__this = FlxInputText_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_fieldWidth,text,__o_size,__o_textColor,__o_backgroundColor,__o_embeddedFont,manager);
	return __this;
}

FlxInputText_obj::FlxInputText_obj()
{
}

void FlxInputText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxInputText);
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(caretColor,"caretColor");
	HX_MARK_MEMBER_NAME(caretWidth,"caretWidth");
	HX_MARK_MEMBER_NAME(editable,"editable");
	HX_MARK_MEMBER_NAME(fieldBorderColor,"fieldBorderColor");
	HX_MARK_MEMBER_NAME(fieldBorderThickness,"fieldBorderThickness");
	HX_MARK_MEMBER_NAME(filterMode,"filterMode");
	HX_MARK_MEMBER_NAME(forceCase,"forceCase");
	HX_MARK_MEMBER_NAME(hasFocus,"hasFocus");
	HX_MARK_MEMBER_NAME(mouseWheelEnabled,"mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(onEnter,"onEnter");
	HX_MARK_MEMBER_NAME(onFocusChange,"onFocusChange");
	HX_MARK_MEMBER_NAME(onScrollChange,"onScrollChange");
	HX_MARK_MEMBER_NAME(onTextChange,"onTextChange");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(selectedTextColor,"selectedTextColor");
	HX_MARK_MEMBER_NAME(selectionColor,"selectionColor");
	HX_MARK_MEMBER_NAME(useSelectedTextFormat,"useSelectedTextFormat");
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(_backgroundSprite,"_backgroundSprite");
	HX_MARK_MEMBER_NAME(_caret,"_caret");
	HX_MARK_MEMBER_NAME(_caretIndex,"_caretIndex");
	HX_MARK_MEMBER_NAME(_caretTimer,"_caretTimer");
	HX_MARK_MEMBER_NAME(_fieldBorderSprite,"_fieldBorderSprite");
	HX_MARK_MEMBER_NAME(_justGainedFocus,"_justGainedFocus");
	HX_MARK_MEMBER_NAME(_pointerCamera,"_pointerCamera");
	HX_MARK_MEMBER_NAME(_regenBackground,"_regenBackground");
	HX_MARK_MEMBER_NAME(_regenCaretSize,"_regenCaretSize");
	HX_MARK_MEMBER_NAME(_selectionBoxes,"_selectionBoxes");
	HX_MARK_MEMBER_NAME(_selectionFormat,"_selectionFormat");
	HX_MARK_MEMBER_NAME(_selectionIndex,"_selectionIndex");
	HX_MARK_MEMBER_NAME(_lastPressTime,"_lastPressTime");
	HX_MARK_MEMBER_NAME(_scrollVCounter,"_scrollVCounter");
	HX_MARK_MEMBER_NAME(_mouseDown,"_mouseDown");
	 ::flixel::text::FlxText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxInputText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(caretColor,"caretColor");
	HX_VISIT_MEMBER_NAME(caretWidth,"caretWidth");
	HX_VISIT_MEMBER_NAME(editable,"editable");
	HX_VISIT_MEMBER_NAME(fieldBorderColor,"fieldBorderColor");
	HX_VISIT_MEMBER_NAME(fieldBorderThickness,"fieldBorderThickness");
	HX_VISIT_MEMBER_NAME(filterMode,"filterMode");
	HX_VISIT_MEMBER_NAME(forceCase,"forceCase");
	HX_VISIT_MEMBER_NAME(hasFocus,"hasFocus");
	HX_VISIT_MEMBER_NAME(mouseWheelEnabled,"mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(onEnter,"onEnter");
	HX_VISIT_MEMBER_NAME(onFocusChange,"onFocusChange");
	HX_VISIT_MEMBER_NAME(onScrollChange,"onScrollChange");
	HX_VISIT_MEMBER_NAME(onTextChange,"onTextChange");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(selectedTextColor,"selectedTextColor");
	HX_VISIT_MEMBER_NAME(selectionColor,"selectionColor");
	HX_VISIT_MEMBER_NAME(useSelectedTextFormat,"useSelectedTextFormat");
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(_backgroundSprite,"_backgroundSprite");
	HX_VISIT_MEMBER_NAME(_caret,"_caret");
	HX_VISIT_MEMBER_NAME(_caretIndex,"_caretIndex");
	HX_VISIT_MEMBER_NAME(_caretTimer,"_caretTimer");
	HX_VISIT_MEMBER_NAME(_fieldBorderSprite,"_fieldBorderSprite");
	HX_VISIT_MEMBER_NAME(_justGainedFocus,"_justGainedFocus");
	HX_VISIT_MEMBER_NAME(_pointerCamera,"_pointerCamera");
	HX_VISIT_MEMBER_NAME(_regenBackground,"_regenBackground");
	HX_VISIT_MEMBER_NAME(_regenCaretSize,"_regenCaretSize");
	HX_VISIT_MEMBER_NAME(_selectionBoxes,"_selectionBoxes");
	HX_VISIT_MEMBER_NAME(_selectionFormat,"_selectionFormat");
	HX_VISIT_MEMBER_NAME(_selectionIndex,"_selectionIndex");
	HX_VISIT_MEMBER_NAME(_lastPressTime,"_lastPressTime");
	HX_VISIT_MEMBER_NAME(_scrollVCounter,"_scrollVCounter");
	HX_VISIT_MEMBER_NAME(_mouseDown,"_mouseDown");
	 ::flixel::text::FlxText_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxInputText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_caret") ) { return ::hx::Val( _caret ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onEnter") ) { return ::hx::Val( onEnter ); }
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"manager") ) { return ::hx::Val( manager ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"addText") ) { return ::hx::Val( addText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { return ::hx::Val( editable ); }
		if (HX_FIELD_EQ(inName,"hasFocus") ) { return ::hx::Val( hasFocus ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"endFocus") ) { return ::hx::Val( endFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineY") ) { return ::hx::Val( getLineY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bold") ) { return ::hx::Val( set_bold_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return ::hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return ::hx::Val( set_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"forceCase") ) { return ::hx::Val( forceCase ); }
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretColor") ) { return ::hx::Val( caretColor ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"caretWidth") ) { return ::hx::Val( caretWidth ); }
		if (HX_FIELD_EQ(inName,"filterMode") ) { return ::hx::Val( filterMode ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"_mouseDown") ) { return ::hx::Val( _mouseDown ); }
		if (HX_FIELD_EQ(inName,"setManager") ) { return ::hx::Val( setManager_dyn() ); }
		if (HX_FIELD_EQ(inName,"startFocus") ) { return ::hx::Val( startFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"clipSprite") ) { return ::hx::Val( clipSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawSprite") ) { return ::hx::Val( drawSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"filterText") ) { return ::hx::Val( filterText_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCursor") ) { return ::hx::Val( moveCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"runCommand") ) { return ::hx::Val( runCommand_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_italic") ) { return ::hx::Val( set_italic_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_caretIndex") ) { return ::hx::Val( _caretIndex ); }
		if (HX_FIELD_EQ(inName,"_caretTimer") ) { return ::hx::Val( _caretTimer ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return ::hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return ::hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return ::hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return ::hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return ::hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"passwordMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_passwordMode() ); }
		if (HX_FIELD_EQ(inName,"onTextChange") ) { return ::hx::Val( onTextChange ); }
		if (HX_FIELD_EQ(inName,"applyFormats") ) { return ::hx::Val( applyFormats_dyn() ); }
		if (HX_FIELD_EQ(inName,"regenGraphic") ) { return ::hx::Val( regenGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return ::hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clipRect") ) { return ::hx::Val( set_clipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return ::hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"onFocusChange") ) { return ::hx::Val( onFocusChange ); }
		if (HX_FIELD_EQ(inName,"getLimeBounds") ) { return ::hx::Val( getLimeBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_forceCase") ) { return ::hx::Val( set_forceCase_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return ::hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return ::hx::Val( set_multiline_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onScrollChange") ) { return ::hx::Val( onScrollChange ); }
		if (HX_FIELD_EQ(inName,"selectionColor") ) { return ::hx::Val( selectionColor ); }
		if (HX_FIELD_EQ(inName,"_pointerCamera") ) { return ::hx::Val( _pointerCamera ); }
		if (HX_FIELD_EQ(inName,"_lastPressTime") ) { return ::hx::Val( _lastPressTime ); }
		if (HX_FIELD_EQ(inName,"set_fieldWidth") ) { return ::hx::Val( set_fieldWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_systemFont") ) { return ::hx::Val( set_systemFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return ::hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_caretColor") ) { return ::hx::Val( set_caretColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return ::hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_caretIndex") ) { return ::hx::Val( set_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_caretWidth") ) { return ::hx::Val( set_caretWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filterMode") ) { return ::hx::Val( set_filterMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return ::hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return ::hx::Val( get_maxScrollV_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return ::hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"_regenCaretSize") ) { return ::hx::Val( _regenCaretSize ); }
		if (HX_FIELD_EQ(inName,"_selectionBoxes") ) { return ::hx::Val( _selectionBoxes ); }
		if (HX_FIELD_EQ(inName,"_selectionIndex") ) { return ::hx::Val( _selectionIndex ); }
		if (HX_FIELD_EQ(inName,"_scrollVCounter") ) { return ::hx::Val( _scrollVCounter ); }
		if (HX_FIELD_EQ(inName,"getCaretOffsetX") ) { return ::hx::Val( getCaretOffsetX_dyn() ); }
		if (HX_FIELD_EQ(inName,"regenBackground") ) { return ::hx::Val( regenBackground_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCaretSize") ) { return ::hx::Val( updateCaretSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSelection") ) { return ::hx::Val( updateSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fieldHeight") ) { return ::hx::Val( set_fieldHeight_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fieldBorderColor") ) { return ::hx::Val( fieldBorderColor ); }
		if (HX_FIELD_EQ(inName,"_justGainedFocus") ) { return ::hx::Val( _justGainedFocus ); }
		if (HX_FIELD_EQ(inName,"_regenBackground") ) { return ::hx::Val( _regenBackground ); }
		if (HX_FIELD_EQ(inName,"_selectionFormat") ) { return ::hx::Val( _selectionFormat ); }
		if (HX_FIELD_EQ(inName,"getScrollVOffset") ) { return ::hx::Val( getScrollVOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateMouseInput") ) { return ::hx::Val( updateMouseInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTouchInput") ) { return ::hx::Val( updateTouchInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_passwordMode") ) { return ::hx::Val( get_passwordMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_passwordMode") ) { return ::hx::Val( set_passwordMode_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { return ::hx::Val( mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"selectedTextColor") ) { return ::hx::Val( selectedTextColor ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"_backgroundSprite") ) { return ::hx::Val( _backgroundSprite ); }
		if (HX_FIELD_EQ(inName,"getCharAtPosition") ) { return ::hx::Val( getCharAtPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return ::hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"restartCaretTimer") ) { return ::hx::Val( restartCaretTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePointerDrag") ) { return ::hx::Val( updatePointerDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePointerMove") ) { return ::hx::Val( updatePointerMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return ::hx::Val( get_bottomScrollV_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_fieldBorderSprite") ) { return ::hx::Val( _fieldBorderSprite ); }
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return ::hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"isCaretLineVisible") ) { return ::hx::Val( isCaretLineVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePointerPress") ) { return ::hx::Val( updatePointerPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectionColor") ) { return ::hx::Val( set_selectionColor_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return ::hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCaretPosition") ) { return ::hx::Val( updateCaretPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkPointerOverlap") ) { return ::hx::Val( checkPointerOverlap_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRelativePosition") ) { return ::hx::Val( getRelativePosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return ::hx::Val( set_backgroundColor_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fieldBorderThickness") ) { return ::hx::Val( fieldBorderThickness ); }
		if (HX_FIELD_EQ(inName,"dispatchTypingAction") ) { return ::hx::Val( dispatchTypingAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSelectionBoxes") ) { return ::hx::Val( updateSelectionBoxes_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePointerRelease") ) { return ::hx::Val( updatePointerRelease_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fieldBorderColor") ) { return ::hx::Val( set_fieldBorderColor_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"useSelectedTextFormat") ) { return ::hx::Val( useSelectedTextFormat ); }
		if (HX_FIELD_EQ(inName,"updateSpritePositions") ) { return ::hx::Val( updateSpritePositions_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedTextColor") ) { return ::hx::Val( set_selectedTextColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return ::hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"updateSelectionSprites") ) { return ::hx::Val( updateSelectionSprites_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return ::hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"updateBackgroundPosition") ) { return ::hx::Val( updateBackgroundPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePointerDoublePress") ) { return ::hx::Val( updatePointerDoublePress_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fieldBorderThickness") ) { return ::hx::Val( set_fieldBorderThickness_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"set_useSelectedTextFormat") ) { return ::hx::Val( set_useSelectedTextFormat_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getCharIndexOnDifferentLine") ) { return ::hx::Val( getCharIndexOnDifferentLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxInputText_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"DELIMITERS") ) { outValue = ( DELIMITERS ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"globalManager") ) { outValue = ( globalManager ); return true; }
	}
	return false;
}

::hx::Val FlxInputText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_caret") ) { _caret=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onEnter") ) { onEnter=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::flixel::text::FlxInputTextManager >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { editable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasFocus") ) { hasFocus=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"forceCase") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_forceCase(inValue.Cast< int >()) );forceCase=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_background(inValue.Cast< bool >()) );background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_caretColor(inValue.Cast< int >()) );caretColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_caretIndex(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"caretWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_caretWidth(inValue.Cast< int >()) );caretWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filterMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_filterMode(inValue.Cast<  ::flixel::text::FlxInputTextFilterMode >()) );filterMode=inValue.Cast<  ::flixel::text::FlxInputTextFilterMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mouseDown") ) { _mouseDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_caretIndex") ) { _caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_caretTimer") ) { _caretTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"passwordMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_passwordMode(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"onTextChange") ) { onTextChange=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal2 >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onFocusChange") ) { onFocusChange=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onScrollChange") ) { onScrollChange=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectionColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectionColor(inValue.Cast< int >()) );selectionColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointerCamera") ) { _pointerCamera=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastPressTime") ) { _lastPressTime=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundColor(inValue.Cast< int >()) );backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_regenCaretSize") ) { _regenCaretSize=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selectionBoxes") ) { _selectionBoxes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selectionIndex") ) { _selectionIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollVCounter") ) { _scrollVCounter=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fieldBorderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_fieldBorderColor(inValue.Cast< int >()) );fieldBorderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_justGainedFocus") ) { _justGainedFocus=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_regenBackground") ) { _regenBackground=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selectionFormat") ) { _selectionFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedTextColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedTextColor(inValue.Cast< int >()) );selectedTextColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_backgroundSprite") ) { _backgroundSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_fieldBorderSprite") ) { _fieldBorderSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fieldBorderThickness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_fieldBorderThickness(inValue.Cast< int >()) );fieldBorderThickness=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"useSelectedTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_useSelectedTextFormat(inValue.Cast< bool >()) );useSelectedTextFormat=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxInputText_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"DELIMITERS") ) { DELIMITERS=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"globalManager") ) { globalManager=ioValue.Cast<  ::flixel::text::FlxInputTextManager >(); return true; }
	}
	return false;
}

void FlxInputText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("caretColor",e0,8c,a3,69));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("caretWidth",83,d1,a9,e9));
	outFields->push(HX_("editable",a4,04,a6,d5));
	outFields->push(HX_("fieldBorderColor",3d,66,ca,1d));
	outFields->push(HX_("fieldBorderThickness",4e,5b,39,33));
	outFields->push(HX_("filterMode",3b,5b,a5,54));
	outFields->push(HX_("forceCase",3b,ce,fe,46));
	outFields->push(HX_("hasFocus",1e,aa,e1,90));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("mouseWheelEnabled",eb,16,54,65));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("passwordMode",1e,4c,29,b6));
	outFields->push(HX_("onEnter",79,0b,c4,06));
	outFields->push(HX_("onFocusChange",89,f4,67,6d));
	outFields->push(HX_("onScrollChange",1c,45,24,39));
	outFields->push(HX_("onTextChange",fc,b3,a6,c6));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("selectedTextColor",9b,13,33,50));
	outFields->push(HX_("selectionBeginIndex",95,7f,17,d7));
	outFields->push(HX_("selectionColor",77,55,cb,d5));
	outFields->push(HX_("selectionEndIndex",a3,0d,42,4b));
	outFields->push(HX_("useSelectedTextFormat",26,cc,bc,77));
	outFields->push(HX_("manager",6d,92,c1,13));
	outFields->push(HX_("_backgroundSprite",f2,78,a7,26));
	outFields->push(HX_("_caret",c4,40,07,3d));
	outFields->push(HX_("_caretIndex",ae,83,e5,af));
	outFields->push(HX_("_caretTimer",61,a8,06,02));
	outFields->push(HX_("_fieldBorderSprite",ac,ca,73,c3));
	outFields->push(HX_("_justGainedFocus",0f,94,73,62));
	outFields->push(HX_("_pointerCamera",83,17,bd,56));
	outFields->push(HX_("_regenBackground",8c,b7,a7,8e));
	outFields->push(HX_("_regenCaretSize",06,fe,d3,34));
	outFields->push(HX_("_selectionBoxes",ec,1b,ce,8b));
	outFields->push(HX_("_selectionFormat",24,7f,06,5e));
	outFields->push(HX_("_selectionIndex",c5,c7,e3,92));
	outFields->push(HX_("_lastPressTime",3b,94,8c,d0));
	outFields->push(HX_("_scrollVCounter",f2,a2,3c,1d));
	outFields->push(HX_("_mouseDown",e8,2c,65,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxInputText_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,backgroundColor),HX_("backgroundColor",95,4e,47,0d)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,caretColor),HX_("caretColor",e0,8c,a3,69)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,caretWidth),HX_("caretWidth",83,d1,a9,e9)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,editable),HX_("editable",a4,04,a6,d5)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,fieldBorderColor),HX_("fieldBorderColor",3d,66,ca,1d)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,fieldBorderThickness),HX_("fieldBorderThickness",4e,5b,39,33)},
	{::hx::fsObject /*  ::flixel::text::FlxInputTextFilterMode */ ,(int)offsetof(FlxInputText_obj,filterMode),HX_("filterMode",3b,5b,a5,54)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,forceCase),HX_("forceCase",3b,ce,fe,46)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,hasFocus),HX_("hasFocus",1e,aa,e1,90)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,mouseWheelEnabled),HX_("mouseWheelEnabled",eb,16,54,65)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal1 */ ,(int)offsetof(FlxInputText_obj,onEnter),HX_("onEnter",79,0b,c4,06)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal1 */ ,(int)offsetof(FlxInputText_obj,onFocusChange),HX_("onFocusChange",89,f4,67,6d)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal2 */ ,(int)offsetof(FlxInputText_obj,onScrollChange),HX_("onScrollChange",1c,45,24,39)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal2 */ ,(int)offsetof(FlxInputText_obj,onTextChange),HX_("onTextChange",fc,b3,a6,c6)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,selectedTextColor),HX_("selectedTextColor",9b,13,33,50)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,selectionColor),HX_("selectionColor",77,55,cb,d5)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,useSelectedTextFormat),HX_("useSelectedTextFormat",26,cc,bc,77)},
	{::hx::fsObject /*  ::flixel::text::FlxInputTextManager */ ,(int)offsetof(FlxInputText_obj,manager),HX_("manager",6d,92,c1,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxInputText_obj,_backgroundSprite),HX_("_backgroundSprite",f2,78,a7,26)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxInputText_obj,_caret),HX_("_caret",c4,40,07,3d)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,_caretIndex),HX_("_caretIndex",ae,83,e5,af)},
	{::hx::fsFloat,(int)offsetof(FlxInputText_obj,_caretTimer),HX_("_caretTimer",61,a8,06,02)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxInputText_obj,_fieldBorderSprite),HX_("_fieldBorderSprite",ac,ca,73,c3)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,_justGainedFocus),HX_("_justGainedFocus",0f,94,73,62)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(FlxInputText_obj,_pointerCamera),HX_("_pointerCamera",83,17,bd,56)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,_regenBackground),HX_("_regenBackground",8c,b7,a7,8e)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,_regenCaretSize),HX_("_regenCaretSize",06,fe,d3,34)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxInputText_obj,_selectionBoxes),HX_("_selectionBoxes",ec,1b,ce,8b)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(FlxInputText_obj,_selectionFormat),HX_("_selectionFormat",24,7f,06,5e)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,_selectionIndex),HX_("_selectionIndex",c5,c7,e3,92)},
	{::hx::fsInt,(int)offsetof(FlxInputText_obj,_lastPressTime),HX_("_lastPressTime",3b,94,8c,d0)},
	{::hx::fsFloat,(int)offsetof(FlxInputText_obj,_scrollVCounter),HX_("_scrollVCounter",f2,a2,3c,1d)},
	{::hx::fsBool,(int)offsetof(FlxInputText_obj,_mouseDown),HX_("_mouseDown",e8,2c,65,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxInputText_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxInputTextManager */ ,(void *) &FlxInputText_obj::globalManager,HX_("globalManager",4a,cb,fa,39)},
	{::hx::fsInt,(void *) &FlxInputText_obj::GUTTER,HX_("GUTTER",1b,d3,2b,8c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &FlxInputText_obj::DELIMITERS,HX_("DELIMITERS",8c,93,e7,ce)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxInputText_obj_sMemberFields[] = {
	HX_("background",ee,93,1d,26),
	HX_("backgroundColor",95,4e,47,0d),
	HX_("caretColor",e0,8c,a3,69),
	HX_("caretWidth",83,d1,a9,e9),
	HX_("editable",a4,04,a6,d5),
	HX_("fieldBorderColor",3d,66,ca,1d),
	HX_("fieldBorderThickness",4e,5b,39,33),
	HX_("filterMode",3b,5b,a5,54),
	HX_("forceCase",3b,ce,fe,46),
	HX_("hasFocus",1e,aa,e1,90),
	HX_("mouseWheelEnabled",eb,16,54,65),
	HX_("onEnter",79,0b,c4,06),
	HX_("onFocusChange",89,f4,67,6d),
	HX_("onScrollChange",1c,45,24,39),
	HX_("onTextChange",fc,b3,a6,c6),
	HX_("selectable",96,b6,2a,c4),
	HX_("selectedTextColor",9b,13,33,50),
	HX_("selectionColor",77,55,cb,d5),
	HX_("useSelectedTextFormat",26,cc,bc,77),
	HX_("manager",6d,92,c1,13),
	HX_("_backgroundSprite",f2,78,a7,26),
	HX_("_caret",c4,40,07,3d),
	HX_("_caretIndex",ae,83,e5,af),
	HX_("_caretTimer",61,a8,06,02),
	HX_("_fieldBorderSprite",ac,ca,73,c3),
	HX_("_justGainedFocus",0f,94,73,62),
	HX_("_pointerCamera",83,17,bd,56),
	HX_("_regenBackground",8c,b7,a7,8e),
	HX_("_regenCaretSize",06,fe,d3,34),
	HX_("_selectionBoxes",ec,1b,ce,8b),
	HX_("_selectionFormat",24,7f,06,5e),
	HX_("_selectionIndex",c5,c7,e3,92),
	HX_("_lastPressTime",3b,94,8c,d0),
	HX_("_scrollVCounter",f2,a2,3c,1d),
	HX_("_mouseDown",e8,2c,65,4a),
	HX_("setManager",eb,b6,a0,66),
	HX_("startFocus",16,38,a0,20),
	HX_("endFocus",fd,f1,86,02),
	HX_("update",09,86,05,87),
	HX_("draw",04,2c,70,42),
	HX_("destroy",fa,2c,86,24),
	HX_("applyFormats",8e,0d,9c,1e),
	HX_("regenGraphic",6b,55,39,8b),
	HX_("dispatchTypingAction",67,ab,ef,f4),
	HX_("replaceSelectedText",fc,fe,33,bb),
	HX_("setSelection",4a,b8,6a,b2),
	HX_("addText",6e,0f,37,89),
	HX_("clipSprite",f5,ba,e3,f9),
	HX_("drawSprite",29,57,59,05),
	HX_("filterText",85,54,3e,59),
	HX_("getCaretOffsetX",d8,13,32,ce),
	HX_("getCharAtPosition",68,96,3a,6b),
	HX_("getCharBoundaries",74,85,a1,8b),
	HX_("getCharIndexOnDifferentLine",28,75,bf,c7),
	HX_("getLineIndexOfChar",b5,68,99,a1),
	HX_("getLineY",6f,ed,d8,d4),
	HX_("getLimeBounds",a0,6b,05,5e),
	HX_("getScrollVOffset",a6,8d,20,9c),
	HX_("isCaretLineVisible",25,b2,ff,b9),
	HX_("moveCursor",c7,08,17,8f),
	HX_("regenBackground",0b,75,c8,a3),
	HX_("replaceText",01,6b,95,61),
	HX_("runCommand",40,01,ea,eb),
	HX_("restartCaretTimer",f1,1f,4b,4a),
	HX_("updateBackgroundPosition",20,6f,5b,d1),
	HX_("updateCaretPosition",83,09,fd,f0),
	HX_("updateCaretSize",9b,14,46,77),
	HX_("updateSelection",03,c9,a5,dd),
	HX_("updateSelectionBoxes",36,0b,00,c5),
	HX_("updateSelectionSprites",0b,7e,08,c5),
	HX_("updateSpritePositions",dc,82,c6,91),
	HX_("updateMouseInput",0e,87,d6,25),
	HX_("updateTouchInput",34,77,9a,01),
	HX_("checkPointerOverlap",32,e7,30,19),
	HX_("updatePointerPress",2f,71,bc,e1),
	HX_("updatePointerDrag",c8,67,70,49),
	HX_("updatePointerMove",e5,1e,61,4f),
	HX_("updatePointerRelease",73,66,a5,3d),
	HX_("updatePointerDoublePress",5e,81,b3,24),
	HX_("getRelativePosition",4b,2e,23,ea),
	HX_("set_bold",82,96,33,6f),
	HX_("set_clipRect",91,67,7d,22),
	HX_("set_color",c6,b9,56,71),
	HX_("set_fieldHeight",e4,8c,a0,c3),
	HX_("set_fieldWidth",a9,9f,fa,2d),
	HX_("set_font",cc,72,d8,71),
	HX_("set_italic",2d,3d,69,fa),
	HX_("set_size",be,b5,6b,7a),
	HX_("set_systemFont",1b,35,59,88),
	HX_("set_text",aa,e1,11,7b),
	HX_("set_x",5b,9b,2f,7a),
	HX_("set_y",5c,9b,2f,7a),
	HX_("set_background",ab,04,33,bc),
	HX_("set_backgroundColor",b8,10,ef,d4),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("set_caretColor",9d,fd,b8,ff),
	HX_("get_caretIndex",d8,3e,51,53),
	HX_("set_caretIndex",4c,27,71,73),
	HX_("set_caretWidth",40,42,bf,7f),
	HX_("set_fieldBorderColor",ba,82,ec,08),
	HX_("set_fieldBorderThickness",4b,fa,af,88),
	HX_("set_filterMode",f8,cb,ba,ea),
	HX_("set_forceCase",1e,84,68,4d),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("get_maxScrollH",a0,35,f2,10),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("get_passwordMode",a7,38,c8,ba),
	HX_("set_passwordMode",1b,26,0a,11),
	HX_("get_scrollH",b2,93,d2,b6),
	HX_("set_scrollH",be,9a,3f,c1),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("set_selectedTextColor",7e,e4,e9,22),
	HX_("get_selectionBeginIndex",2c,26,6d,df),
	HX_("set_selectionColor",b4,68,14,4e),
	HX_("get_selectionEndIndex",7a,10,f0,c9),
	HX_("set_useSelectedTextFormat",89,4a,11,ea),
	::String(null()) };

static void FlxInputText_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxInputText_obj::globalManager,"globalManager");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::GUTTER,"GUTTER");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::DELIMITERS,"DELIMITERS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxInputText_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::globalManager,"globalManager");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::GUTTER,"GUTTER");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::DELIMITERS,"DELIMITERS");
};

#endif

::hx::Class FlxInputText_obj::__mClass;

static ::String FlxInputText_obj_sStaticFields[] = {
	HX_("globalManager",4a,cb,fa,39),
	HX_("GUTTER",1b,d3,2b,8c),
	HX_("DELIMITERS",8c,93,e7,ce),
	::String(null())
};

void FlxInputText_obj::__register()
{
	FlxInputText_obj _hx_dummy;
	FlxInputText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.text.FlxInputText",f4,60,ec,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxInputText_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxInputText_obj::__SetStatic;
	__mClass->mMarkFunc = FlxInputText_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxInputText_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxInputText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxInputText_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxInputText_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxInputText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxInputText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxInputText_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_35_boot)
HXDLIN(  35)		GUTTER = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_461edb9762e701d5_40_boot)
HXDLIN(  40)		DELIMITERS = ::Array_obj< ::String >::fromData( _hx_array_data_89ec60f4_105,13);
            	}
}

} // end namespace flixel
} // end namespace text

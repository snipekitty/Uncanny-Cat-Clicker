// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_flixel_text_FlxInputTextFilterMode
#include <flixel/text/FlxInputTextFilterMode.h>
#endif
namespace flixel{
namespace text{

::flixel::text::FlxInputTextFilterMode FlxInputTextFilterMode_obj::ALPHABET;

::flixel::text::FlxInputTextFilterMode FlxInputTextFilterMode_obj::ALPHANUMERIC;

::flixel::text::FlxInputTextFilterMode FlxInputTextFilterMode_obj::CHARS(::String chars)
{
	return ::hx::CreateEnum< FlxInputTextFilterMode_obj >(HX_("CHARS",bd,d4,a1,c3),5,1)->_hx_init(0,chars);
}

::flixel::text::FlxInputTextFilterMode FlxInputTextFilterMode_obj::NONE;

::flixel::text::FlxInputTextFilterMode FlxInputTextFilterMode_obj::NUMERIC;

::flixel::text::FlxInputTextFilterMode FlxInputTextFilterMode_obj::REG( ::EReg reg)
{
	return ::hx::CreateEnum< FlxInputTextFilterMode_obj >(HX_("REG",34,75,3e,00),4,1)->_hx_init(0,reg);
}

bool FlxInputTextFilterMode_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ALPHABET",b3,0c,be,7a)) { outValue = FlxInputTextFilterMode_obj::ALPHABET; return true; }
	if (inName==HX_("ALPHANUMERIC",2f,5b,31,10)) { outValue = FlxInputTextFilterMode_obj::ALPHANUMERIC; return true; }
	if (inName==HX_("CHARS",bd,d4,a1,c3)) { outValue = FlxInputTextFilterMode_obj::CHARS_dyn(); return true; }
	if (inName==HX_("NONE",b8,da,ca,33)) { outValue = FlxInputTextFilterMode_obj::NONE; return true; }
	if (inName==HX_("NUMERIC",ad,b6,94,2b)) { outValue = FlxInputTextFilterMode_obj::NUMERIC; return true; }
	if (inName==HX_("REG",34,75,3e,00)) { outValue = FlxInputTextFilterMode_obj::REG_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(FlxInputTextFilterMode_obj)

int FlxInputTextFilterMode_obj::__FindIndex(::String inName)
{
	if (inName==HX_("ALPHABET",b3,0c,be,7a)) return 1;
	if (inName==HX_("ALPHANUMERIC",2f,5b,31,10)) return 3;
	if (inName==HX_("CHARS",bd,d4,a1,c3)) return 5;
	if (inName==HX_("NONE",b8,da,ca,33)) return 0;
	if (inName==HX_("NUMERIC",ad,b6,94,2b)) return 2;
	if (inName==HX_("REG",34,75,3e,00)) return 4;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxInputTextFilterMode_obj,CHARS,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxInputTextFilterMode_obj,REG,return)

int FlxInputTextFilterMode_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("ALPHABET",b3,0c,be,7a)) return 0;
	if (inName==HX_("ALPHANUMERIC",2f,5b,31,10)) return 0;
	if (inName==HX_("CHARS",bd,d4,a1,c3)) return 1;
	if (inName==HX_("NONE",b8,da,ca,33)) return 0;
	if (inName==HX_("NUMERIC",ad,b6,94,2b)) return 0;
	if (inName==HX_("REG",34,75,3e,00)) return 1;
	return super::__FindArgCount(inName);
}

::hx::Val FlxInputTextFilterMode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ALPHABET",b3,0c,be,7a)) return ALPHABET;
	if (inName==HX_("ALPHANUMERIC",2f,5b,31,10)) return ALPHANUMERIC;
	if (inName==HX_("CHARS",bd,d4,a1,c3)) return CHARS_dyn();
	if (inName==HX_("NONE",b8,da,ca,33)) return NONE;
	if (inName==HX_("NUMERIC",ad,b6,94,2b)) return NUMERIC;
	if (inName==HX_("REG",34,75,3e,00)) return REG_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String FlxInputTextFilterMode_obj_sStaticFields[] = {
	HX_("NONE",b8,da,ca,33),
	HX_("ALPHABET",b3,0c,be,7a),
	HX_("NUMERIC",ad,b6,94,2b),
	HX_("ALPHANUMERIC",2f,5b,31,10),
	HX_("REG",34,75,3e,00),
	HX_("CHARS",bd,d4,a1,c3),
	::String(null())
};

::hx::Class FlxInputTextFilterMode_obj::__mClass;

Dynamic __Create_FlxInputTextFilterMode_obj() { return new FlxInputTextFilterMode_obj; }

void FlxInputTextFilterMode_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("flixel.text.FlxInputTextFilterMode",4f,f9,78,30), ::hx::TCanCast< FlxInputTextFilterMode_obj >,FlxInputTextFilterMode_obj_sStaticFields,0,
	&__Create_FlxInputTextFilterMode_obj, &__Create,
	&super::__SGetClass(), &CreateFlxInputTextFilterMode_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &FlxInputTextFilterMode_obj::__GetStatic;
}

void FlxInputTextFilterMode_obj::__boot()
{
ALPHABET = ::hx::CreateConstEnum< FlxInputTextFilterMode_obj >(HX_("ALPHABET",b3,0c,be,7a),1);
ALPHANUMERIC = ::hx::CreateConstEnum< FlxInputTextFilterMode_obj >(HX_("ALPHANUMERIC",2f,5b,31,10),3);
NONE = ::hx::CreateConstEnum< FlxInputTextFilterMode_obj >(HX_("NONE",b8,da,ca,33),0);
NUMERIC = ::hx::CreateConstEnum< FlxInputTextFilterMode_obj >(HX_("NUMERIC",ad,b6,94,2b),2);
}


} // end namespace flixel
} // end namespace text

// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_util_LoadFailureType
#include <flixel/util/LoadFailureType.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
namespace flixel{
namespace util{

::flixel::util::LoadFailureType LoadFailureType_obj::INVALID_NAME(::String name,::String message)
{
	return ::hx::CreateEnum< LoadFailureType_obj >(HX_("INVALID_NAME",f3,7b,59,19),0,2)->_hx_init(0,name)->_hx_init(1,message);
}

::flixel::util::LoadFailureType LoadFailureType_obj::INVALID_PATH(::String path,::String message)
{
	return ::hx::CreateEnum< LoadFailureType_obj >(HX_("INVALID_PATH",4d,ef,ab,1a),1,2)->_hx_init(0,path)->_hx_init(1,message);
}

::flixel::util::LoadFailureType LoadFailureType_obj::IO( ::haxe::Exception exception)
{
	return ::hx::CreateEnum< LoadFailureType_obj >(HX_("IO",e6,3f,00,00),2,1)->_hx_init(0,exception);
}

::flixel::util::LoadFailureType LoadFailureType_obj::PARSING(::String rawData, ::haxe::Exception exception)
{
	return ::hx::CreateEnum< LoadFailureType_obj >(HX_("PARSING",10,80,d7,69),3,2)->_hx_init(0,rawData)->_hx_init(1,exception);
}

bool LoadFailureType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("INVALID_NAME",f3,7b,59,19)) { outValue = LoadFailureType_obj::INVALID_NAME_dyn(); return true; }
	if (inName==HX_("INVALID_PATH",4d,ef,ab,1a)) { outValue = LoadFailureType_obj::INVALID_PATH_dyn(); return true; }
	if (inName==HX_("IO",e6,3f,00,00)) { outValue = LoadFailureType_obj::IO_dyn(); return true; }
	if (inName==HX_("PARSING",10,80,d7,69)) { outValue = LoadFailureType_obj::PARSING_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(LoadFailureType_obj)

int LoadFailureType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("INVALID_NAME",f3,7b,59,19)) return 0;
	if (inName==HX_("INVALID_PATH",4d,ef,ab,1a)) return 1;
	if (inName==HX_("IO",e6,3f,00,00)) return 2;
	if (inName==HX_("PARSING",10,80,d7,69)) return 3;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoadFailureType_obj,INVALID_NAME,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoadFailureType_obj,INVALID_PATH,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoadFailureType_obj,IO,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoadFailureType_obj,PARSING,return)

int LoadFailureType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("INVALID_NAME",f3,7b,59,19)) return 2;
	if (inName==HX_("INVALID_PATH",4d,ef,ab,1a)) return 2;
	if (inName==HX_("IO",e6,3f,00,00)) return 1;
	if (inName==HX_("PARSING",10,80,d7,69)) return 2;
	return super::__FindArgCount(inName);
}

::hx::Val LoadFailureType_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("INVALID_NAME",f3,7b,59,19)) return INVALID_NAME_dyn();
	if (inName==HX_("INVALID_PATH",4d,ef,ab,1a)) return INVALID_PATH_dyn();
	if (inName==HX_("IO",e6,3f,00,00)) return IO_dyn();
	if (inName==HX_("PARSING",10,80,d7,69)) return PARSING_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String LoadFailureType_obj_sStaticFields[] = {
	HX_("INVALID_NAME",f3,7b,59,19),
	HX_("INVALID_PATH",4d,ef,ab,1a),
	HX_("IO",e6,3f,00,00),
	HX_("PARSING",10,80,d7,69),
	::String(null())
};

::hx::Class LoadFailureType_obj::__mClass;

Dynamic __Create_LoadFailureType_obj() { return new LoadFailureType_obj; }

void LoadFailureType_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("flixel.util.LoadFailureType",64,0a,58,f4), ::hx::TCanCast< LoadFailureType_obj >,LoadFailureType_obj_sStaticFields,0,
	&__Create_LoadFailureType_obj, &__Create,
	&super::__SGetClass(), &CreateLoadFailureType_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &LoadFailureType_obj::__GetStatic;
}

void LoadFailureType_obj::__boot()
{
}


} // end namespace flixel
} // end namespace util

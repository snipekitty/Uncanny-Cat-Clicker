// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_AssetFrontEnd
#include <flixel/system/frontEnds/AssetFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds__AssetFrontEnd_FlxAssetType_Impl_
#include <flixel/system/frontEnds/_AssetFrontEnd/FlxAssetType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise
#include <lime/app/Promise.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_043156804960a46d_89_new,"flixel.system.frontEnds.AssetFrontEnd","new",0xb2f5913a,"flixel.system.frontEnds.AssetFrontEnd.new","flixel/system/frontEnds/AssetFrontEnd.hx",89,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_107___default_getAssetUnsafe,"flixel.system.frontEnds.AssetFrontEnd","__default_getAssetUnsafe",0xe9c27a44,"flixel.system.frontEnds.AssetFrontEnd.__default_getAssetUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",107,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_156_getOpenflAssetUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getOpenflAssetUnsafe",0xd1aa14f6,"flixel.system.frontEnds.AssetFrontEnd.getOpenflAssetUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",156,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_175_getAsset,"flixel.system.frontEnds.AssetFrontEnd","getAsset",0x5ae36260,"flixel.system.frontEnds.AssetFrontEnd.getAsset","flixel/system/frontEnds/AssetFrontEnd.hx",175,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_207___default_loadAsset,"flixel.system.frontEnds.AssetFrontEnd","__default_loadAsset",0x5576a366,"flixel.system.frontEnds.AssetFrontEnd.__default_loadAsset","flixel/system/frontEnds/AssetFrontEnd.hx",207,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_221_loadOpenflAsset,"flixel.system.frontEnds.AssetFrontEnd","loadOpenflAsset",0xefd3af94,"flixel.system.frontEnds.AssetFrontEnd.loadOpenflAsset","flixel/system/frontEnds/AssetFrontEnd.hx",221,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_247___default_exists,"flixel.system.frontEnds.AssetFrontEnd","__default_exists",0x07652ae0,"flixel.system.frontEnds.AssetFrontEnd.__default_exists","flixel/system/frontEnds/AssetFrontEnd.hx",247,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_275___default_isLocal,"flixel.system.frontEnds.AssetFrontEnd","__default_isLocal",0x625cc39d,"flixel.system.frontEnds.AssetFrontEnd.__default_isLocal","flixel/system/frontEnds/AssetFrontEnd.hx",275,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_295___default_list,"flixel.system.frontEnds.AssetFrontEnd","__default_list",0x4bec2062,"flixel.system.frontEnds.AssetFrontEnd.__default_list","flixel/system/frontEnds/AssetFrontEnd.hx",295,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_324_getBitmapDataUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getBitmapDataUnsafe",0xbc593c4f,"flixel.system.frontEnds.AssetFrontEnd.getBitmapDataUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",324,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_336_getBitmapData,"flixel.system.frontEnds.AssetFrontEnd","getBitmapData",0xc3ec2749,"flixel.system.frontEnds.AssetFrontEnd.getBitmapData","flixel/system/frontEnds/AssetFrontEnd.hx",336,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_348_getSoundUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getSoundUnsafe",0xb32776c5,"flixel.system.frontEnds.AssetFrontEnd.getSoundUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",348,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_363_getSound,"flixel.system.frontEnds.AssetFrontEnd","getSound",0xb576853f,"flixel.system.frontEnds.AssetFrontEnd.getSound","flixel/system/frontEnds/AssetFrontEnd.hx",363,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_376_getSoundAddExt,"flixel.system.frontEnds.AssetFrontEnd","getSoundAddExt",0xe8030f9f,"flixel.system.frontEnds.AssetFrontEnd.getSoundAddExt","flixel/system/frontEnds/AssetFrontEnd.hx",376,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_384_addSoundExtIf,"flixel.system.frontEnds.AssetFrontEnd","addSoundExtIf",0x7e69ea6a,"flixel.system.frontEnds.AssetFrontEnd.addSoundExtIf","flixel/system/frontEnds/AssetFrontEnd.hx",384,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_389_addSoundExt,"flixel.system.frontEnds.AssetFrontEnd","addSoundExt",0xb6ec452d,"flixel.system.frontEnds.AssetFrontEnd.addSoundExt","flixel/system/frontEnds/AssetFrontEnd.hx",389,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_407_getTextUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getTextUnsafe",0x313e7643,"flixel.system.frontEnds.AssetFrontEnd.getTextUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",407,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_421_getText,"flixel.system.frontEnds.AssetFrontEnd","getText",0xab58b23d,"flixel.system.frontEnds.AssetFrontEnd.getText","flixel/system/frontEnds/AssetFrontEnd.hx",421,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_434_getXmlUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getXmlUnsafe",0x7f4fd1cd,"flixel.system.frontEnds.AssetFrontEnd.getXmlUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",434,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_449_getXml,"flixel.system.frontEnds.AssetFrontEnd","getXml",0x04396a47,"flixel.system.frontEnds.AssetFrontEnd.getXml","flixel/system/frontEnds/AssetFrontEnd.hx",449,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_464_getJsonUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getJsonUnsafe",0x3b42b9fe,"flixel.system.frontEnds.AssetFrontEnd.getJsonUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",464,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_479_getJson,"flixel.system.frontEnds.AssetFrontEnd","getJson",0xa4c727b8,"flixel.system.frontEnds.AssetFrontEnd.getJson","flixel/system/frontEnds/AssetFrontEnd.hx",479,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_495_getBytesUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getBytesUnsafe",0x41558f61,"flixel.system.frontEnds.AssetFrontEnd.getBytesUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",495,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_509_getBytes,"flixel.system.frontEnds.AssetFrontEnd","getBytes",0xf24200db,"flixel.system.frontEnds.AssetFrontEnd.getBytes","flixel/system/frontEnds/AssetFrontEnd.hx",509,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_521_getFontUnsafe,"flixel.system.frontEnds.AssetFrontEnd","getFontUnsafe",0xaea18ce5,"flixel.system.frontEnds.AssetFrontEnd.getFontUnsafe","flixel/system/frontEnds/AssetFrontEnd.hx",521,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_533_getFont,"flixel.system.frontEnds.AssetFrontEnd","getFont",0xa21f435f,"flixel.system.frontEnds.AssetFrontEnd.getFont","flixel/system/frontEnds/AssetFrontEnd.hx",533,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_545_loadBitmapData,"flixel.system.frontEnds.AssetFrontEnd","loadBitmapData",0xd8ab58e5,"flixel.system.frontEnds.AssetFrontEnd.loadBitmapData","flixel/system/frontEnds/AssetFrontEnd.hx",545,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_557_loadSound,"flixel.system.frontEnds.AssetFrontEnd","loadSound",0xffbcb923,"flixel.system.frontEnds.AssetFrontEnd.loadSound","flixel/system/frontEnds/AssetFrontEnd.hx",557,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_571_loadText,"flixel.system.frontEnds.AssetFrontEnd","loadText",0x926c86d9,"flixel.system.frontEnds.AssetFrontEnd.loadText","flixel/system/frontEnds/AssetFrontEnd.hx",571,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_585_loadXml,"flixel.system.frontEnds.AssetFrontEnd","loadXml",0x94c21d2b,"flixel.system.frontEnds.AssetFrontEnd.loadXml","flixel/system/frontEnds/AssetFrontEnd.hx",585,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_599_loadJson,"flixel.system.frontEnds.AssetFrontEnd","loadJson",0x8bdafc54,"flixel.system.frontEnds.AssetFrontEnd.loadJson","flixel/system/frontEnds/AssetFrontEnd.hx",599,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_613_loadBytes,"flixel.system.frontEnds.AssetFrontEnd","loadBytes",0x3c8834bf,"flixel.system.frontEnds.AssetFrontEnd.loadBytes","flixel/system/frontEnds/AssetFrontEnd.hx",613,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_625_loadFont,"flixel.system.frontEnds.AssetFrontEnd","loadFont",0x893317fb,"flixel.system.frontEnds.AssetFrontEnd.loadFont","flixel/system/frontEnds/AssetFrontEnd.hx",625,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_633_parseJson,"flixel.system.frontEnds.AssetFrontEnd","parseJson",0x31c77455,"flixel.system.frontEnds.AssetFrontEnd.parseJson","flixel/system/frontEnds/AssetFrontEnd.hx",633,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_641_parseXml,"flixel.system.frontEnds.AssetFrontEnd","parseXml",0xab50604a,"flixel.system.frontEnds.AssetFrontEnd.parseXml","flixel/system/frontEnds/AssetFrontEnd.hx",641,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_648_wrapFuture,"flixel.system.frontEnds.AssetFrontEnd","wrapFuture",0xb58e2813,"flixel.system.frontEnds.AssetFrontEnd.wrapFuture","flixel/system/frontEnds/AssetFrontEnd.hx",648,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_649_wrapFuture,"flixel.system.frontEnds.AssetFrontEnd","wrapFuture",0xb58e2813,"flixel.system.frontEnds.AssetFrontEnd.wrapFuture","flixel/system/frontEnds/AssetFrontEnd.hx",649,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_650_wrapFuture,"flixel.system.frontEnds.AssetFrontEnd","wrapFuture",0xb58e2813,"flixel.system.frontEnds.AssetFrontEnd.wrapFuture","flixel/system/frontEnds/AssetFrontEnd.hx",650,0x11085f97)
HX_LOCAL_STACK_FRAME(_hx_pos_043156804960a46d_645_wrapFuture,"flixel.system.frontEnds.AssetFrontEnd","wrapFuture",0xb58e2813,"flixel.system.frontEnds.AssetFrontEnd.wrapFuture","flixel/system/frontEnds/AssetFrontEnd.hx",645,0x11085f97)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void AssetFrontEnd_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_89_new)
HXDLIN(  89)		this->defaultSoundExtension = HX_(".ogg",e1,64,bc,1e);
            	}

Dynamic AssetFrontEnd_obj::__CreateEmpty() { return new AssetFrontEnd_obj; }

void *AssetFrontEnd_obj::_hx_vtable = 0;

Dynamic AssetFrontEnd_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AssetFrontEnd_obj > _hx_result = new AssetFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x773bbccc;
}

HX_BEGIN_DEFAULT_FUNC(__default_getAssetUnsafe,AssetFrontEnd_obj)
 ::Dynamic _hx_run(::String id,::String type,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_107___default_getAssetUnsafe)
HXDLIN( 107)		return ( ( ::flixel::_hx_system::frontEnds::AssetFrontEnd)(__this) )->getOpenflAssetUnsafe(id,type,useCache);
            	}
HX_END_LOCAL_FUNC3(return )
HX_END_DEFAULT_FUNC

 ::Dynamic AssetFrontEnd_obj::getOpenflAssetUnsafe(::String id,::String type,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_156_getOpenflAssetUnsafe)
HXDLIN( 156)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("binary",01,bc,0b,ed)) ){
HXLINE( 159)			return ::openfl::utils::Assets_obj::getBytes(id);
HXDLIN( 159)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("font",cf,5d,c0,43)) ){
HXLINE( 162)			return ::openfl::utils::Assets_obj::getFont(id,useCache);
HXDLIN( 162)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("image",5b,1f,69,bd)) ){
HXLINE( 160)			return ::openfl::utils::Assets_obj::getBitmapData(id,useCache);
HXDLIN( 160)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("sound",cf,8c,cc,80)) ){
HXLINE( 161)			return ::openfl::utils::Assets_obj::getSound(id,useCache);
HXDLIN( 161)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE( 158)			return ::openfl::utils::Assets_obj::getText(id);
HXDLIN( 158)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getOpenflAssetUnsafe,return )

 ::Dynamic AssetFrontEnd_obj::getAsset(::String id,::String type,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_175_getAsset)
HXLINE( 183)		if (( (bool)(this->exists(id,type)) )) {
HXLINE( 185)			if (( (bool)(this->isLocal(id,type,null())) )) {
HXLINE( 186)				return this->getAssetUnsafe(id,type,useCache);
            			}
HXLINE( 188)			{
HXLINE( 188)				if (::hx::IsNull( logStyle )) {
HXLINE( 188)					logStyle = ::flixel::_hx_system::debug::log::LogStyle_obj::ERROR;
            				}
HXDLIN( 188)				::flixel::FlxG_obj::log->advanced(((((HX_("",00,00,00,00) + type) + HX_(" asset \"",d2,25,2a,5d)) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),logStyle,null(),::hx::SourceInfo(HX_("flixel/system/frontEnds/AssetFrontEnd.hx",97,5f,08,11),180,HX_("flixel.system.frontEnds.AssetFrontEnd",48,2c,da,08),HX_("getAsset",7a,79,10,86)));
            			}
HXLINE( 189)			return null();
            		}
HXLINE( 192)		{
HXLINE( 192)			if (::hx::IsNull( logStyle )) {
HXLINE( 192)				logStyle = ::flixel::_hx_system::debug::log::LogStyle_obj::ERROR;
            			}
HXDLIN( 192)			::flixel::FlxG_obj::log->advanced(((((HX_("Could not find a ",5a,92,c9,f3) + type) + HX_(" asset with ID '",ac,22,56,0f)) + id) + HX_("'.",27,22,00,00)),logStyle,null(),::hx::SourceInfo(HX_("flixel/system/frontEnds/AssetFrontEnd.hx",97,5f,08,11),180,HX_("flixel.system.frontEnds.AssetFrontEnd",48,2c,da,08),HX_("getAsset",7a,79,10,86)));
            		}
HXLINE( 193)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(AssetFrontEnd_obj,getAsset,return )

HX_BEGIN_DEFAULT_FUNC(__default_loadAsset,AssetFrontEnd_obj)
 ::lime::app::Future _hx_run(::String id,::String type,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_207___default_loadAsset)
HXDLIN( 207)		return ( ( ::flixel::_hx_system::frontEnds::AssetFrontEnd)(__this) )->loadOpenflAsset(id,type,useCache);
            	}
HX_END_LOCAL_FUNC3(return )
HX_END_DEFAULT_FUNC

 ::lime::app::Future AssetFrontEnd_obj::loadOpenflAsset(::String id,::String type,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_221_loadOpenflAsset)
HXDLIN( 221)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("binary",01,bc,0b,ed)) ){
HXLINE( 224)			return ::openfl::utils::Assets_obj::loadBytes(id);
HXDLIN( 224)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("font",cf,5d,c0,43)) ){
HXLINE( 227)			return ::openfl::utils::Assets_obj::loadFont(id,useCache);
HXDLIN( 227)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("image",5b,1f,69,bd)) ){
HXLINE( 225)			return ::openfl::utils::Assets_obj::loadBitmapData(id,useCache);
HXDLIN( 225)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("sound",cf,8c,cc,80)) ){
HXLINE( 226)			return ::openfl::utils::Assets_obj::loadSound(id,useCache);
HXDLIN( 226)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE( 223)			return ::openfl::utils::Assets_obj::loadText(id);
HXDLIN( 223)			goto _hx_goto_6;
            		}
            		_hx_goto_6:;
HXLINE( 221)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,loadOpenflAsset,return )

HX_BEGIN_DEFAULT_FUNC(__default_exists,AssetFrontEnd_obj)
bool _hx_run(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_247___default_exists)
HXDLIN( 247)		return ::openfl::utils::Assets_obj::exists(id,::flixel::_hx_system::frontEnds::_AssetFrontEnd::FlxAssetType_Impl__obj::toOpenFlType(type));
            	}
HX_END_LOCAL_FUNC2(return )
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_isLocal,AssetFrontEnd_obj)
bool _hx_run(::String id,::String type,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_275___default_isLocal)
HXDLIN( 275)		return ::openfl::utils::Assets_obj::isLocal(id,::flixel::_hx_system::frontEnds::_AssetFrontEnd::FlxAssetType_Impl__obj::toOpenFlType(type),useCache);
            	}
HX_END_LOCAL_FUNC3(return )
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_list,AssetFrontEnd_obj)
::Array< ::String > _hx_run(::String type){
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_295___default_list)
HXDLIN( 295)		return ::openfl::utils::Assets_obj::list(::flixel::_hx_system::frontEnds::_AssetFrontEnd::FlxAssetType_Impl__obj::toOpenFlType(type));
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

 ::openfl::display::BitmapData AssetFrontEnd_obj::getBitmapDataUnsafe(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(false);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_324_getBitmapDataUnsafe)
HXDLIN( 324)		return ( ( ::openfl::display::BitmapData)(this->getAssetUnsafe(id,HX_("image",5b,1f,69,bd),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,getBitmapDataUnsafe,return )

 ::openfl::display::BitmapData AssetFrontEnd_obj::getBitmapData(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(false);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_336_getBitmapData)
HXDLIN( 336)		return ( ( ::openfl::display::BitmapData)(this->getAsset(id,HX_("image",5b,1f,69,bd),useCache,logStyle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getBitmapData,return )

 ::openfl::media::Sound AssetFrontEnd_obj::getSoundUnsafe(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_348_getSoundUnsafe)
HXDLIN( 348)		return ( ( ::openfl::media::Sound)(this->getAssetUnsafe(id,HX_("sound",cf,8c,cc,80),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,getSoundUnsafe,return )

 ::openfl::media::Sound AssetFrontEnd_obj::getSound(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_363_getSound)
HXDLIN( 363)		return ( ( ::openfl::media::Sound)(this->getAsset(id,HX_("sound",cf,8c,cc,80),useCache,logStyle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getSound,return )

 ::openfl::media::Sound AssetFrontEnd_obj::getSoundAddExt(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_376_getSoundAddExt)
HXDLIN( 376)		::String id1;
HXDLIN( 376)		bool id2;
HXDLIN( 376)		bool id3;
HXDLIN( 376)		if (!(::StringTools_obj::endsWith(id,HX_(".mp3",02,e8,ba,1e)))) {
HXDLIN( 376)			id3 = !(::StringTools_obj::endsWith(id,HX_(".ogg",e1,64,bc,1e)));
            		}
            		else {
HXDLIN( 376)			id3 = false;
            		}
HXDLIN( 376)		if (id3) {
HXDLIN( 376)			id2 = !(::StringTools_obj::endsWith(id,HX_(".wav",be,71,c2,1e)));
            		}
            		else {
HXDLIN( 376)			id2 = false;
            		}
HXDLIN( 376)		if (id2) {
HXDLIN( 376)			id1 = (id + this->defaultSoundExtension);
            		}
            		else {
HXDLIN( 376)			id1 = id;
            		}
HXDLIN( 376)		return ( ( ::openfl::media::Sound)(this->getAsset(id1,HX_("sound",cf,8c,cc,80),useCache,logStyle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getSoundAddExt,return )

::String AssetFrontEnd_obj::addSoundExtIf(::String id){
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_384_addSoundExtIf)
HXDLIN( 384)		return id;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetFrontEnd_obj,addSoundExtIf,return )

::String AssetFrontEnd_obj::addSoundExt(::String id){
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_389_addSoundExt)
HXLINE( 390)		bool _hx_tmp;
HXDLIN( 390)		bool _hx_tmp1;
HXDLIN( 390)		if (!(::StringTools_obj::endsWith(id,HX_(".mp3",02,e8,ba,1e)))) {
HXLINE( 390)			_hx_tmp1 = !(::StringTools_obj::endsWith(id,HX_(".ogg",e1,64,bc,1e)));
            		}
            		else {
HXLINE( 390)			_hx_tmp1 = false;
            		}
HXDLIN( 390)		if (_hx_tmp1) {
HXLINE( 390)			_hx_tmp = !(::StringTools_obj::endsWith(id,HX_(".wav",be,71,c2,1e)));
            		}
            		else {
HXLINE( 390)			_hx_tmp = false;
            		}
HXDLIN( 390)		if (_hx_tmp) {
HXLINE( 391)			return (id + this->defaultSoundExtension);
            		}
HXLINE( 393)		return id;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetFrontEnd_obj,addSoundExt,return )

::String AssetFrontEnd_obj::getTextUnsafe(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_407_getTextUnsafe)
HXDLIN( 407)		return ( (::String)(this->getAssetUnsafe(id,HX_("text",ad,cc,f9,4c),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,getTextUnsafe,return )

::String AssetFrontEnd_obj::getText(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_421_getText)
HXDLIN( 421)		return ( (::String)(this->getAsset(id,HX_("text",ad,cc,f9,4c),useCache,logStyle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getText,return )

 ::Xml AssetFrontEnd_obj::getXmlUnsafe(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_434_getXmlUnsafe)
HXLINE( 435)		::String text = ( (::String)(this->getAssetUnsafe(id,HX_("text",ad,cc,f9,4c),useCache)) );
HXLINE( 436)		if (::hx::IsNotNull( text )) {
HXLINE( 436)			return ::Xml_obj::parse(text);
            		}
            		else {
HXLINE( 436)			return null();
            		}
HXDLIN( 436)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,getXmlUnsafe,return )

 ::Xml AssetFrontEnd_obj::getXml(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_449_getXml)
HXLINE( 450)		::String text = ( (::String)(this->getAsset(id,HX_("text",ad,cc,f9,4c),useCache,logStyle)) );
HXLINE( 451)		if (::hx::IsNotNull( text )) {
HXLINE( 451)			return ::Xml_obj::parse(text);
            		}
            		else {
HXLINE( 451)			return null();
            		}
HXDLIN( 451)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getXml,return )

 ::Dynamic AssetFrontEnd_obj::getJsonUnsafe(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_464_getJsonUnsafe)
HXLINE( 465)		::String text = ( (::String)(this->getAssetUnsafe(id,HX_("text",ad,cc,f9,4c),useCache)) );
HXLINE( 466)		if (::hx::IsNotNull( text )) {
HXLINE( 466)			return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,text)->doParse();
            		}
            		else {
HXLINE( 466)			return null();
            		}
HXDLIN( 466)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,getJsonUnsafe,return )

 ::Dynamic AssetFrontEnd_obj::getJson(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_479_getJson)
HXLINE( 480)		::String text = ( (::String)(this->getAsset(id,HX_("text",ad,cc,f9,4c),useCache,logStyle)) );
HXLINE( 481)		if (::hx::IsNotNull( text )) {
HXLINE( 481)			return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,text)->doParse();
            		}
            		else {
HXLINE( 481)			return null();
            		}
HXDLIN( 481)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getJson,return )

 ::haxe::io::Bytes AssetFrontEnd_obj::getBytesUnsafe(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_495_getBytesUnsafe)
HXDLIN( 495)		return ( ( ::haxe::io::Bytes)(this->getAssetUnsafe(id,HX_("binary",01,bc,0b,ed),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,getBytesUnsafe,return )

 ::haxe::io::Bytes AssetFrontEnd_obj::getBytes(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_509_getBytes)
HXDLIN( 509)		return ( ( ::haxe::io::Bytes)(this->getAsset(id,HX_("binary",01,bc,0b,ed),useCache,null())) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getBytes,return )

 ::openfl::text::Font AssetFrontEnd_obj::getFontUnsafe(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_521_getFontUnsafe)
HXDLIN( 521)		return ( ( ::openfl::text::Font)(this->getAssetUnsafe(id,HX_("font",cf,5d,c0,43),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,getFontUnsafe,return )

 ::openfl::text::Font AssetFrontEnd_obj::getFont(::String id,::hx::Null< bool >  __o_useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_533_getFont)
HXDLIN( 533)		return ( ( ::openfl::text::Font)(this->getAsset(id,HX_("font",cf,5d,c0,43),useCache,logStyle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetFrontEnd_obj,getFont,return )

 ::lime::app::Future AssetFrontEnd_obj::loadBitmapData(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(false);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_545_loadBitmapData)
HXDLIN( 545)		return ( ( ::lime::app::Future)(this->loadAsset(id,HX_("image",5b,1f,69,bd),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,loadBitmapData,return )

 ::lime::app::Future AssetFrontEnd_obj::loadSound(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_557_loadSound)
HXDLIN( 557)		return ( ( ::lime::app::Future)(this->loadAsset(id,HX_("sound",cf,8c,cc,80),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,loadSound,return )

 ::lime::app::Future AssetFrontEnd_obj::loadText(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_571_loadText)
HXDLIN( 571)		return ( ( ::lime::app::Future)(this->loadAsset(id,HX_("text",ad,cc,f9,4c),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,loadText,return )

 ::lime::app::Future AssetFrontEnd_obj::loadXml(::String id,::hx::Null< bool >  __o_useCache){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,converter, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_585_loadXml)
HXDLIN( 585)			 ::lime::app::Promise promise1 = promise;
HXDLIN( 585)			promise1->complete(converter(data));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run( ::Dynamic error){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_585_loadXml)
HXDLIN( 585)			promise->error(error);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::lime::app::Promise,promise) HXARGC(2)
            		void _hx_run(int progress,int total){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_585_loadXml)
HXDLIN( 585)			promise->progress(progress,total);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_585_loadXml)
HXDLIN( 585)		 ::lime::app::Future future = ( ( ::lime::app::Future)(this->loadAsset(id,HX_("text",ad,cc,f9,4c),useCache)) );
HXDLIN( 585)		 ::Dynamic converter = this->parseXml_dyn();
HXDLIN( 585)		 ::lime::app::Promise promise =  ::lime::app::Promise_obj::__alloc( HX_CTX );
HXDLIN( 585)		future->onComplete( ::Dynamic(new _hx_Closure_0(converter,promise)));
HXDLIN( 585)		future->onError( ::Dynamic(new _hx_Closure_1(promise)));
HXDLIN( 585)		future->onProgress( ::Dynamic(new _hx_Closure_2(promise)));
HXDLIN( 585)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,loadXml,return )

 ::lime::app::Future AssetFrontEnd_obj::loadJson(::String id,::hx::Null< bool >  __o_useCache){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,converter, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_599_loadJson)
HXDLIN( 599)			 ::lime::app::Promise promise1 = promise;
HXDLIN( 599)			promise1->complete(converter(data));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run( ::Dynamic error){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_599_loadJson)
HXDLIN( 599)			promise->error(error);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::lime::app::Promise,promise) HXARGC(2)
            		void _hx_run(int progress,int total){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_599_loadJson)
HXDLIN( 599)			promise->progress(progress,total);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_599_loadJson)
HXDLIN( 599)		 ::lime::app::Future future = ( ( ::lime::app::Future)(this->loadAsset(id,HX_("text",ad,cc,f9,4c),useCache)) );
HXDLIN( 599)		 ::Dynamic converter = this->parseJson_dyn();
HXDLIN( 599)		 ::lime::app::Promise promise =  ::lime::app::Promise_obj::__alloc( HX_CTX );
HXDLIN( 599)		future->onComplete( ::Dynamic(new _hx_Closure_0(converter,promise)));
HXDLIN( 599)		future->onError( ::Dynamic(new _hx_Closure_1(promise)));
HXDLIN( 599)		future->onProgress( ::Dynamic(new _hx_Closure_2(promise)));
HXDLIN( 599)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,loadJson,return )

 ::lime::app::Future AssetFrontEnd_obj::loadBytes(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_613_loadBytes)
HXDLIN( 613)		return ( ( ::lime::app::Future)(this->loadAsset(id,HX_("binary",01,bc,0b,ed),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,loadBytes,return )

 ::lime::app::Future AssetFrontEnd_obj::loadFont(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_625_loadFont)
HXDLIN( 625)		return ( ( ::lime::app::Future)(this->loadAsset(id,HX_("font",cf,5d,c0,43),useCache)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,loadFont,return )

 ::Dynamic AssetFrontEnd_obj::parseJson(::String jsonText){
            	HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_633_parseJson)
HXDLIN( 633)		return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,jsonText)->doParse();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetFrontEnd_obj,parseJson,return )

 ::Xml AssetFrontEnd_obj::parseXml(::String xmlText){
            	HX_STACKFRAME(&_hx_pos_043156804960a46d_641_parseXml)
HXDLIN( 641)		return ::Xml_obj::parse(xmlText);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetFrontEnd_obj,parseXml,return )

 ::lime::app::Future AssetFrontEnd_obj::wrapFuture( ::lime::app::Future future, ::Dynamic converter){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,converter, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run( ::Dynamic data){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_648_wrapFuture)
HXLINE( 648)			 ::lime::app::Promise promise1 = promise;
HXDLIN( 648)			promise1->complete(converter(data));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run( ::Dynamic error){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_649_wrapFuture)
HXLINE( 649)			promise->error(error);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::lime::app::Promise,promise) HXARGC(2)
            		void _hx_run(int progress,int total){
            			HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_650_wrapFuture)
HXLINE( 650)			promise->progress(progress,total);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_043156804960a46d_645_wrapFuture)
HXLINE( 646)		 ::lime::app::Promise promise =  ::lime::app::Promise_obj::__alloc( HX_CTX );
HXLINE( 648)		future->onComplete( ::Dynamic(new _hx_Closure_0(converter,promise)));
HXLINE( 649)		future->onError( ::Dynamic(new _hx_Closure_1(promise)));
HXLINE( 650)		future->onProgress( ::Dynamic(new _hx_Closure_2(promise)));
HXLINE( 652)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetFrontEnd_obj,wrapFuture,return )


void AssetFrontEnd_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,AssetFrontEnd_obj *_hx_obj) {
	if (!_hx_obj->list.mPtr) _hx_obj->list = new __default_list(_hx_obj);
	if (!_hx_obj->isLocal.mPtr) _hx_obj->isLocal = new __default_isLocal(_hx_obj);
	if (!_hx_obj->exists.mPtr) _hx_obj->exists = new __default_exists(_hx_obj);
	if (!_hx_obj->loadAsset.mPtr) _hx_obj->loadAsset = new __default_loadAsset(_hx_obj);
	if (!_hx_obj->getAssetUnsafe.mPtr) _hx_obj->getAssetUnsafe = new __default_getAssetUnsafe(_hx_obj);
}
::hx::ObjectPtr< AssetFrontEnd_obj > AssetFrontEnd_obj::__new() {
	::hx::ObjectPtr< AssetFrontEnd_obj > __this = new AssetFrontEnd_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AssetFrontEnd_obj > AssetFrontEnd_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AssetFrontEnd_obj *__this = (AssetFrontEnd_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AssetFrontEnd_obj), true, "flixel.system.frontEnds.AssetFrontEnd"));
	*(void **)__this = AssetFrontEnd_obj::_hx_vtable;
	flixel::_hx_system::frontEnds::AssetFrontEnd_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct();
	return __this;
}

AssetFrontEnd_obj::AssetFrontEnd_obj()
{
	list = new __default_list(this);
	isLocal = new __default_isLocal(this);
	exists = new __default_exists(this);
	loadAsset = new __default_loadAsset(this);
	getAssetUnsafe = new __default_getAssetUnsafe(this);
}

void AssetFrontEnd_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetFrontEnd);
	HX_MARK_MEMBER_NAME(defaultSoundExtension,"defaultSoundExtension");
	HX_MARK_MEMBER_NAME(getAssetUnsafe,"getAssetUnsafe");
	HX_MARK_MEMBER_NAME(loadAsset,"loadAsset");
	HX_MARK_MEMBER_NAME(exists,"exists");
	HX_MARK_MEMBER_NAME(isLocal,"isLocal");
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_END_CLASS();
}

void AssetFrontEnd_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(defaultSoundExtension,"defaultSoundExtension");
	HX_VISIT_MEMBER_NAME(getAssetUnsafe,"getAssetUnsafe");
	HX_VISIT_MEMBER_NAME(loadAsset,"loadAsset");
	HX_VISIT_MEMBER_NAME(exists,"exists");
	HX_VISIT_MEMBER_NAME(isLocal,"isLocal");
	HX_VISIT_MEMBER_NAME(list,"list");
}

::hx::Val AssetFrontEnd_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return ::hx::Val( list ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists ); }
		if (HX_FIELD_EQ(inName,"getXml") ) { return ::hx::Val( getXml_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isLocal") ) { return ::hx::Val( isLocal ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return ::hx::Val( getText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getJson") ) { return ::hx::Val( getJson_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFont") ) { return ::hx::Val( getFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadXml") ) { return ::hx::Val( loadXml_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getAsset") ) { return ::hx::Val( getAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSound") ) { return ::hx::Val( getSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBytes") ) { return ::hx::Val( getBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return ::hx::Val( loadText_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadFont") ) { return ::hx::Val( loadFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseXml") ) { return ::hx::Val( parseXml_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadAsset") ) { return ::hx::Val( loadAsset ); }
		if (HX_FIELD_EQ(inName,"loadSound") ) { return ::hx::Val( loadSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return ::hx::Val( loadBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseJson") ) { return ::hx::Val( parseJson_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wrapFuture") ) { return ::hx::Val( wrapFuture_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addSoundExt") ) { return ::hx::Val( addSoundExt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getXmlUnsafe") ) { return ::hx::Val( getXmlUnsafe_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { return ::hx::Val( getBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSoundExtIf") ) { return ::hx::Val( addSoundExtIf_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextUnsafe") ) { return ::hx::Val( getTextUnsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"getJsonUnsafe") ) { return ::hx::Val( getJsonUnsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFontUnsafe") ) { return ::hx::Val( getFontUnsafe_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAssetUnsafe") ) { return ::hx::Val( getAssetUnsafe ); }
		if (HX_FIELD_EQ(inName,"getSoundUnsafe") ) { return ::hx::Val( getSoundUnsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSoundAddExt") ) { return ::hx::Val( getSoundAddExt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBytesUnsafe") ) { return ::hx::Val( getBytesUnsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadBitmapData") ) { return ::hx::Val( loadBitmapData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadOpenflAsset") ) { return ::hx::Val( loadOpenflAsset_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getBitmapDataUnsafe") ) { return ::hx::Val( getBitmapDataUnsafe_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getOpenflAssetUnsafe") ) { return ::hx::Val( getOpenflAssetUnsafe_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultSoundExtension") ) { return ::hx::Val( defaultSoundExtension ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AssetFrontEnd_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { exists=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isLocal") ) { isLocal=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadAsset") ) { loadAsset=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAssetUnsafe") ) { getAssetUnsafe=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultSoundExtension") ) { defaultSoundExtension=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("defaultSoundExtension",51,31,33,98));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AssetFrontEnd_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(AssetFrontEnd_obj,defaultSoundExtension),HX_("defaultSoundExtension",51,31,33,98)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AssetFrontEnd_obj,getAssetUnsafe),HX_("getAssetUnsafe",40,c9,22,87)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AssetFrontEnd_obj,loadAsset),HX_("loadAsset",ea,b5,70,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AssetFrontEnd_obj,exists),HX_("exists",dc,1d,e0,bf)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AssetFrontEnd_obj,isLocal),HX_("isLocal",21,6d,76,15)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AssetFrontEnd_obj,list),HX_("list",5e,1c,b3,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AssetFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetFrontEnd_obj_sMemberFields[] = {
	HX_("defaultSoundExtension",51,31,33,98),
	HX_("getAssetUnsafe",40,c9,22,87),
	HX_("getOpenflAssetUnsafe",10,6b,2a,ed),
	HX_("getAsset",7a,79,10,86),
	HX_("loadAsset",ea,b5,70,41),
	HX_("loadOpenflAsset",ba,0f,a7,8b),
	HX_("exists",dc,1d,e0,bf),
	HX_("isLocal",21,6d,76,15),
	HX_("list",5e,1c,b3,47),
	HX_("getBitmapDataUnsafe",75,a7,96,96),
	HX_("getBitmapData",ef,11,33,90),
	HX_("getSoundUnsafe",5f,dd,ed,a4),
	HX_("getSound",59,9c,a3,e0),
	HX_("getSoundAddExt",39,76,c9,d9),
	HX_("addSoundExtIf",10,d5,b0,4a),
	HX_("addSoundExt",53,1a,f7,4a),
	HX_("getTextUnsafe",e9,60,85,fd),
	HX_("getText",63,7c,7c,1f),
	HX_("getXmlUnsafe",e7,7d,bf,74),
	HX_("getXml",e1,a6,2a,a3),
	HX_("getJsonUnsafe",a4,a4,89,07),
	HX_("getJson",de,f1,ea,18),
	HX_("getBytesUnsafe",fb,f5,1b,33),
	HX_("getBytes",f5,17,6f,1d),
	HX_("getFontUnsafe",8b,77,e8,7a),
	HX_("getFont",85,0d,43,16),
	HX_("loadBitmapData",7f,bf,71,ca),
	HX_("loadSound",c9,d8,03,9c),
	HX_("loadText",f3,9d,99,bd),
	HX_("loadXml",51,e7,e5,08),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadBytes",65,54,cf,d8),
	HX_("loadFont",15,2f,60,b4),
	HX_("parseJson",fb,93,0e,ce),
	HX_("parseXml",64,77,7d,d6),
	HX_("wrapFuture",ad,b9,82,d7),
	::String(null()) };

::hx::Class AssetFrontEnd_obj::__mClass;

void AssetFrontEnd_obj::__register()
{
	AssetFrontEnd_obj _hx_dummy;
	AssetFrontEnd_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.frontEnds.AssetFrontEnd",48,2c,da,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AssetFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AssetFrontEnd_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetFrontEnd_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds

// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_bmfont__BMFontXml_AttribAccess_Impl_
#include <flixel/graphics/frames/bmfont/_BMFontXml/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_123_stringHelper,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","stringHelper",0xc4e5c94c,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.stringHelper","flixel/graphics/frames/bmfont/BMFontXml.hx",123,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_143_stringSafe,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","stringSafe",0x562f75ab,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.stringSafe","flixel/graphics/frames/bmfont/BMFontXml.hx",143,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_148_string,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","string",0xc3e2553e,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.string","flixel/graphics/frames/bmfont/BMFontXml.hx",148,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_153_stringWarn,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","stringWarn",0x58d45aa4,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.stringWarn","flixel/graphics/frames/bmfont/BMFontXml.hx",153,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_158_stringError,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","stringError",0x0f0125aa,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.stringError","flixel/graphics/frames/bmfont/BMFontXml.hx",158,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_162_intHelper,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","intHelper",0x0f4b7170,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.intHelper","flixel/graphics/frames/bmfont/BMFontXml.hx",162,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_182_intSafe,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","intSafe",0xb4660ccf,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.intSafe","flixel/graphics/frames/bmfont/BMFontXml.hx",182,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_187_int,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","int",0x096d8a62,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.int","flixel/graphics/frames/bmfont/BMFontXml.hx",187,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_192_intWarn,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","intWarn",0xb70af1c8,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.intWarn","flixel/graphics/frames/bmfont/BMFontXml.hx",192,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_197_intError,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","intError",0x208ece06,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.intError","flixel/graphics/frames/bmfont/BMFontXml.hx",197,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_201_boolHelper,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","boolHelper",0xfbe45825,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.boolHelper","flixel/graphics/frames/bmfont/BMFontXml.hx",201,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_221_boolSafe,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","boolSafe",0x1a106c44,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.boolSafe","flixel/graphics/frames/bmfont/BMFontXml.hx",221,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_226_bool,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","bool",0x31cbcb57,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.bool","flixel/graphics/frames/bmfont/BMFontXml.hx",226,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_231_boolWarn,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","boolWarn",0x1cb5513d,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.boolWarn","flixel/graphics/frames/bmfont/BMFontXml.hx",231,0x6e0c2cde)
HX_LOCAL_STACK_FRAME(_hx_pos_2d940624589f0a37_236_boolError,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_","boolError",0xaff7f4f1,"flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_.boolError","flixel/graphics/frames/bmfont/BMFontXml.hx",236,0x6e0c2cde)
namespace flixel{
namespace graphics{
namespace frames{
namespace bmfont{
namespace _BMFontXml{

void AttribAccess_Impl__obj::__construct() { }

Dynamic AttribAccess_Impl__obj::__CreateEmpty() { return new AttribAccess_Impl__obj; }

void *AttribAccess_Impl__obj::_hx_vtable = 0;

Dynamic AttribAccess_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AttribAccess_Impl__obj > _hx_result = new AttribAccess_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AttribAccess_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x591d1eb3;
}

::String AttribAccess_Impl__obj::stringHelper( ::Xml this1,::String name, ::Dynamic invalid,::String backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_123_stringHelper)
HXLINE( 124)		::String value = backup;
HXLINE( 125)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXLINE( 127)			if (::hx::IsNotNull( invalid )) {
HXLINE( 128)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),128,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            			}
            		}
            		else {
HXLINE( 132)			::String v = this1->get(name);
HXLINE( 133)			if (::hx::IsNotNull( v )) {
HXLINE( 134)				value = v;
            			}
            			else {
HXLINE( 135)				if (::hx::IsNotNull( invalid )) {
HXLINE( 136)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXLINE( 136)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 136)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),136,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            				}
            			}
            		}
HXLINE( 138)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(AttribAccess_Impl__obj,stringHelper,return )

::String AttribAccess_Impl__obj::stringSafe( ::Xml this1,::String name,::String backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_143_stringSafe)
HXDLIN( 143)		 ::Dynamic invalid = null();
HXDLIN( 143)		::String value = backup;
HXDLIN( 143)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 143)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 143)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),128,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            			}
            		}
            		else {
HXDLIN( 143)			::String v = this1->get(name);
HXDLIN( 143)			if (::hx::IsNotNull( v )) {
HXDLIN( 143)				value = v;
            			}
            			else {
HXDLIN( 143)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 143)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 143)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 143)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),136,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            				}
            			}
            		}
HXDLIN( 143)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,stringSafe,return )

::String AttribAccess_Impl__obj::string( ::Xml this1,::String name){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		void _hx_run(::String msg, ::Dynamic _){
            			HX_STACKFRAME(&_hx_pos_2d940624589f0a37_148_string)
HXDLIN( 148)			HX_STACK_DO_THROW(msg);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_148_string)
HXDLIN( 148)		 ::Dynamic invalid =  ::Dynamic(new _hx_Closure_0());
HXDLIN( 148)		::String backup = null();
HXDLIN( 148)		::String value = backup;
HXDLIN( 148)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 148)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 148)				HX_STACK_DO_THROW((HX_("Cannot access document attribute ",ca,30,fe,c0) + name));
            			}
            		}
            		else {
HXDLIN( 148)			::String v = this1->get(name);
HXDLIN( 148)			if (::hx::IsNotNull( v )) {
HXDLIN( 148)				value = v;
            			}
            			else {
HXDLIN( 148)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 148)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 148)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 148)					HX_STACK_DO_THROW((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name));
            				}
            			}
            		}
HXDLIN( 148)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AttribAccess_Impl__obj,string,return )

::String AttribAccess_Impl__obj::stringWarn( ::Xml this1,::String name,::String backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_153_stringWarn)
HXDLIN( 153)		 ::Dynamic invalid = ::flixel::FlxG_obj::log->warn_dyn();
HXDLIN( 153)		::String value = backup;
HXDLIN( 153)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 153)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 153)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),128,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            			}
            		}
            		else {
HXDLIN( 153)			::String v = this1->get(name);
HXDLIN( 153)			if (::hx::IsNotNull( v )) {
HXDLIN( 153)				value = v;
            			}
            			else {
HXDLIN( 153)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 153)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 153)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 153)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),136,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            				}
            			}
            		}
HXDLIN( 153)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,stringWarn,return )

::String AttribAccess_Impl__obj::stringError( ::Xml this1,::String name,::String backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_158_stringError)
HXDLIN( 158)		 ::Dynamic invalid = ::flixel::FlxG_obj::log->error_dyn();
HXDLIN( 158)		::String value = backup;
HXDLIN( 158)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 158)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 158)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),128,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            			}
            		}
            		else {
HXDLIN( 158)			::String v = this1->get(name);
HXDLIN( 158)			if (::hx::IsNotNull( v )) {
HXDLIN( 158)				value = v;
            			}
            			else {
HXDLIN( 158)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 158)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 158)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 158)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),136,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("stringHelper",1f,0d,a7,9b)));
            				}
            			}
            		}
HXDLIN( 158)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,stringError,return )

int AttribAccess_Impl__obj::intHelper( ::Xml this1,::String name, ::Dynamic invalid,int backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_162_intHelper)
HXLINE( 163)		int value = backup;
HXLINE( 164)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXLINE( 166)			if (::hx::IsNotNull( invalid )) {
HXLINE( 167)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),167,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            			}
            		}
            		else {
HXLINE( 171)			::String v = this1->get(name);
HXLINE( 172)			if (::hx::IsNotNull( v )) {
HXLINE( 173)				value = ( (int)(::Std_obj::parseInt(v)) );
            			}
            			else {
HXLINE( 174)				if (::hx::IsNotNull( invalid )) {
HXLINE( 175)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXLINE( 175)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 175)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),175,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            				}
            			}
            		}
HXLINE( 177)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(AttribAccess_Impl__obj,intHelper,return )

int AttribAccess_Impl__obj::intSafe( ::Xml this1,::String name,int backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_182_intSafe)
HXDLIN( 182)		 ::Dynamic invalid = null();
HXDLIN( 182)		int value = backup;
HXDLIN( 182)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 182)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 182)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),167,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            			}
            		}
            		else {
HXDLIN( 182)			::String v = this1->get(name);
HXDLIN( 182)			if (::hx::IsNotNull( v )) {
HXDLIN( 182)				value = ( (int)(::Std_obj::parseInt(v)) );
            			}
            			else {
HXDLIN( 182)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 182)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 182)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 182)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),175,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            				}
            			}
            		}
HXDLIN( 182)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,intSafe,return )

int AttribAccess_Impl__obj::_hx_int( ::Xml this1,::String name){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		void _hx_run(::String msg, ::Dynamic _){
            			HX_STACKFRAME(&_hx_pos_2d940624589f0a37_187_int)
HXDLIN( 187)			HX_STACK_DO_THROW(msg);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_187_int)
HXDLIN( 187)		 ::Dynamic invalid =  ::Dynamic(new _hx_Closure_0());
HXDLIN( 187)		int value = 0;
HXDLIN( 187)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 187)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 187)				HX_STACK_DO_THROW((HX_("Cannot access document attribute ",ca,30,fe,c0) + name));
            			}
            		}
            		else {
HXDLIN( 187)			::String v = this1->get(name);
HXDLIN( 187)			if (::hx::IsNotNull( v )) {
HXDLIN( 187)				value = ( (int)(::Std_obj::parseInt(v)) );
            			}
            			else {
HXDLIN( 187)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 187)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 187)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 187)					HX_STACK_DO_THROW((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name));
            				}
            			}
            		}
HXDLIN( 187)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AttribAccess_Impl__obj,_hx_int,return )

int AttribAccess_Impl__obj::intWarn( ::Xml this1,::String name,int backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_192_intWarn)
HXDLIN( 192)		 ::Dynamic invalid = ::flixel::FlxG_obj::log->warn_dyn();
HXDLIN( 192)		int value = backup;
HXDLIN( 192)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 192)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 192)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),167,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            			}
            		}
            		else {
HXDLIN( 192)			::String v = this1->get(name);
HXDLIN( 192)			if (::hx::IsNotNull( v )) {
HXDLIN( 192)				value = ( (int)(::Std_obj::parseInt(v)) );
            			}
            			else {
HXDLIN( 192)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 192)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 192)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 192)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),175,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            				}
            			}
            		}
HXDLIN( 192)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,intWarn,return )

int AttribAccess_Impl__obj::intError( ::Xml this1,::String name,int backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_197_intError)
HXDLIN( 197)		 ::Dynamic invalid = ::flixel::FlxG_obj::log->error_dyn();
HXDLIN( 197)		int value = backup;
HXDLIN( 197)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 197)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 197)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),167,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            			}
            		}
            		else {
HXDLIN( 197)			::String v = this1->get(name);
HXDLIN( 197)			if (::hx::IsNotNull( v )) {
HXDLIN( 197)				value = ( (int)(::Std_obj::parseInt(v)) );
            			}
            			else {
HXDLIN( 197)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 197)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 197)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 197)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),175,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("intHelper",bd,db,4d,29)));
            				}
            			}
            		}
HXDLIN( 197)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,intError,return )

bool AttribAccess_Impl__obj::boolHelper( ::Xml this1,::String name, ::Dynamic invalid,bool backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_201_boolHelper)
HXLINE( 202)		bool value = backup;
HXLINE( 203)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXLINE( 205)			if (::hx::IsNotNull( invalid )) {
HXLINE( 206)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),206,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            			}
            		}
            		else {
HXLINE( 210)			::String v = this1->get(name);
HXLINE( 211)			if (::hx::IsNotNull( v )) {
HXLINE( 212)				value = (v != HX_("0",30,00,00,00));
            			}
            			else {
HXLINE( 213)				if (::hx::IsNotNull( invalid )) {
HXLINE( 214)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXLINE( 214)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 214)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),214,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            				}
            			}
            		}
HXLINE( 216)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(AttribAccess_Impl__obj,boolHelper,return )

bool AttribAccess_Impl__obj::boolSafe( ::Xml this1,::String name,bool backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_221_boolSafe)
HXDLIN( 221)		 ::Dynamic invalid = null();
HXDLIN( 221)		bool value = backup;
HXDLIN( 221)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 221)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 221)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),206,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            			}
            		}
            		else {
HXDLIN( 221)			::String v = this1->get(name);
HXDLIN( 221)			if (::hx::IsNotNull( v )) {
HXDLIN( 221)				value = (v != HX_("0",30,00,00,00));
            			}
            			else {
HXDLIN( 221)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 221)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 221)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 221)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),214,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            				}
            			}
            		}
HXDLIN( 221)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,boolSafe,return )

bool AttribAccess_Impl__obj::_hx_bool( ::Xml this1,::String name){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		void _hx_run(::String msg, ::Dynamic _){
            			HX_STACKFRAME(&_hx_pos_2d940624589f0a37_226_bool)
HXDLIN( 226)			HX_STACK_DO_THROW(msg);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_226_bool)
HXDLIN( 226)		 ::Dynamic invalid =  ::Dynamic(new _hx_Closure_0());
HXDLIN( 226)		bool value = false;
HXDLIN( 226)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 226)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 226)				HX_STACK_DO_THROW((HX_("Cannot access document attribute ",ca,30,fe,c0) + name));
            			}
            		}
            		else {
HXDLIN( 226)			::String v = this1->get(name);
HXDLIN( 226)			if (::hx::IsNotNull( v )) {
HXDLIN( 226)				value = (v != HX_("0",30,00,00,00));
            			}
            			else {
HXDLIN( 226)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 226)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 226)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 226)					HX_STACK_DO_THROW((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name));
            				}
            			}
            		}
HXDLIN( 226)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AttribAccess_Impl__obj,_hx_bool,return )

bool AttribAccess_Impl__obj::boolWarn( ::Xml this1,::String name,bool backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_231_boolWarn)
HXDLIN( 231)		 ::Dynamic invalid = ::flixel::FlxG_obj::log->warn_dyn();
HXDLIN( 231)		bool value = backup;
HXDLIN( 231)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 231)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 231)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),206,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            			}
            		}
            		else {
HXDLIN( 231)			::String v = this1->get(name);
HXDLIN( 231)			if (::hx::IsNotNull( v )) {
HXDLIN( 231)				value = (v != HX_("0",30,00,00,00));
            			}
            			else {
HXDLIN( 231)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 231)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 231)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 231)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),214,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            				}
            			}
            		}
HXDLIN( 231)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,boolWarn,return )

bool AttribAccess_Impl__obj::boolError( ::Xml this1,::String name,bool backup){
            	HX_STACKFRAME(&_hx_pos_2d940624589f0a37_236_boolError)
HXDLIN( 236)		 ::Dynamic invalid = ::flixel::FlxG_obj::log->error_dyn();
HXDLIN( 236)		bool value = backup;
HXDLIN( 236)		if ((this1->nodeType == ::Xml_obj::Document)) {
HXDLIN( 236)			if (::hx::IsNotNull( invalid )) {
HXDLIN( 236)				invalid((HX_("Cannot access document attribute ",ca,30,fe,c0) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),206,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            			}
            		}
            		else {
HXDLIN( 236)			::String v = this1->get(name);
HXDLIN( 236)			if (::hx::IsNotNull( v )) {
HXDLIN( 236)				value = (v != HX_("0",30,00,00,00));
            			}
            			else {
HXDLIN( 236)				if (::hx::IsNotNull( invalid )) {
HXDLIN( 236)					if ((this1->nodeType != ::Xml_obj::Element)) {
HXDLIN( 236)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(this1->nodeType)));
            					}
HXDLIN( 236)					invalid((((HX_("",00,00,00,00) + this1->nodeName) + HX_(" is missing attribute ",54,31,39,75)) + name),::hx::SourceInfo(HX_("flixel/graphics/frames/bmfont/BMFontXml.hx",de,2c,0c,6e),214,HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27),HX_("boolHelper",38,f1,fe,a3)));
            				}
            			}
            		}
HXDLIN( 236)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AttribAccess_Impl__obj,boolError,return )


AttribAccess_Impl__obj::AttribAccess_Impl__obj()
{
}

bool AttribAccess_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { outValue = _hx_int_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bool") ) { outValue = _hx_bool_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"string") ) { outValue = string_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"intSafe") ) { outValue = intSafe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intWarn") ) { outValue = intWarn_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"intError") ) { outValue = intError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boolSafe") ) { outValue = boolSafe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boolWarn") ) { outValue = boolWarn_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"intHelper") ) { outValue = intHelper_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boolError") ) { outValue = boolError_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stringSafe") ) { outValue = stringSafe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stringWarn") ) { outValue = stringWarn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boolHelper") ) { outValue = boolHelper_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stringError") ) { outValue = stringError_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stringHelper") ) { outValue = stringHelper_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AttribAccess_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AttribAccess_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class AttribAccess_Impl__obj::__mClass;

static ::String AttribAccess_Impl__obj_sStaticFields[] = {
	HX_("stringHelper",1f,0d,a7,9b),
	HX_("stringSafe",be,0e,4a,fe),
	HX_("string",d1,28,30,11),
	HX_("stringWarn",b7,f3,ee,00),
	HX_("stringError",37,7d,2c,7e),
	HX_("intHelper",bd,db,4d,29),
	HX_("intSafe",dc,59,31,0b),
	HX_("int",ef,0c,50,00),
	HX_("intWarn",d5,3e,d6,0d),
	HX_("intError",59,ec,a6,bb),
	HX_("boolHelper",38,f1,fe,a3),
	HX_("boolSafe",97,8a,28,b5),
	HX_("bool",2a,84,1b,41),
	HX_("boolWarn",90,6f,cd,b7),
	HX_("boolError",3e,5f,fa,c9),
	::String(null())
};

void AttribAccess_Impl__obj::__register()
{
	AttribAccess_Impl__obj _hx_dummy;
	AttribAccess_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.graphics.frames.bmfont._BMFontXml.AttribAccess_Impl_",61,68,03,27);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AttribAccess_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AttribAccess_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< AttribAccess_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AttribAccess_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AttribAccess_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
} // end namespace bmfont
} // end namespace _BMFontXml

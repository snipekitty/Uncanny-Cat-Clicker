// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system__FlxAssets_FlxJsonAsset_Impl_
#include <flixel/system/_FlxAssets/FlxJsonAsset_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system__FlxAssets_FlxXmlAsset_Impl_
#include <flixel/system/_FlxAssets/FlxXmlAsset_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_AssetFrontEnd
#include <flixel/system/frontEnds/AssetFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_AttribAccess_Impl_
#include <haxe/xml/_Access/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasAttribAccess_Impl_
#include <haxe/xml/_Access/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d294561f5bda5770_18_new,"flixel.graphics.frames.FlxAtlasFrames","new",0xed20cbc8,"flixel.graphics.frames.FlxAtlasFrames.new","flixel/graphics/frames/FlxAtlasFrames.hx",18,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_28_destroy,"flixel.graphics.frames.FlxAtlasFrames","destroy",0xdc98fc62,"flixel.graphics.frames.FlxAtlasFrames.destroy","flixel/graphics/frames/FlxAtlasFrames.hx",28,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_425_addBorder,"flixel.graphics.frames.FlxAtlasFrames","addBorder",0x1a31fb55,"flixel.graphics.frames.FlxAtlasFrames.addBorder","flixel/graphics/frames/FlxAtlasFrames.hx",425,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_449_addAtlas,"flixel.graphics.frames.FlxAtlasFrames","addAtlas",0xf89d1f02,"flixel.graphics.frames.FlxAtlasFrames.addAtlas","flixel/graphics/frames/FlxAtlasFrames.hx",449,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_472_concat,"flixel.graphics.frames.FlxAtlasFrames","concat",0x0fd01eac,"flixel.graphics.frames.FlxAtlasFrames.concat","flixel/graphics/frames/FlxAtlasFrames.hx",472,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_50_fromAseprite,"flixel.graphics.frames.FlxAtlasFrames","fromAseprite",0x606b9867,"flixel.graphics.frames.FlxAtlasFrames.fromAseprite","flixel/graphics/frames/FlxAtlasFrames.hx",50,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_67_fromTexturePackerJson,"flixel.graphics.frames.FlxAtlasFrames","fromTexturePackerJson",0xae76e627,"flixel.graphics.frames.FlxAtlasFrames.fromTexturePackerJson","flixel/graphics/frames/FlxAtlasFrames.hx",67,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_107_texturePackerHelper,"flixel.graphics.frames.FlxAtlasFrames","texturePackerHelper",0x397d6e77,"flixel.graphics.frames.FlxAtlasFrames.texturePackerHelper","flixel/graphics/frames/FlxAtlasFrames.hx",107,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_139_fromLibGdx,"flixel.graphics.frames.FlxAtlasFrames","fromLibGdx",0x5ef5c818,"flixel.graphics.frames.FlxAtlasFrames.fromLibGdx","flixel/graphics/frames/FlxAtlasFrames.hx",139,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_218_getDimensions,"flixel.graphics.frames.FlxAtlasFrames","getDimensions",0x0a6267eb,"flixel.graphics.frames.FlxAtlasFrames.getDimensions","flixel/graphics/frames/FlxAtlasFrames.hx",218,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_238_fromSparrow,"flixel.graphics.frames.FlxAtlasFrames","fromSparrow",0x30bf432a,"flixel.graphics.frames.FlxAtlasFrames.fromSparrow","flixel/graphics/frames/FlxAtlasFrames.hx",238,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_316_fromTexturePackerXml,"flixel.graphics.frames.FlxAtlasFrames","fromTexturePackerXml",0x5ca98eb8,"flixel.graphics.frames.FlxAtlasFrames.fromTexturePackerXml","flixel/graphics/frames/FlxAtlasFrames.hx",316,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_365_fromSpriteSheetPacker,"flixel.graphics.frames.FlxAtlasFrames","fromSpriteSheetPacker",0x4fb8a81e,"flixel.graphics.frames.FlxAtlasFrames.fromSpriteSheetPacker","flixel/graphics/frames/FlxAtlasFrames.hx",365,0x501ecb67)
HX_LOCAL_STACK_FRAME(_hx_pos_d294561f5bda5770_411_findFrame,"flixel.graphics.frames.FlxAtlasFrames","findFrame",0xf36e229c,"flixel.graphics.frames.FlxAtlasFrames.findFrame","flixel/graphics/frames/FlxAtlasFrames.hx",411,0x501ecb67)
namespace flixel{
namespace graphics{
namespace frames{

void FlxAtlasFrames_obj::__construct( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxBasePoint border){
            	HX_STACKFRAME(&_hx_pos_d294561f5bda5770_18_new)
HXLINE(  20)		this->usedGraphics = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  24)		super::__construct(parent,::flixel::graphics::frames::FlxFrameCollectionType_obj::ATLAS_dyn(),border);
            	}

Dynamic FlxAtlasFrames_obj::__CreateEmpty() { return new FlxAtlasFrames_obj; }

void *FlxAtlasFrames_obj::_hx_vtable = 0;

Dynamic FlxAtlasFrames_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAtlasFrames_obj > _hx_result = new FlxAtlasFrames_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxAtlasFrames_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1ee6bdec) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1ee6bdec;
	} else {
		return inClassId==(int)0x7907b929;
	}
}

void FlxAtlasFrames_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d294561f5bda5770_28_destroy)
HXLINE(  29)		while((this->usedGraphics->length > 0)){
HXLINE(  30)			this->usedGraphics->shift().StaticCast<  ::flixel::graphics::FlxGraphic >()->decrementUseCount();
            		}
HXLINE(  32)		this->super::destroy();
            	}


 ::flixel::graphics::frames::FlxFramesCollection FlxAtlasFrames_obj::addBorder( ::flixel::math::FlxBasePoint border){
            	HX_GC_STACKFRAME(&_hx_pos_d294561f5bda5770_425_addBorder)
HXLINE( 426)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 426)		point->_inPool = false;
HXDLIN( 426)		 ::flixel::math::FlxBasePoint point1 = point;
HXDLIN( 426)		point1->_weak = true;
HXDLIN( 426)		 ::flixel::math::FlxBasePoint this1 = point1;
HXDLIN( 426)		 ::flixel::math::FlxBasePoint point2 = this->border;
HXDLIN( 426)		{
HXLINE( 426)			Float y = point2->y;
HXDLIN( 426)			this1->set_x((this1->x + point2->x));
HXDLIN( 426)			this1->set_y((this1->y + y));
            		}
HXDLIN( 426)		{
HXLINE( 426)			 ::flixel::math::FlxBasePoint _this = point2;
HXDLIN( 426)			if (_this->_weak) {
HXLINE( 426)				_this->put();
            			}
            		}
HXDLIN( 426)		 ::flixel::math::FlxBasePoint this2 = this1;
HXDLIN( 426)		{
HXLINE( 426)			Float y1 = border->y;
HXDLIN( 426)			this2->set_x((this2->x + border->x));
HXDLIN( 426)			this2->set_y((this2->y + y1));
            		}
HXDLIN( 426)		{
HXLINE( 426)			 ::flixel::math::FlxBasePoint _this1 = border;
HXDLIN( 426)			if (_this1->_weak) {
HXLINE( 426)				_this1->put();
            			}
            		}
HXDLIN( 426)		 ::flixel::math::FlxBasePoint resultBorder = this2;
HXLINE( 427)		 ::flixel::graphics::frames::FlxAtlasFrames atlasFrames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(this->parent,resultBorder);
HXLINE( 428)		if (::hx::IsNotNull( atlasFrames )) {
HXLINE( 429)			return atlasFrames;
            		}
HXLINE( 431)		atlasFrames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,this->parent,resultBorder);
HXLINE( 433)		{
HXLINE( 433)			int _g = 0;
HXDLIN( 433)			::Array< ::Dynamic> _g1 = this->frames;
HXDLIN( 433)			while((_g < _g1->length)){
HXLINE( 433)				 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 433)				_g = (_g + 1);
HXLINE( 434)				atlasFrames->pushFrame(frame->setBorderTo(border,null()),null());
            			}
            		}
HXLINE( 436)		return atlasFrames;
            	}


 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::addAtlas( ::flixel::graphics::frames::FlxAtlasFrames collection,::hx::Null< bool >  __o_overwriteHash){
            		bool overwriteHash = __o_overwriteHash.Default(false);
            	HX_STACKFRAME(&_hx_pos_d294561f5bda5770_449_addAtlas)
HXLINE( 450)		{
HXLINE( 450)			int _g = 0;
HXDLIN( 450)			::Array< ::Dynamic> _g1 = collection->frames;
HXDLIN( 450)			while((_g < _g1->length)){
HXLINE( 450)				 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 450)				_g = (_g + 1);
HXLINE( 451)				this->pushFrame(frame,overwriteHash);
            			}
            		}
HXLINE( 453)		if (!(this->usedGraphics->contains(collection->parent))) {
HXLINE( 455)			this->usedGraphics->push(collection->parent);
HXLINE( 456)			collection->parent->incrementUseCount();
            		}
HXLINE( 459)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,addAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::concat( ::flixel::graphics::frames::FlxAtlasFrames collection,::hx::Null< bool >  __o_overwriteHash){
            		bool overwriteHash = __o_overwriteHash.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d294561f5bda5770_472_concat)
HXLINE( 473)		 ::flixel::graphics::frames::FlxAtlasFrames newCollection =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,this->parent,null());
HXLINE( 474)		newCollection->addAtlas(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 475)		newCollection->addAtlas(::hx::ObjectPtr<OBJ_>(this),overwriteHash);
HXLINE( 476)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,concat,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromAseprite( ::Dynamic source, ::Dynamic description){
            	HX_STACKFRAME(&_hx_pos_d294561f5bda5770_50_fromAseprite)
HXDLIN(  50)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(source,description,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromAseprite,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromTexturePackerJson( ::Dynamic source, ::Dynamic description,::hx::Null< bool >  __o_useFrameDuration){
            		bool useFrameDuration = __o_useFrameDuration.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d294561f5bda5770_67_fromTexturePackerJson)
HXLINE(  68)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(source,false,null());
HXLINE(  69)		if (::hx::IsNull( graphic )) {
HXLINE(  70)			return null();
            		}
HXLINE(  73)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE(  74)		if (::hx::IsNotNull( frames )) {
HXLINE(  75)			return frames;
            		}
HXLINE(  77)		bool _hx_tmp;
HXDLIN(  77)		if (::hx::IsNotNull( graphic )) {
HXLINE(  77)			_hx_tmp = ::hx::IsNull( description );
            		}
            		else {
HXLINE(  77)			_hx_tmp = true;
            		}
HXDLIN(  77)		if (_hx_tmp) {
HXLINE(  78)			return null();
            		}
HXLINE(  80)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE(  82)		 ::Dynamic data = ::flixel::_hx_system::_FlxAssets::FlxJsonAsset_Impl__obj::getData(description);
HXLINE(  84)		if (::Std_obj::isOfType( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)),::hx::ArrayBase::__mClass)) {
HXLINE(  86)			int _g = 0;
HXDLIN(  86)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic))) );
HXDLIN(  86)			while((_g < _g1->length)){
HXLINE(  86)				 ::Dynamic frame = _g1->__get(_g);
HXDLIN(  86)				_g = (_g + 1);
HXLINE(  87)				::flixel::graphics::frames::FlxAtlasFrames_obj::texturePackerHelper(( (::String)(frame->__Field(HX_("filename",c7,2e,6a,77),::hx::paccDynamic)) ),frame,frames,useFrameDuration);
            			}
            		}
            		else {
HXLINE(  92)			 ::Dynamic access =  ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic));
HXDLIN(  92)			 ::Dynamic _g_access = access;
HXDLIN(  92)			::Array< ::String > _g_keys = ::Reflect_obj::fields(access);
HXDLIN(  92)			int _g_index = 0;
HXDLIN(  92)			while((_g_index < _g_keys->length)){
HXLINE(  92)				_g_index = (_g_index + 1);
HXDLIN(  92)				::String key = _g_keys->__get((_g_index - 1));
HXDLIN(  92)				 ::Dynamic _g_value = ::Reflect_obj::field(_g_access,key);
HXDLIN(  92)				::String _g_key = key;
HXDLIN(  92)				::String name = _g_key;
HXDLIN(  92)				 ::Dynamic frame1 = _g_value;
HXLINE(  93)				::flixel::graphics::frames::FlxAtlasFrames_obj::texturePackerHelper(name,frame1,frames,useFrameDuration);
            			}
            		}
HXLINE(  96)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxAtlasFrames_obj,fromTexturePackerJson,return )

void FlxAtlasFrames_obj::texturePackerHelper(::String frameName, ::Dynamic frameData, ::flixel::graphics::frames::FlxAtlasFrames frames,::hx::Null< bool >  __o_useFrameDuration){
            		bool useFrameDuration = __o_useFrameDuration.Default(false);
            	HX_STACKFRAME(&_hx_pos_d294561f5bda5770_107_texturePackerHelper)
HXLINE( 108)		bool rotated = ( (bool)(frameData->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) );
HXLINE( 109)		int angle = 0;
HXLINE( 110)		 ::flixel::math::FlxRect frameRect = null();
HXLINE( 112)		 ::Dynamic frame = frameData->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic);
HXLINE( 113)		if (rotated) {
HXLINE( 115)			Float X = ( (Float)(frame->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 115)			Float Y = ( (Float)(frame->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 115)			Float Width = ( (Float)(frame->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 115)			Float Height = ( (Float)(frame->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 115)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 115)			_this->x = X;
HXDLIN( 115)			_this->y = Y;
HXDLIN( 115)			_this->width = Width;
HXDLIN( 115)			_this->height = Height;
HXDLIN( 115)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 115)			rect->_inPool = false;
HXDLIN( 115)			frameRect = rect;
HXLINE( 116)			angle = -90;
            		}
            		else {
HXLINE( 120)			Float X1 = ( (Float)(frame->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 120)			Float Y1 = ( (Float)(frame->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 120)			Float Width1 = ( (Float)(frame->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 120)			Float Height1 = ( (Float)(frame->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 120)			 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 120)			_this1->x = X1;
HXDLIN( 120)			_this1->y = Y1;
HXDLIN( 120)			_this1->width = Width1;
HXDLIN( 120)			_this1->height = Height1;
HXDLIN( 120)			 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN( 120)			rect1->_inPool = false;
HXDLIN( 120)			frameRect = rect1;
            		}
HXLINE( 123)		Float x = ( (Float)( ::Dynamic(frameData->__Field(HX_("sourceSize",3c,87,b7,74),::hx::paccDynamic))->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 123)		Float y = ( (Float)( ::Dynamic(frameData->__Field(HX_("sourceSize",3c,87,b7,74),::hx::paccDynamic))->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 123)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 123)		point->_inPool = false;
HXDLIN( 123)		 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 124)		Float x1 = ( (Float)( ::Dynamic(frameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 124)		Float y1 = ( (Float)( ::Dynamic(frameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),::hx::paccDynamic))->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 124)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN( 124)		point1->_inPool = false;
HXDLIN( 124)		 ::flixel::math::FlxBasePoint offset = point1;
HXLINE( 125)		Float duration;
HXDLIN( 125)		bool duration1;
HXDLIN( 125)		if (useFrameDuration) {
HXLINE( 125)			duration1 = ::hx::IsNotNull( frameData->__Field(HX_("duration",54,0f,8e,14),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 125)			duration1 = false;
            		}
HXDLIN( 125)		if (duration1) {
HXLINE( 125)			duration = (( (Float)(frameData->__Field(HX_("duration",54,0f,8e,14),::hx::paccDynamic)) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 125)			duration = ( (Float)(0) );
            		}
HXLINE( 126)		frames->addAtlasFrame(frameRect,sourceSize,offset,frameName,angle,false,false,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxAtlasFrames_obj,texturePackerHelper,(void))

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromLibGdx( ::Dynamic source,::String description){
            	HX_GC_STACKFRAME(&_hx_pos_d294561f5bda5770_139_fromLibGdx)
HXLINE( 140)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(source,null(),null());
HXLINE( 141)		if (::hx::IsNull( graphic )) {
HXLINE( 142)			return null();
            		}
HXLINE( 145)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 146)		if (::hx::IsNotNull( frames )) {
HXLINE( 147)			return frames;
            		}
HXLINE( 149)		bool _hx_tmp;
HXDLIN( 149)		if (::hx::IsNotNull( graphic )) {
HXLINE( 149)			_hx_tmp = ::hx::IsNull( description );
            		}
            		else {
HXLINE( 149)			_hx_tmp = true;
            		}
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 150)			return null();
            		}
HXLINE( 152)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 154)		if (( (bool)(::flixel::FlxG_obj::assets->exists(description,null())) )) {
HXLINE( 155)			description = ( (::String)(::flixel::FlxG_obj::assets->getAssetUnsafe(description,HX_("text",ad,cc,f9,4c),true)) );
            		}
HXLINE( 157)		::String pack = ::StringTools_obj::trim(description);
HXLINE( 158)		::Array< ::String > lines = pack.split(HX_("\n",0a,00,00,00));
HXLINE( 161)		int repeatLine;
HXDLIN( 161)		if ((lines->__get(3).indexOf(HX_("repeat:",7f,d8,87,a6),null()) > -1)) {
HXLINE( 161)			repeatLine = 3;
            		}
            		else {
HXLINE( 161)			repeatLine = 4;
            		}
HXLINE( 162)		lines->removeRange(0,(repeatLine + 1));
HXLINE( 164)		int numElementsPerImage = 7;
HXLINE( 165)		int numImages = ::Std_obj::_hx_int((( (Float)(lines->length) ) / ( (Float)(numElementsPerImage) )));
HXLINE( 167)		{
HXLINE( 167)			int _g = 0;
HXDLIN( 167)			int _g1 = numImages;
HXDLIN( 167)			while((_g < _g1)){
HXLINE( 167)				_g = (_g + 1);
HXDLIN( 167)				int i = (_g - 1);
HXLINE( 169)				int curIndex = (i * numElementsPerImage);
HXLINE( 171)				curIndex = (curIndex + 1);
HXDLIN( 171)				::String name = lines->__get((curIndex - 1));
HXLINE( 172)				curIndex = (curIndex + 1);
HXDLIN( 172)				bool rotated = (lines->__get((curIndex - 1)).indexOf(HX_("true",4e,a7,03,4d),null()) >= 0);
HXLINE( 173)				int angle;
HXDLIN( 173)				if (rotated) {
HXLINE( 173)					angle = 90;
            				}
            				else {
HXLINE( 173)					angle = 0;
            				}
HXLINE( 175)				curIndex = (curIndex + 1);
HXDLIN( 175)				::String tempString = lines->__get((curIndex - 1));
HXLINE( 176)				 ::Dynamic size = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString);
HXLINE( 178)				int imageX = ( (int)(size->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE( 179)				int imageY = ( (int)(size->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXLINE( 181)				curIndex = (curIndex + 1);
HXDLIN( 181)				tempString = lines->__get((curIndex - 1));
HXLINE( 182)				size = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString);
HXLINE( 184)				int imageWidth = ( (int)(size->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE( 185)				int imageHeight = ( (int)(size->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXLINE( 187)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 187)				_this->x = ( (Float)(imageX) );
HXDLIN( 187)				_this->y = ( (Float)(imageY) );
HXDLIN( 187)				_this->width = ( (Float)(imageWidth) );
HXDLIN( 187)				_this->height = ( (Float)(imageHeight) );
HXDLIN( 187)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 187)				rect->_inPool = false;
HXDLIN( 187)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 189)				curIndex = (curIndex + 1);
HXDLIN( 189)				tempString = lines->__get((curIndex - 1));
HXLINE( 190)				size = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString);
HXLINE( 192)				Float x = ( (Float)(size->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 192)				Float y = ( (Float)(size->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 192)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 192)				point->_inPool = false;
HXDLIN( 192)				 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 194)				curIndex = (curIndex + 1);
HXDLIN( 194)				tempString = lines->__get((curIndex - 1));
HXLINE( 195)				size = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString);
HXLINE( 197)				curIndex = (curIndex + 1);
HXDLIN( 197)				tempString = lines->__get((curIndex - 1));
HXLINE( 198)				 ::Dynamic index = ::Std_obj::parseInt(tempString.split(HX_(":",3a,00,00,00))->__get(1));
HXLINE( 200)				if (::hx::IsNotEq( index,-1 )) {
HXLINE( 201)					name = (name + (HX_("_",5f,00,00,00) + index));
            				}
HXLINE( 207)				Float x1 = ( (Float)(size->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 207)				Float y1 = ((sourceSize->y - ( (Float)(size->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) )) - ( (Float)(imageHeight) ));
HXDLIN( 207)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN( 207)				point1->_inPool = false;
HXDLIN( 207)				 ::flixel::math::FlxBasePoint offset = point1;
HXLINE( 208)				frames->addAtlasFrame(rect1,sourceSize,offset,name,angle,null(),null(),null());
            			}
            		}
HXLINE( 211)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromLibGdx,return )

 ::Dynamic FlxAtlasFrames_obj::getDimensions(::String line){
            	HX_STACKFRAME(&_hx_pos_d294561f5bda5770_218_getDimensions)
HXLINE( 219)		int colonPosition = line.indexOf(HX_(":",3a,00,00,00),null());
HXLINE( 220)		int comaPosition = line.indexOf(HX_(",",2c,00,00,00),null());
HXLINE( 223)		 ::Dynamic _hx_tmp = ::Std_obj::parseInt(line.substring((colonPosition + 1),comaPosition));
HXLINE( 222)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),_hx_tmp)
            			->setFixed(1,HX_("y",79,00,00,00),::Std_obj::parseInt(line.substring((comaPosition + 1),line.length))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxAtlasFrames_obj,getDimensions,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromSparrow( ::Dynamic source, ::Dynamic xml){
            	HX_GC_STACKFRAME(&_hx_pos_d294561f5bda5770_238_fromSparrow)
HXLINE( 239)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(source,null(),null());
HXLINE( 240)		if (::hx::IsNull( graphic )) {
HXLINE( 241)			return null();
            		}
HXLINE( 243)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 244)		if (::hx::IsNotNull( frames )) {
HXLINE( 245)			return frames;
            		}
HXLINE( 247)		bool _hx_tmp;
HXDLIN( 247)		if (::hx::IsNotNull( graphic )) {
HXLINE( 247)			_hx_tmp = ::hx::IsNull( xml );
            		}
            		else {
HXLINE( 247)			_hx_tmp = true;
            		}
HXDLIN( 247)		if (_hx_tmp) {
HXLINE( 248)			return null();
            		}
HXLINE( 250)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 252)		 ::Xml x = ::flixel::_hx_system::_FlxAssets::FlxXmlAsset_Impl__obj::getXml(xml)->firstElement();
HXDLIN( 252)		bool _hx_tmp1;
HXDLIN( 252)		if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 252)			_hx_tmp1 = (x->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 252)			_hx_tmp1 = false;
            		}
HXDLIN( 252)		if (_hx_tmp1) {
HXLINE( 252)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            		}
HXDLIN( 252)		 ::Xml data = x;
HXLINE( 254)		{
HXLINE( 254)			int _g = 0;
HXDLIN( 254)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("SubTexture",5b,7b,fb,11));
HXDLIN( 254)			while((_g < _g1->length)){
HXLINE( 254)				 ::Xml texture = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 254)				_g = (_g + 1);
HXLINE( 256)				bool _hx_tmp2;
HXDLIN( 256)				if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("width",06,b6,62,ca)))) {
HXLINE( 256)					_hx_tmp2 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("w",77,00,00,00));
            				}
            				else {
HXLINE( 256)					_hx_tmp2 = false;
            				}
HXDLIN( 256)				if (_hx_tmp2) {
HXLINE( 257)					HX_STACK_DO_THROW(HX_("Sparrow v1 is not supported, use Sparrow v2",19,0e,b0,4e));
            				}
HXLINE( 259)				::String name = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("name",4b,72,ff,48));
HXLINE( 260)				bool trimmed = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("frameX",8b,af,85,ac));
HXLINE( 261)				bool rotated;
HXDLIN( 261)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("rotated",a9,49,1d,f1))) {
HXLINE( 261)					rotated = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("rotated",a9,49,1d,f1)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 261)					rotated = false;
            				}
HXLINE( 262)				bool flipX;
HXDLIN( 262)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("flipX",0b,45,92,02))) {
HXLINE( 262)					flipX = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("flipX",0b,45,92,02)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 262)					flipX = false;
            				}
HXLINE( 263)				bool flipY;
HXDLIN( 263)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("flipY",0c,45,92,02))) {
HXLINE( 263)					flipY = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("flipY",0c,45,92,02)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 263)					flipY = false;
            				}
HXLINE( 265)				Float X = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("x",78,00,00,00)));
HXDLIN( 265)				Float Y = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("y",79,00,00,00)));
HXDLIN( 265)				Float Width = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("width",06,b6,62,ca)));
HXDLIN( 265)				Float Height = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("height",e7,07,4c,02)));
HXDLIN( 265)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 265)				_this->x = X;
HXDLIN( 265)				_this->y = Y;
HXDLIN( 265)				_this->width = Width;
HXDLIN( 265)				_this->height = Height;
HXDLIN( 265)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 265)				rect->_inPool = false;
HXDLIN( 265)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 268)				 ::flixel::math::FlxRect size;
HXDLIN( 268)				if (trimmed) {
HXLINE( 270)					Float X1 = ( (Float)(::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameX",8b,af,85,ac)))) );
HXDLIN( 270)					Float Y1 = ( (Float)(::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameY",8c,af,85,ac)))) );
HXDLIN( 270)					Float Width1 = ( (Float)(::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameWidth",99,ea,88,ad)))) );
HXDLIN( 270)					Float Height1 = ( (Float)(::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameHeight",f4,d3,93,e0)))) );
HXDLIN( 270)					 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 270)					_this1->x = X1;
HXDLIN( 270)					_this1->y = Y1;
HXDLIN( 270)					_this1->width = Width1;
HXDLIN( 270)					_this1->height = Height1;
HXDLIN( 270)					 ::flixel::math::FlxRect rect2 = _this1;
HXDLIN( 270)					rect2->_inPool = false;
HXLINE( 268)					size = rect2;
            				}
            				else {
HXLINE( 275)					Float Width2 = rect1->width;
HXDLIN( 275)					Float Height2 = rect1->height;
HXDLIN( 275)					 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 275)					_this2->x = ( (Float)(0) );
HXDLIN( 275)					_this2->y = ( (Float)(0) );
HXDLIN( 275)					_this2->width = Width2;
HXDLIN( 275)					_this2->height = Height2;
HXDLIN( 275)					 ::flixel::math::FlxRect rect3 = _this2;
HXDLIN( 275)					rect3->_inPool = false;
HXLINE( 268)					size = rect3;
            				}
HXLINE( 279)				int angle;
HXDLIN( 279)				if (rotated) {
HXLINE( 279)					angle = -90;
            				}
            				else {
HXLINE( 279)					angle = 0;
            				}
HXLINE( 281)				Float x1 = -(size->x);
HXDLIN( 281)				Float y = -(size->y);
HXDLIN( 281)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y);
HXDLIN( 281)				point->_inPool = false;
HXDLIN( 281)				 ::flixel::math::FlxBasePoint offset = point;
HXLINE( 282)				Float x2 = size->width;
HXDLIN( 282)				Float y1 = size->height;
HXDLIN( 282)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x2,y1);
HXDLIN( 282)				point1->_inPool = false;
HXDLIN( 282)				 ::flixel::math::FlxBasePoint sourceSize = point1;
HXLINE( 284)				bool _hx_tmp3;
HXDLIN( 284)				if (rotated) {
HXLINE( 284)					_hx_tmp3 = !(trimmed);
            				}
            				else {
HXLINE( 284)					_hx_tmp3 = false;
            				}
HXDLIN( 284)				if (_hx_tmp3) {
HXLINE( 285)					Float y2 = size->width;
HXDLIN( 285)					sourceSize->set_x(size->height);
HXDLIN( 285)					sourceSize->set_y(y2);
            				}
HXLINE( 288)				bool _hx_tmp4;
HXDLIN( 288)				if ((rect1->width != 0)) {
HXLINE( 288)					_hx_tmp4 = (rect1->height == 0);
            				}
            				else {
HXLINE( 288)					_hx_tmp4 = true;
            				}
HXDLIN( 288)				if (_hx_tmp4) {
HXLINE( 290)					if (!(trimmed)) {
HXLINE( 291)						size->width = ( (Float)(1) );
HXDLIN( 291)						size->height = ( (Float)(1) );
            					}
HXLINE( 293)					 ::flixel::graphics::frames::FlxFrame frame = frames->addEmptyFrame(size);
HXLINE( 295)					frame->name = name;
HXLINE( 296)					{
HXLINE( 296)						 ::flixel::math::FlxBasePoint this1 = frame->offset;
HXDLIN( 296)						{
HXLINE( 296)							Float y3 = offset->y;
HXDLIN( 296)							this1->set_x(offset->x);
HXDLIN( 296)							this1->set_y(y3);
            						}
HXDLIN( 296)						{
HXLINE( 296)							 ::flixel::math::FlxBasePoint _this3 = offset;
HXDLIN( 296)							if (_this3->_weak) {
HXLINE( 296)								_this3->put();
            							}
            						}
            					}
HXLINE( 298)					continue;
            				}
HXLINE( 301)				frames->addAtlasFrame(rect1,sourceSize,offset,name,angle,flipX,flipY,null());
            			}
            		}
HXLINE( 304)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromSparrow,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromTexturePackerXml( ::Dynamic source, ::Dynamic xml){
            	HX_GC_STACKFRAME(&_hx_pos_d294561f5bda5770_316_fromTexturePackerXml)
HXLINE( 317)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(source,false,null());
HXLINE( 318)		if (::hx::IsNull( graphic )) {
HXLINE( 319)			return null();
            		}
HXLINE( 322)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 323)		if (::hx::IsNotNull( frames )) {
HXLINE( 324)			return frames;
            		}
HXLINE( 326)		bool _hx_tmp;
HXDLIN( 326)		if (::hx::IsNotNull( graphic )) {
HXLINE( 326)			_hx_tmp = ::hx::IsNull( xml );
            		}
            		else {
HXLINE( 326)			_hx_tmp = true;
            		}
HXDLIN( 326)		if (_hx_tmp) {
HXLINE( 327)			return null();
            		}
HXLINE( 329)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 331)		 ::Xml data = ::flixel::_hx_system::_FlxAssets::FlxXmlAsset_Impl__obj::getXml(xml);
HXLINE( 333)		{
HXLINE( 333)			 ::Dynamic sprite = data->firstElement()->elements();
HXDLIN( 333)			while(( (bool)(sprite->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 333)				 ::Xml sprite1 = ( ( ::Xml)(sprite->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 335)				bool trimmed;
HXDLIN( 335)				if (!(sprite1->exists(HX_("oX",09,61,00,00)))) {
HXLINE( 335)					trimmed = sprite1->exists(HX_("oY",0a,61,00,00));
            				}
            				else {
HXLINE( 335)					trimmed = true;
            				}
HXLINE( 336)				bool rotated;
HXDLIN( 336)				if (sprite1->exists(HX_("r",72,00,00,00))) {
HXLINE( 336)					rotated = (sprite1->get(HX_("r",72,00,00,00)) == HX_("y",79,00,00,00));
            				}
            				else {
HXLINE( 336)					rotated = false;
            				}
HXLINE( 337)				int angle;
HXDLIN( 337)				if (rotated) {
HXLINE( 337)					angle = -90;
            				}
            				else {
HXLINE( 337)					angle = 0;
            				}
HXLINE( 338)				::String name = sprite1->get(HX_("n",6e,00,00,00));
HXLINE( 339)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(0,0);
HXDLIN( 339)				point->_inPool = false;
HXDLIN( 339)				 ::flixel::math::FlxBasePoint offset = point;
HXLINE( 340)				Float X = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("x",78,00,00,00)))) );
HXDLIN( 340)				Float Y = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("y",79,00,00,00)))) );
HXDLIN( 340)				Float Width = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("w",77,00,00,00)))) );
HXDLIN( 340)				Float Height = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("h",68,00,00,00)))) );
HXDLIN( 340)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 340)				_this->x = X;
HXDLIN( 340)				_this->y = Y;
HXDLIN( 340)				_this->width = Width;
HXDLIN( 340)				_this->height = Height;
HXDLIN( 340)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 340)				rect->_inPool = false;
HXDLIN( 340)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 341)				Float x = rect1->width;
HXDLIN( 341)				Float y = rect1->height;
HXDLIN( 341)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 341)				point1->_inPool = false;
HXDLIN( 341)				 ::flixel::math::FlxBasePoint sourceSize = point1;
HXLINE( 343)				if (trimmed) {
HXLINE( 345)					{
HXLINE( 345)						Float x1 = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("oX",09,61,00,00)))) );
HXDLIN( 345)						Float y1 = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("oY",0a,61,00,00)))) );
HXDLIN( 345)						offset->set_x(x1);
HXDLIN( 345)						offset->set_y(y1);
            					}
HXLINE( 346)					{
HXLINE( 346)						Float x2 = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("oW",08,61,00,00)))) );
HXDLIN( 346)						Float y2 = ( (Float)(::Std_obj::parseInt(sprite1->get(HX_("oH",f9,60,00,00)))) );
HXDLIN( 346)						sourceSize->set_x(x2);
HXDLIN( 346)						sourceSize->set_y(y2);
            					}
            				}
HXLINE( 349)				frames->addAtlasFrame(rect1,sourceSize,offset,name,angle,null(),null(),null());
            			}
            		}
HXLINE( 352)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromTexturePackerXml,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromSpriteSheetPacker( ::Dynamic Source,::String Description){
            	HX_GC_STACKFRAME(&_hx_pos_d294561f5bda5770_365_fromSpriteSheetPacker)
HXLINE( 366)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Source,null(),null());
HXLINE( 367)		if (::hx::IsNull( graphic )) {
HXLINE( 368)			return null();
            		}
HXLINE( 371)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 372)		if (::hx::IsNotNull( frames )) {
HXLINE( 373)			return frames;
            		}
HXLINE( 375)		bool _hx_tmp;
HXDLIN( 375)		if (::hx::IsNotNull( graphic )) {
HXLINE( 375)			_hx_tmp = ::hx::IsNull( Description );
            		}
            		else {
HXLINE( 375)			_hx_tmp = true;
            		}
HXDLIN( 375)		if (_hx_tmp) {
HXLINE( 376)			return null();
            		}
HXLINE( 378)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 380)		if (( (bool)(::flixel::FlxG_obj::assets->exists(Description,null())) )) {
HXLINE( 381)			Description = ( (::String)(::flixel::FlxG_obj::assets->getAssetUnsafe(Description,HX_("text",ad,cc,f9,4c),true)) );
            		}
HXLINE( 383)		::String pack = ::StringTools_obj::trim(Description);
HXLINE( 384)		::Array< ::String > lines = pack.split(HX_("\n",0a,00,00,00));
HXLINE( 386)		{
HXLINE( 386)			int _g = 0;
HXDLIN( 386)			int _g1 = lines->length;
HXDLIN( 386)			while((_g < _g1)){
HXLINE( 386)				_g = (_g + 1);
HXDLIN( 386)				int i = (_g - 1);
HXLINE( 388)				::Array< ::String > currImageData = lines->__get(i).split(HX_("=",3d,00,00,00));
HXLINE( 389)				::String name = ::StringTools_obj::trim(currImageData->__get(0));
HXLINE( 390)				::Array< ::String > currImageRegion = ::StringTools_obj::trim(currImageData->__get(1)).split(HX_(" ",20,00,00,00));
HXLINE( 392)				Float X = ( (Float)(::Std_obj::parseInt(currImageRegion->__get(0))) );
HXDLIN( 392)				Float Y = ( (Float)(::Std_obj::parseInt(currImageRegion->__get(1))) );
HXDLIN( 392)				Float Width = ( (Float)(::Std_obj::parseInt(currImageRegion->__get(2))) );
HXDLIN( 392)				Float Height = ( (Float)(::Std_obj::parseInt(currImageRegion->__get(3))) );
HXDLIN( 392)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 392)				_this->x = X;
HXDLIN( 392)				_this->y = Y;
HXDLIN( 392)				_this->width = Width;
HXDLIN( 392)				_this->height = Height;
HXDLIN( 392)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 392)				rect->_inPool = false;
HXDLIN( 392)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 394)				Float x = rect1->width;
HXDLIN( 394)				Float y = rect1->height;
HXDLIN( 394)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 394)				point->_inPool = false;
HXDLIN( 394)				 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 395)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 395)				point1->_inPool = false;
HXDLIN( 395)				 ::flixel::math::FlxBasePoint offset = point1;
HXLINE( 397)				frames->addAtlasFrame(rect1,sourceSize,offset,name,0,null(),null(),null());
            			}
            		}
HXLINE( 400)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromSpriteSheetPacker,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::findFrame( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxBasePoint border){
            	HX_STACKFRAME(&_hx_pos_d294561f5bda5770_411_findFrame)
HXLINE( 412)		if (::hx::IsNull( border )) {
HXLINE( 413)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 413)			point->_inPool = false;
HXDLIN( 413)			 ::flixel::math::FlxBasePoint point1 = point;
HXDLIN( 413)			point1->_weak = true;
HXDLIN( 413)			border = point1;
            		}
HXLINE( 415)		 ::flixel::graphics::frames::FlxFrameCollectionType type = ::flixel::graphics::frames::FlxFrameCollectionType_obj::ATLAS_dyn();
HXDLIN( 415)		::cpp::VirtualArray atlasFrames;
HXDLIN( 415)		if (::hx::IsNull( graphic->shader )) {
HXLINE( 415)			::flixel::FlxG_obj::log->advanced(HX_("Invalid call to getFramesCollections on a destroyed graphic",1c,9c,0d,21),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/graphics/FlxGraphic.hx",17,35,63,b3),498,HX_("flixel.graphics.FlxGraphic",27,fc,ac,ae),HX_("getFramesCollections",d9,58,45,b4)));
HXDLIN( 415)			atlasFrames = ::cpp::VirtualArray_obj::__new(0);
            		}
            		else {
HXLINE( 415)			::cpp::VirtualArray collections = ( (::cpp::VirtualArray)(graphic->frameCollections->get(type)) );
HXDLIN( 415)			if (::hx::IsNull( collections )) {
HXLINE( 415)				collections = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 415)				graphic->frameCollections->set(type,collections);
            			}
HXDLIN( 415)			atlasFrames = collections;
            		}
HXDLIN( 415)		::Array< ::Dynamic> atlasFrames1 = atlasFrames;
HXLINE( 417)		{
HXLINE( 417)			int _g = 0;
HXDLIN( 417)			while((_g < atlasFrames1->length)){
HXLINE( 417)				 ::flixel::graphics::frames::FlxAtlasFrames atlas = atlasFrames1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxAtlasFrames >();
HXDLIN( 417)				_g = (_g + 1);
HXLINE( 418)				 ::flixel::math::FlxBasePoint _this = atlas->border;
HXDLIN( 418)				bool result;
HXDLIN( 418)				if ((::Math_obj::abs((_this->x - border->x)) <= ((Float)0.0000001))) {
HXLINE( 418)					result = (::Math_obj::abs((_this->y - border->y)) <= ((Float)0.0000001));
            				}
            				else {
HXLINE( 418)					result = false;
            				}
HXDLIN( 418)				if (border->_weak) {
HXLINE( 418)					border->put();
            				}
HXDLIN( 418)				if (result) {
HXLINE( 419)					return atlas;
            				}
            			}
            		}
HXLINE( 421)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,findFrame,return )


::hx::ObjectPtr< FlxAtlasFrames_obj > FlxAtlasFrames_obj::__new( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxBasePoint border) {
	::hx::ObjectPtr< FlxAtlasFrames_obj > __this = new FlxAtlasFrames_obj();
	__this->__construct(parent,border);
	return __this;
}

::hx::ObjectPtr< FlxAtlasFrames_obj > FlxAtlasFrames_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxBasePoint border) {
	FlxAtlasFrames_obj *__this = (FlxAtlasFrames_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAtlasFrames_obj), true, "flixel.graphics.frames.FlxAtlasFrames"));
	*(void **)__this = FlxAtlasFrames_obj::_hx_vtable;
	__this->__construct(parent,border);
	return __this;
}

FlxAtlasFrames_obj::FlxAtlasFrames_obj()
{
}

void FlxAtlasFrames_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAtlasFrames);
	HX_MARK_MEMBER_NAME(usedGraphics,"usedGraphics");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxAtlasFrames_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(usedGraphics,"usedGraphics");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxAtlasFrames_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { return ::hx::Val( concat_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addAtlas") ) { return ::hx::Val( addAtlas_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addBorder") ) { return ::hx::Val( addBorder_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"usedGraphics") ) { return ::hx::Val( usedGraphics ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxAtlasFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"findFrame") ) { outValue = findFrame_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromLibGdx") ) { outValue = fromLibGdx_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromSparrow") ) { outValue = fromSparrow_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromAseprite") ) { outValue = fromAseprite_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getDimensions") ) { outValue = getDimensions_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"texturePackerHelper") ) { outValue = texturePackerHelper_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fromTexturePackerXml") ) { outValue = fromTexturePackerXml_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"fromTexturePackerJson") ) { outValue = fromTexturePackerJson_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromSpriteSheetPacker") ) { outValue = fromSpriteSheetPacker_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxAtlasFrames_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"usedGraphics") ) { usedGraphics=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAtlasFrames_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("usedGraphics",28,4c,2f,20));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAtlasFrames_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxAtlasFrames_obj,usedGraphics),HX_("usedGraphics",28,4c,2f,20)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxAtlasFrames_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAtlasFrames_obj_sMemberFields[] = {
	HX_("usedGraphics",28,4c,2f,20),
	HX_("destroy",fa,2c,86,24),
	HX_("addBorder",ed,81,3e,1c),
	HX_("addAtlas",6a,73,3a,a0),
	HX_("concat",14,09,d0,c7),
	::String(null()) };

::hx::Class FlxAtlasFrames_obj::__mClass;

static ::String FlxAtlasFrames_obj_sStaticFields[] = {
	HX_("fromAseprite",cf,40,ef,24),
	HX_("fromTexturePackerJson",bf,f0,7e,be),
	HX_("texturePackerHelper",0f,23,bd,b2),
	HX_("fromLibGdx",80,06,df,27),
	HX_("getDimensions",83,1a,12,39),
	HX_("fromSparrow",c2,9f,ec,33),
	HX_("fromTexturePackerXml",20,df,27,fb),
	HX_("fromSpriteSheetPacker",b6,b2,c0,5f),
	HX_("findFrame",34,a9,7a,f5),
	::String(null())
};

void FlxAtlasFrames_obj::__register()
{
	FlxAtlasFrames_obj _hx_dummy;
	FlxAtlasFrames_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.graphics.frames.FlxAtlasFrames",d6,87,d5,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxAtlasFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxAtlasFrames_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAtlasFrames_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAtlasFrames_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAtlasFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAtlasFrames_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames

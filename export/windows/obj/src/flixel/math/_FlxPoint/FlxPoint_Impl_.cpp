// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_math__FlxPoint_FlxPoint_Impl_
#include <flixel/math/_FlxPoint/FlxPoint_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_90_get,"flixel.math._FlxPoint.FlxPoint_Impl_","get",0xd70f398b,"flixel.math._FlxPoint.FlxPoint_Impl_.get","flixel/math/FlxPoint.hx",90,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_103_weak,"flixel.math._FlxPoint.FlxPoint_Impl_","weak",0x60d679e3,"flixel.math._FlxPoint.FlxPoint_Impl_.weak","flixel/math/FlxPoint.hx",103,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_112_plusOp,"flixel.math._FlxPoint.FlxPoint_Impl_","plusOp",0x67601d46,"flixel.math._FlxPoint.FlxPoint_Impl_.plusOp","flixel/math/FlxPoint.hx",112,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_125_minusOp,"flixel.math._FlxPoint.FlxPoint_Impl_","minusOp",0x56869926,"flixel.math._FlxPoint.FlxPoint_Impl_.minusOp","flixel/math/FlxPoint.hx",125,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_139_scaleOp,"flixel.math._FlxPoint.FlxPoint_Impl_","scaleOp",0x67b021c0,"flixel.math._FlxPoint.FlxPoint_Impl_.scaleOp","flixel/math/FlxPoint.hx",139,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_152_divideOp,"flixel.math._FlxPoint.FlxPoint_Impl_","divideOp",0x9cabb3e5,"flixel.math._FlxPoint.FlxPoint_Impl_.divideOp","flixel/math/FlxPoint.hx",152,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_165_plusEqualOp,"flixel.math._FlxPoint.FlxPoint_Impl_","plusEqualOp",0x97e887b0,"flixel.math._FlxPoint.FlxPoint_Impl_.plusEqualOp","flixel/math/FlxPoint.hx",165,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_175_minusEqualOp,"flixel.math._FlxPoint.FlxPoint_Impl_","minusEqualOp",0x7454ffd0,"flixel.math._FlxPoint.FlxPoint_Impl_.minusEqualOp","flixel/math/FlxPoint.hx",175,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_185_scaleEqualOp,"flixel.math._FlxPoint.FlxPoint_Impl_","scaleEqualOp",0xaa9408f6,"flixel.math._FlxPoint.FlxPoint_Impl_.scaleEqualOp","flixel/math/FlxPoint.hx",185,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_196_plusFlashOp,"flixel.math._FlxPoint.FlxPoint_Impl_","plusFlashOp",0x499464ac,"flixel.math._FlxPoint.FlxPoint_Impl_.plusFlashOp","flixel/math/FlxPoint.hx",196,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_208_minusFlashOp,"flixel.math._FlxPoint.FlxPoint_Impl_","minusFlashOp",0x2600dccc,"flixel.math._FlxPoint.FlxPoint_Impl_.minusFlashOp","flixel/math/FlxPoint.hx",208,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_220_minusFlashOp2,"flixel.math._FlxPoint.FlxPoint_Impl_","minusFlashOp2",0x1ac055e6,"flixel.math._FlxPoint.FlxPoint_Impl_.minusFlashOp2","flixel/math/FlxPoint.hx",220,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_233_plusEqualFlashOp,"flixel.math._FlxPoint.FlxPoint_Impl_","plusEqualFlashOp",0x621ffa02,"flixel.math._FlxPoint.FlxPoint_Impl_.plusEqualFlashOp","flixel/math/FlxPoint.hx",233,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_243_minusEqualFlashOp,"flixel.math._FlxPoint.FlxPoint_Impl_","minusEqualFlashOp",0x9cec0de2,"flixel.math._FlxPoint.FlxPoint_Impl_.minusEqualFlashOp","flixel/math/FlxPoint.hx",243,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_300__new,"flixel.math._FlxPoint.FlxPoint_Impl_","_new",0x510032cc,"flixel.math._FlxPoint.FlxPoint_Impl_._new","flixel/math/FlxPoint.hx",300,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_312_set,"flixel.math._FlxPoint.FlxPoint_Impl_","set",0xd7185497,"flixel.math._FlxPoint.FlxPoint_Impl_.set","flixel/math/FlxPoint.hx",312,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_370_addPoint,"flixel.math._FlxPoint.FlxPoint_Impl_","addPoint",0x9100895a,"flixel.math._FlxPoint.FlxPoint_Impl_.addPoint","flixel/math/FlxPoint.hx",370,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_422_subtractPoint,"flixel.math._FlxPoint.FlxPoint_Impl_","subtractPoint",0x3d1a23d1,"flixel.math._FlxPoint.FlxPoint_Impl_.subtractPoint","flixel/math/FlxPoint.hx",422,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_477_scalePoint,"flixel.math._FlxPoint.FlxPoint_Impl_","scalePoint",0x6850e111,"flixel.math._FlxPoint.FlxPoint_Impl_.scalePoint","flixel/math/FlxPoint.hx",477,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_491_scaleNew,"flixel.math._FlxPoint.FlxPoint_Impl_","scaleNew",0x526c9ae1,"flixel.math._FlxPoint.FlxPoint_Impl_.scaleNew","flixel/math/FlxPoint.hx",491,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_502_addNew,"flixel.math._FlxPoint.FlxPoint_Impl_","addNew",0xc1786eea,"flixel.math._FlxPoint.FlxPoint_Impl_.addNew","flixel/math/FlxPoint.hx",502,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_513_subtractNew,"flixel.math._FlxPoint.FlxPoint_Impl_","subtractNew",0x073bada1,"flixel.math._FlxPoint.FlxPoint_Impl_.subtractNew","flixel/math/FlxPoint.hx",513,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_550_copyFromFlash,"flixel.math._FlxPoint.FlxPoint_Impl_","copyFromFlash",0x118e02a6,"flixel.math._FlxPoint.FlxPoint_Impl_.copyFromFlash","flixel/math/FlxPoint.hx",550,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_591_copyToFlash,"flixel.math._FlxPoint.FlxPoint_Impl_","copyToFlash",0x206734f5,"flixel.math._FlxPoint.FlxPoint_Impl_.copyToFlash","flixel/math/FlxPoint.hx",591,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_601_addToFlash,"flixel.math._FlxPoint.FlxPoint_Impl_","addToFlash",0xb7282dbf,"flixel.math._FlxPoint.FlxPoint_Impl_.addToFlash","flixel/math/FlxPoint.hx",601,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_615_subtractFromFlash,"flixel.math._FlxPoint.FlxPoint_Impl_","subtractFromFlash",0xfbb3e3e7,"flixel.math._FlxPoint.FlxPoint_Impl_.subtractFromFlash","flixel/math/FlxPoint.hx",615,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_626_floor,"flixel.math._FlxPoint.FlxPoint_Impl_","floor",0x95af7201,"flixel.math._FlxPoint.FlxPoint_Impl_.floor","flixel/math/FlxPoint.hx",626,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_636_ceil,"flixel.math._FlxPoint.FlxPoint_Impl_","ceil",0x539e3c70,"flixel.math._FlxPoint.FlxPoint_Impl_.ceil","flixel/math/FlxPoint.hx",636,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_646_round,"flixel.math._FlxPoint.FlxPoint_Impl_","round",0x807e9883,"flixel.math._FlxPoint.FlxPoint_Impl_.round","flixel/math/FlxPoint.hx",646,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_663_inCoords,"flixel.math._FlxPoint.FlxPoint_Impl_","inCoords",0xa2169cce,"flixel.math._FlxPoint.FlxPoint_Impl_.inCoords","flixel/math/FlxPoint.hx",663,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_674_inRect,"flixel.math._FlxPoint.FlxPoint_Impl_","inRect",0xaa80b9d4,"flixel.math._FlxPoint.FlxPoint_Impl_.inRect","flixel/math/FlxPoint.hx",674,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_687_pivotRadians,"flixel.math._FlxPoint.FlxPoint_Impl_","pivotRadians",0x75c3e03b,"flixel.math._FlxPoint.FlxPoint_Impl_.pivotRadians","flixel/math/FlxPoint.hx",687,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_706_pivotDegrees,"flixel.math._FlxPoint.FlxPoint_Impl_","pivotDegrees",0x892e7d70,"flixel.math._FlxPoint.FlxPoint_Impl_.pivotDegrees","flixel/math/FlxPoint.hx",706,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_768_radiansTo,"flixel.math._FlxPoint.FlxPoint_Impl_","radiansTo",0x9889ef42,"flixel.math._FlxPoint.FlxPoint_Impl_.radiansTo","flixel/math/FlxPoint.hx",768,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_781_radiansFrom,"flixel.math._FlxPoint.FlxPoint_Impl_","radiansFrom",0x39176ef1,"flixel.math._FlxPoint.FlxPoint_Impl_.radiansFrom","flixel/math/FlxPoint.hx",781,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_794_degreesTo,"flixel.math._FlxPoint.FlxPoint_Impl_","degreesTo",0x51be03b7,"flixel.math._FlxPoint.FlxPoint_Impl_.degreesTo","flixel/math/FlxPoint.hx",794,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_807_degreesFrom,"flixel.math._FlxPoint.FlxPoint_Impl_","degreesFrom",0xb6d14aa6,"flixel.math._FlxPoint.FlxPoint_Impl_.degreesFrom","flixel/math/FlxPoint.hx",807,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_816_transform,"flixel.math._FlxPoint.FlxPoint_Impl_","transform",0xe5b88c21,"flixel.math._FlxPoint.FlxPoint_Impl_.transform","flixel/math/FlxPoint.hx",816,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_831_dot,"flixel.math._FlxPoint.FlxPoint_Impl_","dot",0xd70cfb7e,"flixel.math._FlxPoint.FlxPoint_Impl_.dot","flixel/math/FlxPoint.hx",831,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_841_dotProduct,"flixel.math._FlxPoint.FlxPoint_Impl_","dotProduct",0xbe7da751,"flixel.math._FlxPoint.FlxPoint_Impl_.dotProduct","flixel/math/FlxPoint.hx",841,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_856_dotProductWeak,"flixel.math._FlxPoint.FlxPoint_Impl_","dotProductWeak",0x0920ac69,"flixel.math._FlxPoint.FlxPoint_Impl_.dotProductWeak","flixel/math/FlxPoint.hx",856,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_866_dotProdWithNormalizing,"flixel.math._FlxPoint.FlxPoint_Impl_","dotProdWithNormalizing",0x1e5996ef,"flixel.math._FlxPoint.FlxPoint_Impl_.dotProdWithNormalizing","flixel/math/FlxPoint.hx",866,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_880_isPerpendicular,"flixel.math._FlxPoint.FlxPoint_Impl_","isPerpendicular",0x36a5e4d5,"flixel.math._FlxPoint.FlxPoint_Impl_.isPerpendicular","flixel/math/FlxPoint.hx",880,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_890_crossProductLength,"flixel.math._FlxPoint.FlxPoint_Impl_","crossProductLength",0x6effe880,"flixel.math._FlxPoint.FlxPoint_Impl_.crossProductLength","flixel/math/FlxPoint.hx",890,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_905_crossProductLengthWeak,"flixel.math._FlxPoint.FlxPoint_Impl_","crossProductLengthWeak",0x3e2cb118,"flixel.math._FlxPoint.FlxPoint_Impl_.crossProductLengthWeak","flixel/math/FlxPoint.hx",905,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_915_isParallel,"flixel.math._FlxPoint.FlxPoint_Impl_","isParallel",0x79333c7c,"flixel.math._FlxPoint.FlxPoint_Impl_.isParallel","flixel/math/FlxPoint.hx",915,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_930_isParallelWeak,"flixel.math._FlxPoint.FlxPoint_Impl_","isParallelWeak",0x38ffb314,"flixel.math._FlxPoint.FlxPoint_Impl_.isParallelWeak","flixel/math/FlxPoint.hx",930,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_940_isZero,"flixel.math._FlxPoint.FlxPoint_Impl_","isZero",0x90cb625d,"flixel.math._FlxPoint.FlxPoint_Impl_.isZero","flixel/math/FlxPoint.hx",940,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_947_zero,"flixel.math._FlxPoint.FlxPoint_Impl_","zero",0x62d22c93,"flixel.math._FlxPoint.FlxPoint_Impl_.zero","flixel/math/FlxPoint.hx",947,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_956_normalize,"flixel.math._FlxPoint.FlxPoint_Impl_","normalize",0x4bc69642,"flixel.math._FlxPoint.FlxPoint_Impl_.normalize","flixel/math/FlxPoint.hx",956,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_969_isNormalized,"flixel.math._FlxPoint.FlxPoint_Impl_","isNormalized",0x323b8d2c,"flixel.math._FlxPoint.FlxPoint_Impl_.isNormalized","flixel/math/FlxPoint.hx",969,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_979_rotateByRadians,"flixel.math._FlxPoint.FlxPoint_Impl_","rotateByRadians",0xf9a2dbf5,"flixel.math._FlxPoint.FlxPoint_Impl_.rotateByRadians","flixel/math/FlxPoint.hx",979,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_998_rotateByDegrees,"flixel.math._FlxPoint.FlxPoint_Impl_","rotateByDegrees",0x0d0d792a,"flixel.math._FlxPoint.FlxPoint_Impl_.rotateByDegrees","flixel/math/FlxPoint.hx",998,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1009_rotateWithTrig,"flixel.math._FlxPoint.FlxPoint_Impl_","rotateWithTrig",0x874640a8,"flixel.math._FlxPoint.FlxPoint_Impl_.rotateWithTrig","flixel/math/FlxPoint.hx",1009,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1026_setPolarRadians,"flixel.math._FlxPoint.FlxPoint_Impl_","setPolarRadians",0x4eaeb98b,"flixel.math._FlxPoint.FlxPoint_Impl_.setPolarRadians","flixel/math/FlxPoint.hx",1026,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1043_setPolarDegrees,"flixel.math._FlxPoint.FlxPoint_Impl_","setPolarDegrees",0x621956c0,"flixel.math._FlxPoint.FlxPoint_Impl_.setPolarDegrees","flixel/math/FlxPoint.hx",1043,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1050_rightNormal,"flixel.math._FlxPoint.FlxPoint_Impl_","rightNormal",0x95307518,"flixel.math._FlxPoint.FlxPoint_Impl_.rightNormal","flixel/math/FlxPoint.hx",1050,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1063_leftNormal,"flixel.math._FlxPoint.FlxPoint_Impl_","leftNormal",0xe007ad39,"flixel.math._FlxPoint.FlxPoint_Impl_.leftNormal","flixel/math/FlxPoint.hx",1063,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1076_negate,"flixel.math._FlxPoint.FlxPoint_Impl_","negate",0x898ccfed,"flixel.math._FlxPoint.FlxPoint_Impl_.negate","flixel/math/FlxPoint.hx",1076,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1084_negateNew,"flixel.math._FlxPoint.FlxPoint_Impl_","negateNew",0x6601aa73,"flixel.math._FlxPoint.FlxPoint_Impl_.negateNew","flixel/math/FlxPoint.hx",1084,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1096_projectTo,"flixel.math._FlxPoint.FlxPoint_Impl_","projectTo",0x351de369,"flixel.math._FlxPoint.FlxPoint_Impl_.projectTo","flixel/math/FlxPoint.hx",1096,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1118_projectToNormalized,"flixel.math._FlxPoint.FlxPoint_Impl_","projectToNormalized",0x27d20900,"flixel.math._FlxPoint.FlxPoint_Impl_.projectToNormalized","flixel/math/FlxPoint.hx",1118,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1133_projectToNormalizedWeak,"flixel.math._FlxPoint.FlxPoint_Impl_","projectToNormalizedWeak",0x4dd91198,"flixel.math._FlxPoint.FlxPoint_Impl_.projectToNormalizedWeak","flixel/math/FlxPoint.hx",1133,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1148_perpProduct,"flixel.math._FlxPoint.FlxPoint_Impl_","perpProduct",0xeed63471,"flixel.math._FlxPoint.FlxPoint_Impl_.perpProduct","flixel/math/FlxPoint.hx",1148,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1160_perpProductWeak,"flixel.math._FlxPoint.FlxPoint_Impl_","perpProductWeak",0x32164989,"flixel.math._FlxPoint.FlxPoint_Impl_.perpProductWeak","flixel/math/FlxPoint.hx",1160,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1172_ratio,"flixel.math._FlxPoint.FlxPoint_Impl_","ratio",0x773cd540,"flixel.math._FlxPoint.FlxPoint_Impl_.ratio","flixel/math/FlxPoint.hx",1172,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1190_ratioWeak,"flixel.math._FlxPoint.FlxPoint_Impl_","ratioWeak",0x323efdd8,"flixel.math._FlxPoint.FlxPoint_Impl_.ratioWeak","flixel/math/FlxPoint.hx",1190,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1211_findIntersection,"flixel.math._FlxPoint.FlxPoint_Impl_","findIntersection",0x8390c20d,"flixel.math._FlxPoint.FlxPoint_Impl_.findIntersection","flixel/math/FlxPoint.hx",1211,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1243_findIntersectionInBounds,"flixel.math._FlxPoint.FlxPoint_Impl_","findIntersectionInBounds",0x03b2a367,"flixel.math._FlxPoint.FlxPoint_Impl_.findIntersectionInBounds","flixel/math/FlxPoint.hx",1243,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1272_truncate,"flixel.math._FlxPoint.FlxPoint_Impl_","truncate",0x200d6d51,"flixel.math._FlxPoint.FlxPoint_Impl_.truncate","flixel/math/FlxPoint.hx",1272,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1284_radiansBetween,"flixel.math._FlxPoint.FlxPoint_Impl_","radiansBetween",0xb2fe36a1,"flixel.math._FlxPoint.FlxPoint_Impl_.radiansBetween","flixel/math/FlxPoint.hx",1284,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1298_degreesBetween,"flixel.math._FlxPoint.FlxPoint_Impl_","degreesBetween",0x0842da0c,"flixel.math._FlxPoint.FlxPoint_Impl_.degreesBetween","flixel/math/FlxPoint.hx",1298,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1308_sign,"flixel.math._FlxPoint.FlxPoint_Impl_","sign",0x5e34ada8,"flixel.math._FlxPoint.FlxPoint_Impl_.sign","flixel/math/FlxPoint.hx",1308,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1361_bounce,"flixel.math._FlxPoint.FlxPoint_Impl_","bounce",0x889113b3,"flixel.math._FlxPoint.FlxPoint_Impl_.bounce","flixel/math/FlxPoint.hx",1361,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1378_bounceWithFriction,"flixel.math._FlxPoint.FlxPoint_Impl_","bounceWithFriction",0x258dc173,"flixel.math._FlxPoint.FlxPoint_Impl_.bounceWithFriction","flixel/math/FlxPoint.hx",1378,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1398_isValid,"flixel.math._FlxPoint.FlxPoint_Impl_","isValid",0xd0e6f027,"flixel.math._FlxPoint.FlxPoint_Impl_.isValid","flixel/math/FlxPoint.hx",1398,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1409_clone,"flixel.math._FlxPoint.FlxPoint_Impl_","clone",0xdb7bb392,"flixel.math._FlxPoint.FlxPoint_Impl_.clone","flixel/math/FlxPoint.hx",1409,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1414_get_x,"flixel.math._FlxPoint.FlxPoint_Impl_","get_x",0x24794584,"flixel.math._FlxPoint.FlxPoint_Impl_.get_x","flixel/math/FlxPoint.hx",1414,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1419_set_x,"flixel.math._FlxPoint.FlxPoint_Impl_","set_x",0x0d483b90,"flixel.math._FlxPoint.FlxPoint_Impl_.set_x","flixel/math/FlxPoint.hx",1419,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1424_get_y,"flixel.math._FlxPoint.FlxPoint_Impl_","get_y",0x24794585,"flixel.math._FlxPoint.FlxPoint_Impl_.get_y","flixel/math/FlxPoint.hx",1424,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1429_set_y,"flixel.math._FlxPoint.FlxPoint_Impl_","set_y",0x0d483b91,"flixel.math._FlxPoint.FlxPoint_Impl_.set_y","flixel/math/FlxPoint.hx",1429,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1433_get_dx,"flixel.math._FlxPoint.FlxPoint_Impl_","get_dx",0xc5a37d08,"flixel.math._FlxPoint.FlxPoint_Impl_.get_dx","flixel/math/FlxPoint.hx",1433,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1441_get_dy,"flixel.math._FlxPoint.FlxPoint_Impl_","get_dy",0xc5a37d09,"flixel.math._FlxPoint.FlxPoint_Impl_.get_dy","flixel/math/FlxPoint.hx",1441,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1450_get_length,"flixel.math._FlxPoint.FlxPoint_Impl_","get_length",0x101c845a,"flixel.math._FlxPoint.FlxPoint_Impl_.get_length","flixel/math/FlxPoint.hx",1450,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1454_set_length,"flixel.math._FlxPoint.FlxPoint_Impl_","set_length",0x139a22ce,"flixel.math._FlxPoint.FlxPoint_Impl_.set_length","flixel/math/FlxPoint.hx",1454,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1466_get_lengthSquared,"flixel.math._FlxPoint.FlxPoint_Impl_","get_lengthSquared",0xd217cbed,"flixel.math._FlxPoint.FlxPoint_Impl_.get_lengthSquared","flixel/math/FlxPoint.hx",1466,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1471_get_degrees,"flixel.math._FlxPoint.FlxPoint_Impl_","get_degrees",0xbb9779b3,"flixel.math._FlxPoint.FlxPoint_Impl_.get_degrees","flixel/math/FlxPoint.hx",1471,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1475_set_degrees,"flixel.math._FlxPoint.FlxPoint_Impl_","set_degrees",0xc60480bf,"flixel.math._FlxPoint.FlxPoint_Impl_.set_degrees","flixel/math/FlxPoint.hx",1475,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1482_get_radians,"flixel.math._FlxPoint.FlxPoint_Impl_","get_radians",0xa82cdc7e,"flixel.math._FlxPoint.FlxPoint_Impl_.get_radians","flixel/math/FlxPoint.hx",1482,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1486_set_radians,"flixel.math._FlxPoint.FlxPoint_Impl_","set_radians",0xb299e38a,"flixel.math._FlxPoint.FlxPoint_Impl_.set_radians","flixel/math/FlxPoint.hx",1486,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1496_get_rx,"flixel.math._FlxPoint.FlxPoint_Impl_","get_rx",0xc5a3893a,"flixel.math._FlxPoint.FlxPoint_Impl_.get_rx","flixel/math/FlxPoint.hx",1496,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1501_get_ry,"flixel.math._FlxPoint.FlxPoint_Impl_","get_ry",0xc5a3893b,"flixel.math._FlxPoint.FlxPoint_Impl_.get_ry","flixel/math/FlxPoint.hx",1501,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1506_get_lx,"flixel.math._FlxPoint.FlxPoint_Impl_","get_lx",0xc5a38400,"flixel.math._FlxPoint.FlxPoint_Impl_.get_lx","flixel/math/FlxPoint.hx",1506,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_1511_get_ly,"flixel.math._FlxPoint.FlxPoint_Impl_","get_ly",0xc5a38401,"flixel.math._FlxPoint.FlxPoint_Impl_.get_ly","flixel/math/FlxPoint.hx",1511,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_74_boot,"flixel.math._FlxPoint.FlxPoint_Impl_","boot",0x52fca19d,"flixel.math._FlxPoint.FlxPoint_Impl_.boot","flixel/math/FlxPoint.hx",74,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_75_boot,"flixel.math._FlxPoint.FlxPoint_Impl_","boot",0x52fca19d,"flixel.math._FlxPoint.FlxPoint_Impl_.boot","flixel/math/FlxPoint.hx",75,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_77_boot,"flixel.math._FlxPoint.FlxPoint_Impl_","boot",0x52fca19d,"flixel.math._FlxPoint.FlxPoint_Impl_.boot","flixel/math/FlxPoint.hx",77,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_78_boot,"flixel.math._FlxPoint.FlxPoint_Impl_","boot",0x52fca19d,"flixel.math._FlxPoint.FlxPoint_Impl_.boot","flixel/math/FlxPoint.hx",78,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_6689cf469d632363_79_boot,"flixel.math._FlxPoint.FlxPoint_Impl_","boot",0x52fca19d,"flixel.math._FlxPoint.FlxPoint_Impl_.boot","flixel/math/FlxPoint.hx",79,0xb3e1cd2c)
namespace flixel{
namespace math{
namespace _FlxPoint{

void FlxPoint_Impl__obj::__construct() { }

Dynamic FlxPoint_Impl__obj::__CreateEmpty() { return new FlxPoint_Impl__obj; }

void *FlxPoint_Impl__obj::_hx_vtable = 0;

Dynamic FlxPoint_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxPoint_Impl__obj > _hx_result = new FlxPoint_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxPoint_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50db1cb3;
}

Float FlxPoint_Impl__obj::EPSILON;

Float FlxPoint_Impl__obj::EPSILON_SQUARED;

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::_point1;

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::_point2;

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::_point3;

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::get(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_90_get)
HXDLIN(  90)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN(  90)		point->_inPool = false;
HXDLIN(  90)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,get,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::weak(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_103_weak)
HXDLIN( 103)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 103)		point->_inPool = false;
HXDLIN( 103)		 ::flixel::math::FlxBasePoint point1 = point;
HXDLIN( 103)		point1->_weak = true;
HXDLIN( 103)		return point1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,weak,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::plusOp( ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_112_plusOp)
HXLINE( 113)		Float x = (a->x + b->x);
HXDLIN( 113)		Float y = (a->y + b->y);
HXDLIN( 113)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 113)		point->_inPool = false;
HXDLIN( 113)		 ::flixel::math::FlxBasePoint result = point;
HXLINE( 114)		{
HXLINE( 114)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN( 114)			if (_this->_weak) {
HXLINE( 114)				_this->put();
            			}
            		}
HXLINE( 115)		{
HXLINE( 115)			 ::flixel::math::FlxBasePoint _this1 = b;
HXDLIN( 115)			if (_this1->_weak) {
HXLINE( 115)				_this1->put();
            			}
            		}
HXLINE( 116)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,plusOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::minusOp( ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_125_minusOp)
HXLINE( 126)		Float x = (a->x - b->x);
HXDLIN( 126)		Float y = (a->y - b->y);
HXDLIN( 126)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 126)		point->_inPool = false;
HXDLIN( 126)		 ::flixel::math::FlxBasePoint result = point;
HXLINE( 127)		{
HXLINE( 127)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN( 127)			if (_this->_weak) {
HXLINE( 127)				_this->put();
            			}
            		}
HXLINE( 128)		{
HXLINE( 128)			 ::flixel::math::FlxBasePoint _this1 = b;
HXDLIN( 128)			if (_this1->_weak) {
HXLINE( 128)				_this1->put();
            			}
            		}
HXLINE( 129)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,minusOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::scaleOp( ::flixel::math::FlxBasePoint a,Float b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_139_scaleOp)
HXLINE( 140)		Float x = (a->x * b);
HXDLIN( 140)		Float y = (a->y * b);
HXDLIN( 140)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 140)		point->_inPool = false;
HXDLIN( 140)		 ::flixel::math::FlxBasePoint result = point;
HXLINE( 141)		{
HXLINE( 141)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN( 141)			if (_this->_weak) {
HXLINE( 141)				_this->put();
            			}
            		}
HXLINE( 142)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,scaleOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::divideOp( ::flixel::math::FlxBasePoint a,Float b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_152_divideOp)
HXLINE( 153)		Float x = (a->x / b);
HXDLIN( 153)		Float y = (a->y / b);
HXDLIN( 153)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 153)		point->_inPool = false;
HXDLIN( 153)		 ::flixel::math::FlxBasePoint result = point;
HXLINE( 154)		{
HXLINE( 154)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN( 154)			if (_this->_weak) {
HXLINE( 154)				_this->put();
            			}
            		}
HXLINE( 155)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,divideOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::plusEqualOp( ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_165_plusEqualOp)
HXDLIN( 165)		{
HXDLIN( 165)			Float y = b->y;
HXDLIN( 165)			a->set_x((a->x + b->x));
HXDLIN( 165)			a->set_y((a->y + y));
            		}
HXDLIN( 165)		{
HXDLIN( 165)			 ::flixel::math::FlxBasePoint _this = b;
HXDLIN( 165)			if (_this->_weak) {
HXDLIN( 165)				_this->put();
            			}
            		}
HXDLIN( 165)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,plusEqualOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::minusEqualOp( ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_175_minusEqualOp)
HXDLIN( 175)		{
HXDLIN( 175)			Float y = b->y;
HXDLIN( 175)			a->set_x((a->x - b->x));
HXDLIN( 175)			a->set_y((a->y - y));
            		}
HXDLIN( 175)		{
HXDLIN( 175)			 ::flixel::math::FlxBasePoint _this = b;
HXDLIN( 175)			if (_this->_weak) {
HXDLIN( 175)				_this->put();
            			}
            		}
HXDLIN( 175)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,minusEqualOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::scaleEqualOp( ::flixel::math::FlxBasePoint a,Float b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_185_scaleEqualOp)
HXDLIN( 185)		a->set_x((a->x * b));
HXDLIN( 185)		a->set_y((a->y * b));
HXDLIN( 185)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,scaleEqualOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::plusFlashOp( ::flixel::math::FlxBasePoint a, ::openfl::geom::Point b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_196_plusFlashOp)
HXLINE( 197)		Float x = (a->x + b->x);
HXDLIN( 197)		Float y = (a->y + b->y);
HXDLIN( 197)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 197)		point->_inPool = false;
HXDLIN( 197)		 ::flixel::math::FlxBasePoint result = point;
HXLINE( 198)		{
HXLINE( 198)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN( 198)			if (_this->_weak) {
HXLINE( 198)				_this->put();
            			}
            		}
HXLINE( 199)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,plusFlashOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::minusFlashOp( ::flixel::math::FlxBasePoint a, ::openfl::geom::Point b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_208_minusFlashOp)
HXLINE( 209)		Float x = (a->x - b->x);
HXDLIN( 209)		Float y = (a->y - b->y);
HXDLIN( 209)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 209)		point->_inPool = false;
HXDLIN( 209)		 ::flixel::math::FlxBasePoint result = point;
HXLINE( 210)		{
HXLINE( 210)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN( 210)			if (_this->_weak) {
HXLINE( 210)				_this->put();
            			}
            		}
HXLINE( 211)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,minusFlashOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::minusFlashOp2( ::openfl::geom::Point a, ::flixel::math::FlxBasePoint b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_220_minusFlashOp2)
HXLINE( 221)		Float x = (a->x - b->x);
HXDLIN( 221)		Float y = (a->y - b->y);
HXDLIN( 221)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 221)		point->_inPool = false;
HXDLIN( 221)		 ::flixel::math::FlxBasePoint result = point;
HXLINE( 222)		{
HXLINE( 222)			 ::flixel::math::FlxBasePoint _this = b;
HXDLIN( 222)			if (_this->_weak) {
HXLINE( 222)				_this->put();
            			}
            		}
HXLINE( 223)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,minusFlashOp2,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::plusEqualFlashOp( ::flixel::math::FlxBasePoint a, ::openfl::geom::Point b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_233_plusEqualFlashOp)
HXDLIN( 233)		Float y = b->y;
HXDLIN( 233)		a->set_x((a->x + b->x));
HXDLIN( 233)		a->set_y((a->y + y));
HXDLIN( 233)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,plusEqualFlashOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::minusEqualFlashOp( ::flixel::math::FlxBasePoint a, ::openfl::geom::Point b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_243_minusEqualFlashOp)
HXDLIN( 243)		Float y = b->y;
HXDLIN( 243)		a->set_x((a->x - b->x));
HXDLIN( 243)		a->set_y((a->y - y));
HXDLIN( 243)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,minusEqualFlashOp,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::_new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_300__new)
HXLINE( 302)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 302)		point->_inPool = false;
HXLINE( 300)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,_new,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::set( ::flixel::math::FlxBasePoint this1,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_312_set)
HXLINE( 313)		this1->set_x(x);
HXLINE( 314)		this1->set_y(y);
HXLINE( 315)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,set,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::addPoint( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_370_addPoint)
HXDLIN( 370)		{
HXDLIN( 370)			Float y = point->y;
HXDLIN( 370)			this1->set_x((this1->x + point->x));
HXDLIN( 370)			this1->set_y((this1->y + y));
            		}
HXDLIN( 370)		{
HXDLIN( 370)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN( 370)			if (_this->_weak) {
HXDLIN( 370)				_this->put();
            			}
            		}
HXDLIN( 370)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,addPoint,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::subtractPoint( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_422_subtractPoint)
HXLINE( 423)		{
HXLINE( 423)			Float y = point->y;
HXDLIN( 423)			this1->set_x((this1->x - point->x));
HXDLIN( 423)			this1->set_y((this1->y - y));
            		}
HXLINE( 424)		{
HXLINE( 424)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN( 424)			if (_this->_weak) {
HXLINE( 424)				_this->put();
            			}
            		}
HXLINE( 425)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,subtractPoint,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::scalePoint( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_477_scalePoint)
HXLINE( 478)		{
HXLINE( 478)			Float y = point->y;
HXDLIN( 478)			this1->set_x((this1->x * point->x));
HXDLIN( 478)			this1->set_y((this1->y * y));
            		}
HXLINE( 479)		{
HXLINE( 479)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN( 479)			if (_this->_weak) {
HXLINE( 479)				_this->put();
            			}
            		}
HXLINE( 480)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,scalePoint,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::scaleNew( ::flixel::math::FlxBasePoint this1,Float k){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_491_scaleNew)
HXDLIN( 491)		 ::flixel::math::FlxBasePoint p = null();
HXDLIN( 491)		 ::flixel::math::FlxBasePoint p1 = p;
HXDLIN( 491)		if (::hx::IsNull( p1 )) {
HXDLIN( 491)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 491)			point->_inPool = false;
HXDLIN( 491)			p1 = point;
            		}
HXDLIN( 491)		Float y = this1->y;
HXDLIN( 491)		p1->set_x(this1->x);
HXDLIN( 491)		p1->set_y(y);
HXDLIN( 491)		 ::flixel::math::FlxBasePoint this2 = p1;
HXDLIN( 491)		this2->set_x((this2->x * k));
HXDLIN( 491)		this2->set_y((this2->y * k));
HXDLIN( 491)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,scaleNew,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::addNew( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_502_addNew)
HXDLIN( 502)		 ::flixel::math::FlxBasePoint p1 = null();
HXDLIN( 502)		 ::flixel::math::FlxBasePoint p2 = p1;
HXDLIN( 502)		if (::hx::IsNull( p2 )) {
HXDLIN( 502)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 502)			point->_inPool = false;
HXDLIN( 502)			p2 = point;
            		}
HXDLIN( 502)		Float y = this1->y;
HXDLIN( 502)		p2->set_x(this1->x);
HXDLIN( 502)		p2->set_y(y);
HXDLIN( 502)		 ::flixel::math::FlxBasePoint this2 = p2;
HXDLIN( 502)		{
HXDLIN( 502)			Float y1 = p->y;
HXDLIN( 502)			this2->set_x((this2->x + p->x));
HXDLIN( 502)			this2->set_y((this2->y + y1));
            		}
HXDLIN( 502)		{
HXDLIN( 502)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 502)			if (_this->_weak) {
HXDLIN( 502)				_this->put();
            			}
            		}
HXDLIN( 502)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,addNew,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::subtractNew( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_513_subtractNew)
HXDLIN( 513)		 ::flixel::math::FlxBasePoint p1 = null();
HXDLIN( 513)		 ::flixel::math::FlxBasePoint p2 = p1;
HXDLIN( 513)		if (::hx::IsNull( p2 )) {
HXDLIN( 513)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 513)			point->_inPool = false;
HXDLIN( 513)			p2 = point;
            		}
HXDLIN( 513)		Float y = this1->y;
HXDLIN( 513)		p2->set_x(this1->x);
HXDLIN( 513)		p2->set_y(y);
HXDLIN( 513)		 ::flixel::math::FlxBasePoint this2 = p2;
HXDLIN( 513)		{
HXDLIN( 513)			Float y1 = p->y;
HXDLIN( 513)			this2->set_x((this2->x - p->x));
HXDLIN( 513)			this2->set_y((this2->y - y1));
            		}
HXDLIN( 513)		{
HXDLIN( 513)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 513)			if (_this->_weak) {
HXDLIN( 513)				_this->put();
            			}
            		}
HXDLIN( 513)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,subtractNew,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::copyFromFlash( ::flixel::math::FlxBasePoint this1, ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_550_copyFromFlash)
HXDLIN( 550)		return this1->set(p->x,p->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,copyFromFlash,return )

 ::openfl::geom::Point FlxPoint_Impl__obj::copyToFlash( ::flixel::math::FlxBasePoint this1, ::openfl::geom::Point p){
            	HX_GC_STACKFRAME(&_hx_pos_6689cf469d632363_591_copyToFlash)
HXDLIN( 591)		 ::openfl::geom::Point p1;
HXDLIN( 591)		if (::hx::IsNotNull( p )) {
HXDLIN( 591)			p1 = p;
            		}
            		else {
HXDLIN( 591)			p1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXDLIN( 591)		p1->x = this1->x;
HXDLIN( 591)		p1->y = this1->y;
HXDLIN( 591)		return p1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,copyToFlash,return )

 ::openfl::geom::Point FlxPoint_Impl__obj::addToFlash( ::flixel::math::FlxBasePoint this1, ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_601_addToFlash)
HXLINE( 602)		 ::openfl::geom::Point p1 = p;
HXDLIN( 602)		p1->x = (p1->x + this1->x);
HXLINE( 603)		 ::openfl::geom::Point p2 = p;
HXDLIN( 603)		p2->y = (p2->y + this1->y);
HXLINE( 605)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,addToFlash,return )

 ::openfl::geom::Point FlxPoint_Impl__obj::subtractFromFlash( ::flixel::math::FlxBasePoint this1, ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_615_subtractFromFlash)
HXLINE( 616)		 ::openfl::geom::Point p1 = p;
HXDLIN( 616)		p1->x = (p1->x - this1->x);
HXLINE( 617)		 ::openfl::geom::Point p2 = p;
HXDLIN( 617)		p2->y = (p2->y - this1->y);
HXLINE( 619)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,subtractFromFlash,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::floor( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_626_floor)
HXLINE( 627)		this1->set_x(( (Float)(::Math_obj::floor(this1->x)) ));
HXLINE( 628)		this1->set_y(( (Float)(::Math_obj::floor(this1->y)) ));
HXLINE( 629)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,floor,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::ceil( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_636_ceil)
HXLINE( 637)		this1->set_x(( (Float)(::Math_obj::ceil(this1->x)) ));
HXLINE( 638)		this1->set_y(( (Float)(::Math_obj::ceil(this1->y)) ));
HXLINE( 639)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,ceil,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::round( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_646_round)
HXLINE( 647)		this1->set_x(( (Float)(::Math_obj::round(this1->x)) ));
HXLINE( 648)		this1->set_y(( (Float)(::Math_obj::round(this1->y)) ));
HXLINE( 649)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,round,return )

bool FlxPoint_Impl__obj::inCoords( ::flixel::math::FlxBasePoint this1,Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_663_inCoords)
HXDLIN( 663)		return ::flixel::math::FlxMath_obj::pointInCoordinates(this1->x,this1->y,x,y,width,height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxPoint_Impl__obj,inCoords,return )

bool FlxPoint_Impl__obj::inRect( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_674_inRect)
HXDLIN( 674)		return ::flixel::math::FlxMath_obj::pointInFlxRect(this1->x,this1->y,rect);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,inRect,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::pivotRadians( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float radians){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_687_pivotRadians)
HXLINE( 688)		{
HXLINE( 688)			 ::flixel::math::FlxBasePoint this2 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN( 688)			{
HXLINE( 688)				Float y = this1->y;
HXDLIN( 688)				this2->set_x(this1->x);
HXDLIN( 688)				this2->set_y(y);
            			}
HXDLIN( 688)			{
HXLINE( 688)				 ::flixel::math::FlxBasePoint _this = this1;
HXDLIN( 688)				if (_this->_weak) {
HXLINE( 688)					_this->put();
            				}
            			}
HXDLIN( 688)			 ::flixel::math::FlxBasePoint this3 = this2;
HXDLIN( 688)			{
HXLINE( 688)				Float y1 = pivot->y;
HXDLIN( 688)				this3->set_x((this3->x - pivot->x));
HXDLIN( 688)				this3->set_y((this3->y - y1));
            			}
HXDLIN( 688)			{
HXLINE( 688)				 ::flixel::math::FlxBasePoint _this1 = pivot;
HXDLIN( 688)				if (_this1->_weak) {
HXLINE( 688)					_this1->put();
            				}
            			}
            		}
HXLINE( 689)		{
HXLINE( 689)			 ::flixel::math::FlxBasePoint this4 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN( 689)			Float rads = (::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1) + radians);
HXDLIN( 689)			Float len = ::Math_obj::sqrt(((this4->x * this4->x) + (this4->y * this4->y)));
HXDLIN( 689)			this4->set_x((len * ::Math_obj::cos(rads)));
HXDLIN( 689)			this4->set_y((len * ::Math_obj::sin(rads)));
            		}
HXLINE( 690)		{
HXLINE( 690)			Float y2 = (::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1->y + pivot->y);
HXDLIN( 690)			this1->set_x((::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1->x + pivot->x));
HXDLIN( 690)			this1->set_y(y2);
            		}
HXLINE( 691)		{
HXLINE( 691)			 ::flixel::math::FlxBasePoint _this2 = pivot;
HXDLIN( 691)			if (_this2->_weak) {
HXLINE( 691)				_this2->put();
            			}
            		}
HXLINE( 692)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,pivotRadians,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::pivotDegrees( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float degrees){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_706_pivotDegrees)
HXDLIN( 706)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::pivotRadians(this1,pivot,(degrees * (::Math_obj::PI / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,pivotDegrees,return )

Float FlxPoint_Impl__obj::radiansTo( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_768_radiansTo)
HXDLIN( 768)		Float x = (point->x - this1->x);
HXDLIN( 768)		Float y = (point->y - this1->y);
HXDLIN( 768)		return ::Math_obj::atan2(y,x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,radiansTo,return )

Float FlxPoint_Impl__obj::radiansFrom( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_781_radiansFrom)
HXDLIN( 781)		Float x = (this1->x - point->x);
HXDLIN( 781)		Float y = (this1->y - point->y);
HXDLIN( 781)		return ::Math_obj::atan2(y,x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,radiansFrom,return )

Float FlxPoint_Impl__obj::degreesTo( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_794_degreesTo)
HXDLIN( 794)		Float x = (point->x - this1->x);
HXDLIN( 794)		Float y = (point->y - this1->y);
HXDLIN( 794)		return (::Math_obj::atan2(y,x) * (( (Float)(180) ) / ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,degreesTo,return )

Float FlxPoint_Impl__obj::degreesFrom( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_807_degreesFrom)
HXDLIN( 807)		Float x = (this1->x - point->x);
HXDLIN( 807)		Float y = (this1->y - point->y);
HXDLIN( 807)		return (::Math_obj::atan2(y,x) * (( (Float)(180) ) / ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,degreesFrom,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::transform( ::flixel::math::FlxBasePoint this1, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_816_transform)
HXLINE( 817)		Float x1 = (((this1->x * matrix->a) + (this1->y * matrix->c)) + matrix->tx);
HXLINE( 818)		Float y1 = (((this1->x * matrix->b) + (this1->y * matrix->d)) + matrix->ty);
HXLINE( 820)		this1->set_x(x1);
HXDLIN( 820)		this1->set_y(y1);
HXDLIN( 820)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,transform,return )

Float FlxPoint_Impl__obj::dot( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_831_dot)
HXDLIN( 831)		Float dp = ((this1->x * p->x) + (this1->y * p->y));
HXDLIN( 831)		{
HXDLIN( 831)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 831)			if (_this->_weak) {
HXDLIN( 831)				_this->put();
            			}
            		}
HXDLIN( 831)		return dp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,dot,return )

Float FlxPoint_Impl__obj::dotProduct( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_841_dotProduct)
HXLINE( 842)		Float dp = ((this1->x * p->x) + (this1->y * p->y));
HXLINE( 843)		{
HXLINE( 843)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 843)			if (_this->_weak) {
HXLINE( 843)				_this->put();
            			}
            		}
HXLINE( 844)		return dp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,dotProduct,return )

Float FlxPoint_Impl__obj::dotProductWeak( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_856_dotProductWeak)
HXDLIN( 856)		return ((this1->x * p->x) + (this1->y * p->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,dotProductWeak,return )

Float FlxPoint_Impl__obj::dotProdWithNormalizing( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_866_dotProdWithNormalizing)
HXLINE( 867)		 ::flixel::math::FlxBasePoint p1 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN( 867)		if (::hx::IsNull( p1 )) {
HXLINE( 867)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 867)			point->_inPool = false;
HXDLIN( 867)			p1 = point;
            		}
HXDLIN( 867)		Float y = p->y;
HXDLIN( 867)		p1->set_x(p->x);
HXDLIN( 867)		p1->set_y(y);
HXDLIN( 867)		 ::flixel::math::FlxBasePoint normalized = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::normalize(p1);
HXLINE( 868)		{
HXLINE( 868)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 868)			if (_this->_weak) {
HXLINE( 868)				_this->put();
            			}
            		}
HXLINE( 869)		return ((this1->x * normalized->x) + (this1->y * normalized->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,dotProdWithNormalizing,return )

bool FlxPoint_Impl__obj::isPerpendicular( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_880_isPerpendicular)
HXDLIN( 880)		Float dp = ((this1->x * p->x) + (this1->y * p->y));
HXDLIN( 880)		{
HXDLIN( 880)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 880)			if (_this->_weak) {
HXDLIN( 880)				_this->put();
            			}
            		}
HXDLIN( 880)		return (::Math_obj::abs(dp) < ((Float)9.9999999999999984e-015));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,isPerpendicular,return )

Float FlxPoint_Impl__obj::crossProductLength( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_890_crossProductLength)
HXLINE( 891)		Float cp = ((this1->x * p->y) - (this1->y * p->x));
HXLINE( 892)		{
HXLINE( 892)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 892)			if (_this->_weak) {
HXLINE( 892)				_this->put();
            			}
            		}
HXLINE( 893)		return cp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,crossProductLength,return )

Float FlxPoint_Impl__obj::crossProductLengthWeak( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_905_crossProductLengthWeak)
HXDLIN( 905)		return ((this1->x * p->y) - (this1->y * p->x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,crossProductLengthWeak,return )

bool FlxPoint_Impl__obj::isParallel( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_915_isParallel)
HXLINE( 916)		bool pp = (::Math_obj::abs(((this1->x * p->y) - (this1->y * p->x))) < ((Float)9.9999999999999984e-015));
HXLINE( 917)		{
HXLINE( 917)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 917)			if (_this->_weak) {
HXLINE( 917)				_this->put();
            			}
            		}
HXLINE( 918)		return pp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,isParallel,return )

bool FlxPoint_Impl__obj::isParallelWeak( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_930_isParallelWeak)
HXDLIN( 930)		return (::Math_obj::abs(((this1->x * p->y) - (this1->y * p->x))) < ((Float)9.9999999999999984e-015));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,isParallelWeak,return )

bool FlxPoint_Impl__obj::isZero( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_940_isZero)
HXDLIN( 940)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXDLIN( 940)			return (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXDLIN( 940)			return false;
            		}
HXDLIN( 940)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,isZero,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::zero( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_947_zero)
HXLINE( 948)		this1->set_x(this1->set_y(( (Float)(0) )));
HXLINE( 949)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,zero,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::normalize( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_956_normalize)
HXLINE( 957)		bool _hx_tmp;
HXDLIN( 957)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE( 957)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 957)			_hx_tmp = false;
            		}
HXDLIN( 957)		if (_hx_tmp) {
HXLINE( 959)			return this1;
            		}
HXLINE( 961)		Float amount = (( (Float)(1) ) / ::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y))));
HXDLIN( 961)		this1->set_x((this1->x * amount));
HXDLIN( 961)		this1->set_y((this1->y * amount));
HXDLIN( 961)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,normalize,return )

bool FlxPoint_Impl__obj::isNormalized( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_969_isNormalized)
HXDLIN( 969)		return (::Math_obj::abs((((this1->x * this1->x) + (this1->y * this1->y)) - ( (Float)(1) ))) < ((Float)9.9999999999999984e-015));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,isNormalized,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::rotateByRadians( ::flixel::math::FlxBasePoint this1,Float rads){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_979_rotateByRadians)
HXLINE( 980)		Float s = ::Math_obj::sin(rads);
HXLINE( 981)		Float c = ::Math_obj::cos(rads);
HXLINE( 982)		Float tempX = this1->x;
HXLINE( 984)		this1->set_x(((tempX * c) - (this1->y * s)));
HXLINE( 985)		this1->set_y(((tempX * s) + (this1->y * c)));
HXLINE( 987)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,rotateByRadians,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::rotateByDegrees( ::flixel::math::FlxBasePoint this1,Float degs){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_998_rotateByDegrees)
HXDLIN( 998)		Float rads = (degs * (::Math_obj::PI / ( (Float)(180) )));
HXDLIN( 998)		Float s = ::Math_obj::sin(rads);
HXDLIN( 998)		Float c = ::Math_obj::cos(rads);
HXDLIN( 998)		Float tempX = this1->x;
HXDLIN( 998)		this1->set_x(((tempX * c) - (this1->y * s)));
HXDLIN( 998)		this1->set_y(((tempX * s) + (this1->y * c)));
HXDLIN( 998)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,rotateByDegrees,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::rotateWithTrig( ::flixel::math::FlxBasePoint this1,Float sin,Float cos){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1009_rotateWithTrig)
HXLINE(1010)		Float tempX = this1->x;
HXLINE(1011)		this1->set_x(((tempX * cos) - (this1->y * sin)));
HXLINE(1012)		this1->set_y(((tempX * sin) + (this1->y * cos)));
HXLINE(1013)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,rotateWithTrig,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::setPolarRadians( ::flixel::math::FlxBasePoint this1,Float length,Float radians){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1026_setPolarRadians)
HXLINE(1027)		this1->set_x((length * ::Math_obj::cos(radians)));
HXLINE(1028)		this1->set_y((length * ::Math_obj::sin(radians)));
HXLINE(1029)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,setPolarRadians,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::setPolarDegrees( ::flixel::math::FlxBasePoint this1,Float length,Float degrees){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1043_setPolarDegrees)
HXDLIN(1043)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(this1,length,(degrees * (::Math_obj::PI / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,setPolarDegrees,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::rightNormal( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1050_rightNormal)
HXLINE(1051)		if (::hx::IsNull( p )) {
HXLINE(1053)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1053)			point->_inPool = false;
HXDLIN(1053)			p = point;
            		}
HXLINE(1055)		{
HXLINE(1055)			Float y = this1->x;
HXDLIN(1055)			p->set_x(-(this1->y));
HXDLIN(1055)			p->set_y(y);
            		}
HXLINE(1056)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,rightNormal,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::leftNormal( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1063_leftNormal)
HXLINE(1064)		if (::hx::IsNull( p )) {
HXLINE(1066)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1066)			point->_inPool = false;
HXDLIN(1066)			p = point;
            		}
HXLINE(1068)		{
HXLINE(1068)			Float y = -(this1->x);
HXDLIN(1068)			p->set_x(this1->y);
HXDLIN(1068)			p->set_y(y);
            		}
HXLINE(1069)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,leftNormal,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::negate( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1076_negate)
HXLINE(1077)		this1->set_x((this1->x * ( (Float)(-1) )));
HXLINE(1078)		this1->set_y((this1->y * ( (Float)(-1) )));
HXLINE(1079)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,negate,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::negateNew( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1084_negateNew)
HXDLIN(1084)		 ::flixel::math::FlxBasePoint p = null();
HXDLIN(1084)		 ::flixel::math::FlxBasePoint p1 = p;
HXDLIN(1084)		if (::hx::IsNull( p1 )) {
HXDLIN(1084)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1084)			point->_inPool = false;
HXDLIN(1084)			p1 = point;
            		}
HXDLIN(1084)		Float y = this1->y;
HXDLIN(1084)		p1->set_x(this1->x);
HXDLIN(1084)		p1->set_y(y);
HXDLIN(1084)		 ::flixel::math::FlxBasePoint this2 = p1;
HXDLIN(1084)		this2->set_x((this2->x * ( (Float)(-1) )));
HXDLIN(1084)		this2->set_y((this2->y * ( (Float)(-1) )));
HXDLIN(1084)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,negateNew,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::projectTo( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p, ::flixel::math::FlxBasePoint proj){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1096_projectTo)
HXLINE(1097)		Float dp = ((this1->x * p->x) + (this1->y * p->y));
HXLINE(1098)		Float lenSq = ((p->x * p->x) + (p->y * p->y));
HXLINE(1100)		if (::hx::IsNull( proj )) {
HXLINE(1102)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1102)			point->_inPool = false;
HXDLIN(1102)			proj = point;
            		}
HXLINE(1105)		{
HXLINE(1105)			Float y = ((dp * p->y) / lenSq);
HXDLIN(1105)			proj->set_x(((dp * p->x) / lenSq));
HXDLIN(1105)			proj->set_y(y);
            		}
HXLINE(1106)		{
HXLINE(1106)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN(1106)			if (_this->_weak) {
HXLINE(1106)				_this->put();
            			}
            		}
HXLINE(1107)		return proj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,projectTo,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::projectToNormalized( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p, ::flixel::math::FlxBasePoint proj){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1118_projectToNormalized)
HXLINE(1119)		 ::flixel::math::FlxBasePoint proj1 = proj;
HXDLIN(1119)		Float dp = ((this1->x * p->x) + (this1->y * p->y));
HXDLIN(1119)		if (::hx::IsNull( proj1 )) {
HXLINE(1119)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1119)			point->_inPool = false;
HXDLIN(1119)			proj1 = point;
            		}
HXDLIN(1119)		Float y = (dp * p->y);
HXDLIN(1119)		proj1->set_x((dp * p->x));
HXDLIN(1119)		proj1->set_y(y);
HXDLIN(1119)		proj = proj1;
HXLINE(1120)		{
HXLINE(1120)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN(1120)			if (_this->_weak) {
HXLINE(1120)				_this->put();
            			}
            		}
HXLINE(1121)		return proj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,projectToNormalized,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::projectToNormalizedWeak( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p, ::flixel::math::FlxBasePoint proj){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1133_projectToNormalizedWeak)
HXLINE(1134)		Float dp = ((this1->x * p->x) + (this1->y * p->y));
HXLINE(1136)		if (::hx::IsNull( proj )) {
HXLINE(1138)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1138)			point->_inPool = false;
HXDLIN(1138)			proj = point;
            		}
HXLINE(1141)		Float y = (dp * p->y);
HXDLIN(1141)		proj->set_x((dp * p->x));
HXDLIN(1141)		proj->set_y(y);
HXDLIN(1141)		return proj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,projectToNormalizedWeak,return )

Float FlxPoint_Impl__obj::perpProduct( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1148_perpProduct)
HXLINE(1149)		Float pp = ((this1->y * p->x) + (-(this1->x) * p->y));
HXLINE(1150)		{
HXLINE(1150)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN(1150)			if (_this->_weak) {
HXLINE(1150)				_this->put();
            			}
            		}
HXLINE(1151)		return pp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,perpProduct,return )

Float FlxPoint_Impl__obj::perpProductWeak( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1160_perpProductWeak)
HXDLIN(1160)		return ((this1->y * p->x) + (-(this1->x) * p->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,perpProductWeak,return )

Float FlxPoint_Impl__obj::ratio( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1172_ratio)
HXLINE(1173)		Float r;
HXDLIN(1173)		if ((::Math_obj::abs(((this1->x * p->y) - (this1->y * p->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE(1173)			r = ::Math_obj::NaN;
            		}
            		else {
HXLINE(1173)			bool r1;
HXDLIN(1173)			if (!((((this1->x * this1->x) + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE(1173)				r1 = (((p->x * p->x) + (p->y * p->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE(1173)				r1 = true;
            			}
HXDLIN(1173)			if (r1) {
HXLINE(1173)				r = ::Math_obj::NaN;
            			}
            			else {
HXLINE(1173)				 ::flixel::math::FlxBasePoint p1 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1173)				if (::hx::IsNull( p1 )) {
HXLINE(1173)					 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1173)					point->_inPool = false;
HXDLIN(1173)					p1 = point;
            				}
HXDLIN(1173)				Float y = b->y;
HXDLIN(1173)				p1->set_x(b->x);
HXDLIN(1173)				p1->set_y(y);
HXDLIN(1173)				::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1 = p1;
HXDLIN(1173)				{
HXLINE(1173)					 ::flixel::math::FlxBasePoint this2 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1173)					Float y1 = a->y;
HXDLIN(1173)					this2->set_x((this2->x - a->x));
HXDLIN(1173)					this2->set_y((this2->y - y1));
            				}
HXDLIN(1173)				 ::flixel::math::FlxBasePoint this3 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1173)				r = (((this3->y * p->x) + (-(this3->x) * p->y)) / ((this1->y * p->x) + (-(this1->x) * p->y)));
            			}
            		}
HXLINE(1174)		{
HXLINE(1174)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN(1174)			if (_this->_weak) {
HXLINE(1174)				_this->put();
            			}
            		}
HXLINE(1175)		{
HXLINE(1175)			 ::flixel::math::FlxBasePoint _this1 = b;
HXDLIN(1175)			if (_this1->_weak) {
HXLINE(1175)				_this1->put();
            			}
            		}
HXLINE(1176)		{
HXLINE(1176)			 ::flixel::math::FlxBasePoint _this2 = p;
HXDLIN(1176)			if (_this2->_weak) {
HXLINE(1176)				_this2->put();
            			}
            		}
HXLINE(1177)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxPoint_Impl__obj,ratio,return )

Float FlxPoint_Impl__obj::ratioWeak( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1190_ratioWeak)
HXLINE(1191)		if ((::Math_obj::abs(((this1->x * p->y) - (this1->y * p->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE(1192)			return ::Math_obj::NaN;
            		}
HXLINE(1193)		bool _hx_tmp;
HXDLIN(1193)		if (!((((this1->x * this1->x) + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE(1193)			_hx_tmp = (((p->x * p->x) + (p->y * p->y)) < ((Float)9.9999999999999984e-015));
            		}
            		else {
HXLINE(1193)			_hx_tmp = true;
            		}
HXDLIN(1193)		if (_hx_tmp) {
HXLINE(1194)			return ::Math_obj::NaN;
            		}
HXLINE(1196)		 ::flixel::math::FlxBasePoint p1 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1196)		if (::hx::IsNull( p1 )) {
HXLINE(1196)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1196)			point->_inPool = false;
HXDLIN(1196)			p1 = point;
            		}
HXDLIN(1196)		Float y = b->y;
HXDLIN(1196)		p1->set_x(b->x);
HXDLIN(1196)		p1->set_y(y);
HXDLIN(1196)		::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1 = p1;
HXLINE(1197)		{
HXLINE(1197)			 ::flixel::math::FlxBasePoint this2 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1197)			Float y1 = a->y;
HXDLIN(1197)			this2->set_x((this2->x - a->x));
HXDLIN(1197)			this2->set_y((this2->y - y1));
            		}
HXLINE(1199)		 ::flixel::math::FlxBasePoint this3 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1199)		return (((this3->y * p->x) + (-(this3->x) * p->y)) / ((this1->y * p->x) + (-(this1->x) * p->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxPoint_Impl__obj,ratioWeak,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::findIntersection( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b, ::flixel::math::FlxBasePoint p, ::flixel::math::FlxBasePoint intersection){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1211_findIntersection)
HXLINE(1212)		Float t;
HXDLIN(1212)		if ((::Math_obj::abs(((this1->x * p->y) - (this1->y * p->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE(1212)			t = ::Math_obj::NaN;
            		}
            		else {
HXLINE(1212)			bool t1;
HXDLIN(1212)			if (!((((this1->x * this1->x) + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE(1212)				t1 = (((p->x * p->x) + (p->y * p->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE(1212)				t1 = true;
            			}
HXDLIN(1212)			if (t1) {
HXLINE(1212)				t = ::Math_obj::NaN;
            			}
            			else {
HXLINE(1212)				 ::flixel::math::FlxBasePoint p1 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1212)				if (::hx::IsNull( p1 )) {
HXLINE(1212)					 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1212)					point->_inPool = false;
HXDLIN(1212)					p1 = point;
            				}
HXDLIN(1212)				Float y = b->y;
HXDLIN(1212)				p1->set_x(b->x);
HXDLIN(1212)				p1->set_y(y);
HXDLIN(1212)				::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1 = p1;
HXDLIN(1212)				{
HXLINE(1212)					 ::flixel::math::FlxBasePoint this2 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1212)					Float y1 = a->y;
HXDLIN(1212)					this2->set_x((this2->x - a->x));
HXDLIN(1212)					this2->set_y((this2->y - y1));
            				}
HXDLIN(1212)				 ::flixel::math::FlxBasePoint this3 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1212)				t = (((this3->y * p->x) + (-(this3->x) * p->y)) / ((this1->y * p->x) + (-(this1->x) * p->y)));
            			}
            		}
HXLINE(1214)		if (::hx::IsNull( intersection )) {
HXLINE(1216)			 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1216)			point1->_inPool = false;
HXDLIN(1216)			intersection = point1;
            		}
HXLINE(1219)		if (::Math_obj::isNaN(t)) {
HXLINE(1221)			Float y2 = ::Math_obj::NaN;
HXDLIN(1221)			intersection->set_x(::Math_obj::NaN);
HXDLIN(1221)			intersection->set_y(y2);
            		}
            		else {
HXLINE(1225)			Float y3 = (a->y + (t * this1->y));
HXDLIN(1225)			intersection->set_x((a->x + (t * this1->x)));
HXDLIN(1225)			intersection->set_y(y3);
            		}
HXLINE(1228)		{
HXLINE(1228)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN(1228)			if (_this->_weak) {
HXLINE(1228)				_this->put();
            			}
            		}
HXLINE(1229)		{
HXLINE(1229)			 ::flixel::math::FlxBasePoint _this1 = b;
HXDLIN(1229)			if (_this1->_weak) {
HXLINE(1229)				_this1->put();
            			}
            		}
HXLINE(1230)		{
HXLINE(1230)			 ::flixel::math::FlxBasePoint _this2 = p;
HXDLIN(1230)			if (_this2->_weak) {
HXLINE(1230)				_this2->put();
            			}
            		}
HXLINE(1231)		return intersection;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxPoint_Impl__obj,findIntersection,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::findIntersectionInBounds( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b, ::flixel::math::FlxBasePoint p, ::flixel::math::FlxBasePoint intersection){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1243_findIntersectionInBounds)
HXLINE(1244)		if (::hx::IsNull( intersection )) {
HXLINE(1246)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1246)			point->_inPool = false;
HXDLIN(1246)			intersection = point;
            		}
HXLINE(1249)		Float t1;
HXDLIN(1249)		if ((::Math_obj::abs(((this1->x * p->y) - (this1->y * p->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE(1249)			t1 = ::Math_obj::NaN;
            		}
            		else {
HXLINE(1249)			bool t11;
HXDLIN(1249)			if (!((((this1->x * this1->x) + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE(1249)				t11 = (((p->x * p->x) + (p->y * p->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE(1249)				t11 = true;
            			}
HXDLIN(1249)			if (t11) {
HXLINE(1249)				t1 = ::Math_obj::NaN;
            			}
            			else {
HXLINE(1249)				 ::flixel::math::FlxBasePoint p1 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1249)				if (::hx::IsNull( p1 )) {
HXLINE(1249)					 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1249)					point1->_inPool = false;
HXDLIN(1249)					p1 = point1;
            				}
HXDLIN(1249)				Float y = b->y;
HXDLIN(1249)				p1->set_x(b->x);
HXDLIN(1249)				p1->set_y(y);
HXDLIN(1249)				::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1 = p1;
HXDLIN(1249)				{
HXLINE(1249)					 ::flixel::math::FlxBasePoint this2 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1249)					Float y1 = a->y;
HXDLIN(1249)					this2->set_x((this2->x - a->x));
HXDLIN(1249)					this2->set_y((this2->y - y1));
            				}
HXDLIN(1249)				 ::flixel::math::FlxBasePoint this3 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1249)				t1 = (((this3->y * p->x) + (-(this3->x) * p->y)) / ((this1->y * p->x) + (-(this1->x) * p->y)));
            			}
            		}
HXLINE(1250)		Float t2;
HXDLIN(1250)		if ((::Math_obj::abs(((p->x * this1->y) - (p->y * this1->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE(1250)			t2 = ::Math_obj::NaN;
            		}
            		else {
HXLINE(1250)			bool t21;
HXDLIN(1250)			if (!((((p->x * p->x) + (p->y * p->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE(1250)				t21 = (((this1->x * this1->x) + (this1->y * this1->y)) < ((Float)9.9999999999999984e-015));
            			}
            			else {
HXLINE(1250)				t21 = true;
            			}
HXDLIN(1250)			if (t21) {
HXLINE(1250)				t2 = ::Math_obj::NaN;
            			}
            			else {
HXLINE(1250)				 ::flixel::math::FlxBasePoint p2 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1250)				if (::hx::IsNull( p2 )) {
HXLINE(1250)					 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1250)					point2->_inPool = false;
HXDLIN(1250)					p2 = point2;
            				}
HXDLIN(1250)				Float y2 = a->y;
HXDLIN(1250)				p2->set_x(a->x);
HXDLIN(1250)				p2->set_y(y2);
HXDLIN(1250)				::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1 = p2;
HXDLIN(1250)				{
HXLINE(1250)					 ::flixel::math::FlxBasePoint this4 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1250)					Float y3 = b->y;
HXDLIN(1250)					this4->set_x((this4->x - b->x));
HXDLIN(1250)					this4->set_y((this4->y - y3));
            				}
HXDLIN(1250)				 ::flixel::math::FlxBasePoint this5 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1250)				t2 = (((this5->y * this1->x) + (-(this5->x) * this1->y)) / ((p->y * this1->x) + (-(p->x) * this1->y)));
            			}
            		}
HXLINE(1251)		bool _hx_tmp;
HXDLIN(1251)		bool _hx_tmp1;
HXDLIN(1251)		bool _hx_tmp2;
HXDLIN(1251)		bool _hx_tmp3;
HXDLIN(1251)		bool _hx_tmp4;
HXDLIN(1251)		if (!(::Math_obj::isNaN(t1))) {
HXLINE(1251)			_hx_tmp4 = !(::Math_obj::isNaN(t2));
            		}
            		else {
HXLINE(1251)			_hx_tmp4 = false;
            		}
HXDLIN(1251)		if (_hx_tmp4) {
HXLINE(1251)			_hx_tmp3 = (t1 > 0);
            		}
            		else {
HXLINE(1251)			_hx_tmp3 = false;
            		}
HXDLIN(1251)		if (_hx_tmp3) {
HXLINE(1251)			_hx_tmp2 = (t1 <= 1);
            		}
            		else {
HXLINE(1251)			_hx_tmp2 = false;
            		}
HXDLIN(1251)		if (_hx_tmp2) {
HXLINE(1251)			_hx_tmp1 = (t2 > 0);
            		}
            		else {
HXLINE(1251)			_hx_tmp1 = false;
            		}
HXDLIN(1251)		if (_hx_tmp1) {
HXLINE(1251)			_hx_tmp = (t2 <= 1);
            		}
            		else {
HXLINE(1251)			_hx_tmp = false;
            		}
HXDLIN(1251)		if (_hx_tmp) {
HXLINE(1253)			Float y4 = (a->y + (t1 * this1->y));
HXDLIN(1253)			intersection->set_x((a->x + (t1 * this1->x)));
HXDLIN(1253)			intersection->set_y(y4);
            		}
            		else {
HXLINE(1257)			Float y5 = ::Math_obj::NaN;
HXDLIN(1257)			intersection->set_x(::Math_obj::NaN);
HXDLIN(1257)			intersection->set_y(y5);
            		}
HXLINE(1260)		{
HXLINE(1260)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN(1260)			if (_this->_weak) {
HXLINE(1260)				_this->put();
            			}
            		}
HXLINE(1261)		{
HXLINE(1261)			 ::flixel::math::FlxBasePoint _this1 = b;
HXDLIN(1261)			if (_this1->_weak) {
HXLINE(1261)				_this1->put();
            			}
            		}
HXLINE(1262)		{
HXLINE(1262)			 ::flixel::math::FlxBasePoint _this2 = p;
HXDLIN(1262)			if (_this2->_weak) {
HXLINE(1262)				_this2->put();
            			}
            		}
HXLINE(1263)		return intersection;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxPoint_Impl__obj,findIntersectionInBounds,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::truncate( ::flixel::math::FlxBasePoint this1,Float max){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1272_truncate)
HXLINE(1273)		{
HXLINE(1273)			Float l = ::Math_obj::min(max,::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y))));
HXDLIN(1273)			bool _hx_tmp;
HXDLIN(1273)			if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE(1273)				_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            			}
            			else {
HXLINE(1273)				_hx_tmp = false;
            			}
HXDLIN(1273)			if (!(_hx_tmp)) {
HXLINE(1273)				Float a = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(this1);
HXDLIN(1273)				this1->set_x((l * ::Math_obj::cos(a)));
HXDLIN(1273)				this1->set_y((l * ::Math_obj::sin(a)));
            			}
            		}
HXLINE(1274)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,truncate,return )

Float FlxPoint_Impl__obj::radiansBetween( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1284_radiansBetween)
HXLINE(1285)		Float rads = ::Math_obj::acos((((this1->x * p->x) + (this1->y * p->y)) / (::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y))) * ::Math_obj::sqrt(((p->x * p->x) + (p->y * p->y))))));
HXLINE(1286)		{
HXLINE(1286)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN(1286)			if (_this->_weak) {
HXLINE(1286)				_this->put();
            			}
            		}
HXLINE(1287)		return rads;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,radiansBetween,return )

Float FlxPoint_Impl__obj::degreesBetween( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1298_degreesBetween)
HXDLIN(1298)		Float rads = ::Math_obj::acos((((this1->x * p->x) + (this1->y * p->y)) / (::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y))) * ::Math_obj::sqrt(((p->x * p->x) + (p->y * p->y))))));
HXDLIN(1298)		{
HXDLIN(1298)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN(1298)			if (_this->_weak) {
HXDLIN(1298)				_this->put();
            			}
            		}
HXDLIN(1298)		return (rads * (( (Float)(180) ) / ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,degreesBetween,return )

int FlxPoint_Impl__obj::sign( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint a, ::flixel::math::FlxBasePoint b){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1308_sign)
HXLINE(1309)		Float signFl = (((a->x - this1->x) * (b->y - this1->y)) - ((a->y - this1->y) * (b->x - this1->x)));
HXLINE(1310)		{
HXLINE(1310)			 ::flixel::math::FlxBasePoint _this = a;
HXDLIN(1310)			if (_this->_weak) {
HXLINE(1310)				_this->put();
            			}
            		}
HXLINE(1311)		{
HXLINE(1311)			 ::flixel::math::FlxBasePoint _this1 = b;
HXDLIN(1311)			if (_this1->_weak) {
HXLINE(1311)				_this1->put();
            			}
            		}
HXLINE(1312)		if ((signFl == 0)) {
HXLINE(1314)			return 0;
            		}
HXLINE(1316)		return ::Math_obj::round((signFl / ::Math_obj::abs(signFl)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,sign,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::bounce( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint normal,::hx::Null< Float >  __o_bounceCoeff){
            		Float bounceCoeff = __o_bounceCoeff.Default(1);
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1361_bounce)
HXLINE(1362)		Float d = ((1 + bounceCoeff) * ((this1->x * normal->x) + (this1->y * normal->y)));
HXLINE(1363)		this1->set_x((this1->x - (d * normal->x)));
HXLINE(1364)		this1->set_y((this1->y - (d * normal->y)));
HXLINE(1365)		{
HXLINE(1365)			 ::flixel::math::FlxBasePoint _this = normal;
HXDLIN(1365)			if (_this->_weak) {
HXLINE(1365)				_this->put();
            			}
            		}
HXLINE(1366)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPoint_Impl__obj,bounce,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::bounceWithFriction( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint normal,::hx::Null< Float >  __o_bounceCoeff,::hx::Null< Float >  __o_friction){
            		Float bounceCoeff = __o_bounceCoeff.Default(1);
            		Float friction = __o_friction.Default(0);
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1378_bounceWithFriction)
HXLINE(1379)		 ::flixel::math::FlxBasePoint p = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::rightNormal(normal,::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point3);
HXDLIN(1379)		 ::flixel::math::FlxBasePoint proj = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point1;
HXDLIN(1379)		Float dp = ((this1->x * p->x) + (this1->y * p->y));
HXDLIN(1379)		if (::hx::IsNull( proj )) {
HXLINE(1379)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1379)			point->_inPool = false;
HXDLIN(1379)			proj = point;
            		}
HXDLIN(1379)		Float y = (dp * p->y);
HXDLIN(1379)		proj->set_x((dp * p->x));
HXDLIN(1379)		proj->set_y(y);
HXDLIN(1379)		 ::flixel::math::FlxBasePoint p1 = proj;
HXLINE(1380)		 ::flixel::math::FlxBasePoint proj1 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::_point2;
HXDLIN(1380)		Float dp1 = ((this1->x * normal->x) + (this1->y * normal->y));
HXDLIN(1380)		if (::hx::IsNull( proj1 )) {
HXLINE(1380)			 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1380)			point1->_inPool = false;
HXDLIN(1380)			proj1 = point1;
            		}
HXDLIN(1380)		Float y1 = (dp1 * normal->y);
HXDLIN(1380)		proj1->set_x((dp1 * normal->x));
HXDLIN(1380)		proj1->set_y(y1);
HXDLIN(1380)		 ::flixel::math::FlxBasePoint p2 = proj1;
HXLINE(1381)		Float bounceX = -(p2->x);
HXLINE(1382)		Float bounceY = -(p2->y);
HXLINE(1383)		Float frictionX = p1->x;
HXLINE(1384)		Float frictionY = p1->y;
HXLINE(1385)		this1->set_x(((bounceX * bounceCoeff) + (frictionX * friction)));
HXLINE(1386)		this1->set_y(((bounceY * bounceCoeff) + (frictionY * friction)));
HXLINE(1387)		{
HXLINE(1387)			 ::flixel::math::FlxBasePoint _this = normal;
HXDLIN(1387)			if (_this->_weak) {
HXLINE(1387)				_this->put();
            			}
            		}
HXLINE(1388)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxPoint_Impl__obj,bounceWithFriction,return )

bool FlxPoint_Impl__obj::isValid( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1398_isValid)
HXDLIN(1398)		bool _hx_tmp;
HXDLIN(1398)		bool _hx_tmp1;
HXDLIN(1398)		if (!(::Math_obj::isNaN(this1->x))) {
HXDLIN(1398)			_hx_tmp1 = !(::Math_obj::isNaN(this1->y));
            		}
            		else {
HXDLIN(1398)			_hx_tmp1 = false;
            		}
HXDLIN(1398)		if (_hx_tmp1) {
HXDLIN(1398)			_hx_tmp = ::Math_obj::isFinite(this1->x);
            		}
            		else {
HXDLIN(1398)			_hx_tmp = false;
            		}
HXDLIN(1398)		if (_hx_tmp) {
HXDLIN(1398)			return ::Math_obj::isFinite(this1->y);
            		}
            		else {
HXDLIN(1398)			return false;
            		}
HXDLIN(1398)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,isValid,return )

 ::flixel::math::FlxBasePoint FlxPoint_Impl__obj::clone( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1409_clone)
HXDLIN(1409)		 ::flixel::math::FlxBasePoint p1 = p;
HXDLIN(1409)		if (::hx::IsNull( p1 )) {
HXDLIN(1409)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1409)			point->_inPool = false;
HXDLIN(1409)			p1 = point;
            		}
HXDLIN(1409)		Float y = this1->y;
HXDLIN(1409)		p1->set_x(this1->x);
HXDLIN(1409)		p1->set_y(y);
HXDLIN(1409)		return p1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,clone,return )

Float FlxPoint_Impl__obj::get_x( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1414_get_x)
HXDLIN(1414)		return this1->x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_x,return )

Float FlxPoint_Impl__obj::set_x( ::flixel::math::FlxBasePoint this1,Float x){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1419_set_x)
HXDLIN(1419)		return this1->set_x(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,set_x,return )

Float FlxPoint_Impl__obj::get_y( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1424_get_y)
HXDLIN(1424)		return this1->y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_y,return )

Float FlxPoint_Impl__obj::set_y( ::flixel::math::FlxBasePoint this1,Float y){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1429_set_y)
HXDLIN(1429)		return this1->set_y(y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,set_y,return )

Float FlxPoint_Impl__obj::get_dx( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1433_get_dx)
HXLINE(1434)		bool _hx_tmp;
HXDLIN(1434)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE(1434)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE(1434)			_hx_tmp = false;
            		}
HXDLIN(1434)		if (_hx_tmp) {
HXLINE(1435)			return ( (Float)(0) );
            		}
HXLINE(1437)		return (this1->x / ::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_dx,return )

Float FlxPoint_Impl__obj::get_dy( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1441_get_dy)
HXLINE(1442)		bool _hx_tmp;
HXDLIN(1442)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE(1442)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE(1442)			_hx_tmp = false;
            		}
HXDLIN(1442)		if (_hx_tmp) {
HXLINE(1443)			return ( (Float)(0) );
            		}
HXLINE(1445)		return (this1->y / ::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_dy,return )

Float FlxPoint_Impl__obj::get_length( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1450_get_length)
HXDLIN(1450)		return ::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_length,return )

Float FlxPoint_Impl__obj::set_length( ::flixel::math::FlxBasePoint this1,Float l){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1454_set_length)
HXLINE(1455)		bool _hx_tmp;
HXDLIN(1455)		if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXLINE(1455)			_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE(1455)			_hx_tmp = false;
            		}
HXDLIN(1455)		if (!(_hx_tmp)) {
HXLINE(1457)			Float a = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(this1);
HXLINE(1458)			this1->set_x((l * ::Math_obj::cos(a)));
HXLINE(1459)			this1->set_y((l * ::Math_obj::sin(a)));
            		}
HXLINE(1461)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,set_length,return )

Float FlxPoint_Impl__obj::get_lengthSquared( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1466_get_lengthSquared)
HXDLIN(1466)		return ((this1->x * this1->x) + (this1->y * this1->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_lengthSquared,return )

Float FlxPoint_Impl__obj::get_degrees( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1471_get_degrees)
HXDLIN(1471)		Float _hx_tmp = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(this1);
HXDLIN(1471)		return (_hx_tmp * (( (Float)(180) ) / ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_degrees,return )

Float FlxPoint_Impl__obj::set_degrees( ::flixel::math::FlxBasePoint this1,Float degs){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1475_set_degrees)
HXLINE(1476)		{
HXLINE(1476)			Float rads = (degs * (::Math_obj::PI / ( (Float)(180) )));
HXDLIN(1476)			Float len = ::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y)));
HXDLIN(1476)			this1->set_x((len * ::Math_obj::cos(rads)));
HXDLIN(1476)			this1->set_y((len * ::Math_obj::sin(rads)));
            		}
HXLINE(1477)		return degs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,set_degrees,return )

Float FlxPoint_Impl__obj::get_radians( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1482_get_radians)
HXDLIN(1482)		Float x = this1->x;
HXDLIN(1482)		Float y = this1->y;
HXDLIN(1482)		return ::Math_obj::atan2(y,x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_radians,return )

Float FlxPoint_Impl__obj::set_radians( ::flixel::math::FlxBasePoint this1,Float rads){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1486_set_radians)
HXLINE(1487)		Float len = ::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y)));
HXLINE(1489)		this1->set_x((len * ::Math_obj::cos(rads)));
HXLINE(1490)		this1->set_y((len * ::Math_obj::sin(rads)));
HXLINE(1491)		return rads;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_Impl__obj,set_radians,return )

Float FlxPoint_Impl__obj::get_rx( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1496_get_rx)
HXDLIN(1496)		return -(this1->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_rx,return )

Float FlxPoint_Impl__obj::get_ry( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1501_get_ry)
HXDLIN(1501)		return this1->x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_ry,return )

Float FlxPoint_Impl__obj::get_lx( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1506_get_lx)
HXDLIN(1506)		return this1->y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_lx,return )

Float FlxPoint_Impl__obj::get_ly( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_1511_get_ly)
HXDLIN(1511)		return -(this1->x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_Impl__obj,get_ly,return )


FlxPoint_Impl__obj::FlxPoint_Impl__obj()
{
}

bool FlxPoint_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dot") ) { outValue = dot_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"weak") ) { outValue = weak_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sign") ) { outValue = sign_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ratio") ) { outValue = ratio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_x") ) { outValue = get_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_x") ) { outValue = set_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y") ) { outValue = get_y_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_y") ) { outValue = set_y_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"plusOp") ) { outValue = plusOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addNew") ) { outValue = addNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inRect") ) { outValue = inRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounce") ) { outValue = bounce_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dx") ) { outValue = get_dx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dy") ) { outValue = get_dy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_rx") ) { outValue = get_rx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ry") ) { outValue = get_ry_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lx") ) { outValue = get_lx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ly") ) { outValue = get_ly_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minusOp") ) { outValue = minusOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleOp") ) { outValue = scaleOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValid") ) { outValue = isValid_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"divideOp") ) { outValue = divideOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addPoint") ) { outValue = addPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleNew") ) { outValue = scaleNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inCoords") ) { outValue = inCoords_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"truncate") ) { outValue = truncate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radiansTo") ) { outValue = radiansTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"degreesTo") ) { outValue = degreesTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negateNew") ) { outValue = negateNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"projectTo") ) { outValue = projectTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ratioWeak") ) { outValue = ratioWeak_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scalePoint") ) { outValue = scalePoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addToFlash") ) { outValue = addToFlash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dotProduct") ) { outValue = dotProduct_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isParallel") ) { outValue = isParallel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"leftNormal") ) { outValue = leftNormal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_length") ) { outValue = set_length_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"plusEqualOp") ) { outValue = plusEqualOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"plusFlashOp") ) { outValue = plusFlashOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractNew") ) { outValue = subtractNew_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyToFlash") ) { outValue = copyToFlash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"radiansFrom") ) { outValue = radiansFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"degreesFrom") ) { outValue = degreesFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rightNormal") ) { outValue = rightNormal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"perpProduct") ) { outValue = perpProduct_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_degrees") ) { outValue = get_degrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_degrees") ) { outValue = set_degrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_radians") ) { outValue = get_radians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_radians") ) { outValue = set_radians_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minusEqualOp") ) { outValue = minusEqualOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleEqualOp") ) { outValue = scaleEqualOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"minusFlashOp") ) { outValue = minusFlashOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pivotRadians") ) { outValue = pivotRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pivotDegrees") ) { outValue = pivotDegrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNormalized") ) { outValue = isNormalized_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"minusFlashOp2") ) { outValue = minusFlashOp2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractPoint") ) { outValue = subtractPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFromFlash") ) { outValue = copyFromFlash_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dotProductWeak") ) { outValue = dotProductWeak_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isParallelWeak") ) { outValue = isParallelWeak_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateWithTrig") ) { outValue = rotateWithTrig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"radiansBetween") ) { outValue = radiansBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"degreesBetween") ) { outValue = degreesBetween_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isPerpendicular") ) { outValue = isPerpendicular_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateByRadians") ) { outValue = rotateByRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateByDegrees") ) { outValue = rotateByDegrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPolarRadians") ) { outValue = setPolarRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPolarDegrees") ) { outValue = setPolarDegrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"perpProductWeak") ) { outValue = perpProductWeak_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"plusEqualFlashOp") ) { outValue = plusEqualFlashOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"findIntersection") ) { outValue = findIntersection_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"minusEqualFlashOp") ) { outValue = minusEqualFlashOp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractFromFlash") ) { outValue = subtractFromFlash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { outValue = get_lengthSquared_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"crossProductLength") ) { outValue = crossProductLength_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounceWithFriction") ) { outValue = bounceWithFriction_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"projectToNormalized") ) { outValue = projectToNormalized_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"dotProdWithNormalizing") ) { outValue = dotProdWithNormalizing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"crossProductLengthWeak") ) { outValue = crossProductLengthWeak_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"projectToNormalizedWeak") ) { outValue = projectToNormalizedWeak_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"findIntersectionInBounds") ) { outValue = findIntersectionInBounds_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxPoint_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxPoint_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &FlxPoint_Impl__obj::EPSILON,HX_("EPSILON",4a,89,92,2c)},
	{::hx::fsFloat,(void *) &FlxPoint_Impl__obj::EPSILON_SQUARED,HX_("EPSILON_SQUARED",d2,99,e6,6d)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(void *) &FlxPoint_Impl__obj::_point1,HX_("_point1",80,23,a5,65)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(void *) &FlxPoint_Impl__obj::_point2,HX_("_point2",81,23,a5,65)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(void *) &FlxPoint_Impl__obj::_point3,HX_("_point3",82,23,a5,65)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxPoint_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPoint_Impl__obj::EPSILON,"EPSILON");
	HX_MARK_MEMBER_NAME(FlxPoint_Impl__obj::EPSILON_SQUARED,"EPSILON_SQUARED");
	HX_MARK_MEMBER_NAME(FlxPoint_Impl__obj::_point1,"_point1");
	HX_MARK_MEMBER_NAME(FlxPoint_Impl__obj::_point2,"_point2");
	HX_MARK_MEMBER_NAME(FlxPoint_Impl__obj::_point3,"_point3");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPoint_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPoint_Impl__obj::EPSILON,"EPSILON");
	HX_VISIT_MEMBER_NAME(FlxPoint_Impl__obj::EPSILON_SQUARED,"EPSILON_SQUARED");
	HX_VISIT_MEMBER_NAME(FlxPoint_Impl__obj::_point1,"_point1");
	HX_VISIT_MEMBER_NAME(FlxPoint_Impl__obj::_point2,"_point2");
	HX_VISIT_MEMBER_NAME(FlxPoint_Impl__obj::_point3,"_point3");
};

#endif

::hx::Class FlxPoint_Impl__obj::__mClass;

static ::String FlxPoint_Impl__obj_sStaticFields[] = {
	HX_("EPSILON",4a,89,92,2c),
	HX_("EPSILON_SQUARED",d2,99,e6,6d),
	HX_("_point1",80,23,a5,65),
	HX_("_point2",81,23,a5,65),
	HX_("_point3",82,23,a5,65),
	HX_("get",96,80,4e,00),
	HX_("weak",78,5c,f5,4e),
	HX_("plusOp",1b,8f,ec,44),
	HX_("minusOp",b1,c1,dd,53),
	HX_("scaleOp",4b,4a,07,65),
	HX_("divideOp",fa,04,98,4b),
	HX_("plusEqualOp",bb,51,a6,9c),
	HX_("minusEqualOp",65,ff,a7,95),
	HX_("scaleEqualOp",8b,08,e7,cb),
	HX_("plusFlashOp",b7,2e,52,4e),
	HX_("minusFlashOp",61,dc,53,47),
	HX_("minusFlashOp2",b1,f8,0c,22),
	HX_("plusEqualFlashOp",17,e8,12,8d),
	HX_("minusEqualFlashOp",2d,72,89,06),
	HX_("_new",61,15,1f,3f),
	HX_("set",a2,9b,57,00),
	HX_("addPoint",6f,da,ec,3f),
	HX_("subtractPoint",9c,c6,66,44),
	HX_("scalePoint",66,61,c3,e7),
	HX_("scaleNew",f6,eb,58,01),
	HX_("addNew",bf,e0,04,9f),
	HX_("subtractNew",ac,77,f9,0b),
	HX_("copyFromFlash",71,a5,da,18),
	HX_("copyToFlash",00,ff,24,25),
	HX_("addToFlash",14,ae,9a,36),
	HX_("subtractFromFlash",32,48,51,65),
	HX_("floor",cc,d1,96,02),
	HX_("ceil",05,1f,bd,41),
	HX_("round",4e,f8,65,ed),
	HX_("inCoords",e3,ed,02,51),
	HX_("inRect",a9,2b,0d,88),
	HX_("pivotRadians",d0,df,16,97),
	HX_("pivotDegrees",05,7d,81,aa),
	HX_("radiansTo",8d,90,64,f8),
	HX_("radiansFrom",fc,38,d5,3d),
	HX_("degreesTo",02,a5,98,b1),
	HX_("degreesFrom",b1,14,8f,bb),
	HX_("transform",6c,2d,93,45),
	HX_("dot",89,42,4c,00),
	HX_("dotProduct",a6,27,f0,3d),
	HX_("dotProductWeak",3e,7b,e2,64),
	HX_("dotProdWithNormalizing",c4,c2,75,68),
	HX_("isPerpendicular",60,10,79,24),
	HX_("crossProductLength",d5,45,1a,6f),
	HX_("crossProductLengthWeak",ed,dc,48,88),
	HX_("isParallel",d1,bc,a5,f8),
	HX_("isParallelWeak",e9,81,c1,94),
	HX_("isZero",32,d4,57,6e),
	HX_("zero",28,0f,f1,50),
	HX_("normalize",8d,37,a1,ab),
	HX_("isNormalized",c1,8c,8e,53),
	HX_("rotateByRadians",80,07,76,e7),
	HX_("rotateByDegrees",b5,a4,e0,fa),
	HX_("rotateWithTrig",7d,0f,08,e3),
	HX_("setPolarRadians",16,e5,81,3c),
	HX_("setPolarDegrees",4b,82,ec,4f),
	HX_("rightNormal",23,3f,ee,99),
	HX_("leftNormal",8e,2d,7a,5f),
	HX_("negate",c2,41,19,67),
	HX_("negateNew",be,4b,dc,c5),
	HX_("projectTo",b4,84,f8,94),
	HX_("projectToNormalized",0b,56,c9,3e),
	HX_("projectToNormalizedWeak",23,40,63,dc),
	HX_("perpProduct",7c,fe,93,f3),
	HX_("perpProductWeak",14,75,e9,1f),
	HX_("ratio",0b,35,24,e4),
	HX_("ratioWeak",23,9f,19,92),
	HX_("findIntersection",22,b0,83,ae),
	HX_("findIntersectionInBounds",7c,2e,11,2e),
	HX_("truncate",66,be,f9,ce),
	HX_("radiansBetween",76,05,c0,0e),
	HX_("degreesBetween",e1,a8,04,64),
	HX_("sign",3d,90,53,4c),
	HX_("bounce",88,85,1d,66),
	HX_("bounceWithFriction",c8,1e,a8,25),
	HX_("isValid",b2,18,3e,ce),
	HX_("clone",5d,13,63,48),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("get_dx",dd,ee,2f,a3),
	HX_("get_dy",de,ee,2f,a3),
	HX_("get_length",af,04,8f,8f),
	HX_("set_length",23,a3,0c,93),
	HX_("get_lengthSquared",38,30,b5,3b),
	HX_("get_degrees",be,43,55,c0),
	HX_("set_degrees",ca,4a,c2,ca),
	HX_("get_radians",89,a6,ea,ac),
	HX_("set_radians",95,ad,57,b7),
	HX_("get_rx",0f,fb,2f,a3),
	HX_("get_ry",10,fb,2f,a3),
	HX_("get_lx",d5,f5,2f,a3),
	HX_("get_ly",d6,f5,2f,a3),
	::String(null())
};

void FlxPoint_Impl__obj::__register()
{
	FlxPoint_Impl__obj _hx_dummy;
	FlxPoint_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.math._FlxPoint.FlxPoint_Impl_",e3,3a,be,0f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxPoint_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxPoint_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxPoint_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxPoint_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPoint_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPoint_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPoint_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxPoint_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_74_boot)
HXDLIN(  74)		EPSILON = ((Float)0.0000001);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_75_boot)
HXDLIN(  75)		EPSILON_SQUARED = ((Float)9.9999999999999984e-015);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxBasePoint _hx_run(){
            			HX_STACKFRAME(&_hx_pos_6689cf469d632363_77_boot)
HXDLIN(  77)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  77)			point->_inPool = false;
HXDLIN(  77)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_77_boot)
HXDLIN(  77)		_point1 = ( ( ::flixel::math::FlxBasePoint)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxBasePoint _hx_run(){
            			HX_STACKFRAME(&_hx_pos_6689cf469d632363_78_boot)
HXDLIN(  78)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  78)			point->_inPool = false;
HXDLIN(  78)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_78_boot)
HXDLIN(  78)		_point2 = ( ( ::flixel::math::FlxBasePoint)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxBasePoint _hx_run(){
            			HX_STACKFRAME(&_hx_pos_6689cf469d632363_79_boot)
HXDLIN(  79)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  79)			point->_inPool = false;
HXDLIN(  79)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_6689cf469d632363_79_boot)
HXDLIN(  79)		_point3 = ( ( ::flixel::math::FlxBasePoint)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace flixel
} // end namespace math
} // end namespace _FlxPoint

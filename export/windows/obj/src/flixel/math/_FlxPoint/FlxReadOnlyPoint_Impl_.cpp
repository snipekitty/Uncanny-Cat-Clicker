// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math__FlxPoint_FlxPoint_Impl_
#include <flixel/math/_FlxPoint/FlxPoint_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math__FlxPoint_FlxReadOnlyPoint_Impl_
#include <flixel/math/_FlxPoint/FlxReadOnlyPoint_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1686_get_x,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","get_x",0xe7209242,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.get_x","flixel/math/FlxPoint.hx",1686,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1687_get_y,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","get_y",0xe7209243,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.get_y","flixel/math/FlxPoint.hx",1687,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1688_get_length,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","get_length",0x675046dc,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.get_length","flixel/math/FlxPoint.hx",1688,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1689_get_radians,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","get_radians",0x9e434bbc,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.get_radians","flixel/math/FlxPoint.hx",1689,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1690_get_degrees,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","get_degrees",0xb1ade8f1,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.get_degrees","flixel/math/FlxPoint.hx",1690,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1693_set,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","set",0x9f4e55d5,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.set","flixel/math/FlxPoint.hx",1693,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1694_add,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","add",0x9f40ac54,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.add","flixel/math/FlxPoint.hx",1694,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1695_addPoint,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","addPoint",0x6a87475c,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.addPoint","flixel/math/FlxPoint.hx",1695,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1696_subtract,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","subtract",0x22abe201,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.subtract","flixel/math/FlxPoint.hx",1696,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1697_subtractPoint,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","subtractPoint",0xb9195e8f,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.subtractPoint","flixel/math/FlxPoint.hx",1697,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1698_scale,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","scale",0xce8ebb7d,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.scale","flixel/math/FlxPoint.hx",1698,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1699_scalePoint,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","scalePoint",0xbf84a393,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.scalePoint","flixel/math/FlxPoint.hx",1699,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1700_copyFrom,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","copyFrom",0xf2fb78ac,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.copyFrom","flixel/math/FlxPoint.hx",1700,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1701_copyFromFlash,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","copyFromFlash",0x8d8d3d64,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.copyFromFlash","flixel/math/FlxPoint.hx",1701,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1702_floor,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","floor",0x5856bebf,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.floor","flixel/math/FlxPoint.hx",1702,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1703_ceil,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","ceil",0xbaa95172,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.ceil","flixel/math/FlxPoint.hx",1703,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1704_round,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","round",0x4325e541,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.round","flixel/math/FlxPoint.hx",1704,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1705_rotate,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","rotate",0x7d4fae08,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.rotate","flixel/math/FlxPoint.hx",1705,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1706_pivotRadians,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","pivotRadians",0xd34ec73d,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.pivotRadians","flixel/math/FlxPoint.hx",1706,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1707_pivotDegrees,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","pivotDegrees",0xe6b96472,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.pivotDegrees","flixel/math/FlxPoint.hx",1707,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1708_transform,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","transform",0x62180fdf,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.transform","flixel/math/FlxPoint.hx",1708,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1709_zero,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","zero",0xc9dd4195,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.zero","flixel/math/FlxPoint.hx",1709,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1710_normalize,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","normalize",0xc8261a00,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.normalize","flixel/math/FlxPoint.hx",1710,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1711_rotateByRadians,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","rotateByRadians",0xdff4c233,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.rotateByRadians","flixel/math/FlxPoint.hx",1711,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1712_rotateByDegrees,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","rotateByDegrees",0xf35f5f68,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.rotateByDegrees","flixel/math/FlxPoint.hx",1712,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1713_rotateWithTrig,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","rotateWithTrig",0x8a9a6c2a,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.rotateWithTrig","flixel/math/FlxPoint.hx",1713,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1714_setPolarRadians,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","setPolarRadians",0x35009fc9,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.setPolarRadians","flixel/math/FlxPoint.hx",1714,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1715_setPolarDegrees,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","setPolarDegrees",0x486b3cfe,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.setPolarDegrees","flixel/math/FlxPoint.hx",1715,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1716_negate,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","negate",0x1948a96f,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.negate","flixel/math/FlxPoint.hx",1716,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1717_truncate,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","truncate",0xf9942b53,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.truncate","flixel/math/FlxPoint.hx",1717,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1718_bounce,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","bounce",0x184ced35,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.bounce","flixel/math/FlxPoint.hx",1718,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b300062c862bdec_1719_bounceWithFriction,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_","bounceWithFriction",0x77ead5f5,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_.bounceWithFriction","flixel/math/FlxPoint.hx",1719,0xb3e1cd2c)
namespace flixel{
namespace math{
namespace _FlxPoint{

void FlxReadOnlyPoint_Impl__obj::__construct() { }

Dynamic FlxReadOnlyPoint_Impl__obj::__CreateEmpty() { return new FlxReadOnlyPoint_Impl__obj; }

void *FlxReadOnlyPoint_Impl__obj::_hx_vtable = 0;

Dynamic FlxReadOnlyPoint_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxReadOnlyPoint_Impl__obj > _hx_result = new FlxReadOnlyPoint_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxReadOnlyPoint_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5def37d5;
}

Float FlxReadOnlyPoint_Impl__obj::get_x( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1686_get_x)
HXDLIN(1686)		return this1->x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,get_x,return )

Float FlxReadOnlyPoint_Impl__obj::get_y( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1687_get_y)
HXDLIN(1687)		return this1->y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,get_y,return )

Float FlxReadOnlyPoint_Impl__obj::get_length( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1688_get_length)
HXDLIN(1688)		return ::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,get_length,return )

Float FlxReadOnlyPoint_Impl__obj::get_radians( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1689_get_radians)
HXDLIN(1689)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,get_radians,return )

Float FlxReadOnlyPoint_Impl__obj::get_degrees( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1690_get_degrees)
HXDLIN(1690)		Float _hx_tmp = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(this1);
HXDLIN(1690)		return (_hx_tmp * (( (Float)(180) ) / ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,get_degrees,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::set( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  __o_x,::hx::Null< int >  __o_y){
            		int x = __o_x.Default(0);
            		int y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1693_set)
HXDLIN(1693)		this1->set_x(( (Float)(x) ));
HXDLIN(1693)		this1->set_y(( (Float)(y) ));
HXDLIN(1693)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,set,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::add( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  __o_x,::hx::Null< int >  __o_y){
            		int x = __o_x.Default(0);
            		int y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1694_add)
HXDLIN(1694)		this1->set_x((this1->x + x));
HXDLIN(1694)		this1->set_y((this1->y + y));
HXDLIN(1694)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,add,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::addPoint( ::flixel::math::FlxBasePoint this1,Float point){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1695_addPoint)
HXDLIN(1695)		this1->set_x((this1->x + point));
HXDLIN(1695)		this1->set_y((this1->y + ( (Float)(0) )));
HXDLIN(1695)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,addPoint,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::subtract( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  __o_x,::hx::Null< int >  __o_y){
            		int x = __o_x.Default(0);
            		int y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1696_subtract)
HXDLIN(1696)		this1->set_x((this1->x - ( (Float)(x) )));
HXDLIN(1696)		this1->set_y((this1->y - ( (Float)(y) )));
HXDLIN(1696)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,subtract,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::subtractPoint( ::flixel::math::FlxBasePoint this1,Float point){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1697_subtractPoint)
HXDLIN(1697)		this1->set_x((this1->x - point));
HXDLIN(1697)		this1->set_y((this1->y - ( (Float)(0) )));
HXDLIN(1697)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,subtractPoint,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::scale( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  __o_x,::hx::Null< int >  __o_y){
            		int x = __o_x.Default(0);
            		int y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1698_scale)
HXDLIN(1698)		this1->set_x((this1->x * ( (Float)(x) )));
HXDLIN(1698)		this1->set_y((this1->y * ( (Float)(y) )));
HXDLIN(1698)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,scale,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::scalePoint( ::flixel::math::FlxBasePoint this1,Float point){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1699_scalePoint)
HXDLIN(1699)		this1->set_x((this1->x * point));
HXDLIN(1699)		this1->set_y((this1->y * point));
HXDLIN(1699)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,scalePoint,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::copyFrom( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1700_copyFrom)
HXDLIN(1700)		{
HXDLIN(1700)			Float y = point->y;
HXDLIN(1700)			this1->set_x(point->x);
HXDLIN(1700)			this1->set_y(y);
            		}
HXDLIN(1700)		{
HXDLIN(1700)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN(1700)			if (_this->_weak) {
HXDLIN(1700)				_this->put();
            			}
            		}
HXDLIN(1700)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,copyFrom,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::copyFromFlash( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1701_copyFromFlash)
HXDLIN(1701)		{
HXDLIN(1701)			Float y = point->y;
HXDLIN(1701)			this1->set_x(point->x);
HXDLIN(1701)			this1->set_y(y);
            		}
HXDLIN(1701)		{
HXDLIN(1701)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN(1701)			if (_this->_weak) {
HXDLIN(1701)				_this->put();
            			}
            		}
HXDLIN(1701)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,copyFromFlash,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::floor( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1702_floor)
HXDLIN(1702)		this1->set_x(( (Float)(::Math_obj::floor(this1->x)) ));
HXDLIN(1702)		this1->set_y(( (Float)(::Math_obj::floor(this1->y)) ));
HXDLIN(1702)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,floor,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::ceil( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1703_ceil)
HXDLIN(1703)		this1->set_x(( (Float)(::Math_obj::ceil(this1->x)) ));
HXDLIN(1703)		this1->set_y(( (Float)(::Math_obj::ceil(this1->y)) ));
HXDLIN(1703)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,ceil,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::round( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1704_round)
HXDLIN(1704)		this1->set_x(( (Float)(::Math_obj::round(this1->x)) ));
HXDLIN(1704)		this1->set_y(( (Float)(::Math_obj::round(this1->y)) ));
HXDLIN(1704)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,round,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::rotate( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float degrees){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1705_rotate)
HXDLIN(1705)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::pivotRadians(this1,pivot,(degrees * (::Math_obj::PI / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,rotate,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::pivotRadians( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float radians){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1706_pivotRadians)
HXDLIN(1706)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::pivotRadians(this1,pivot,radians);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,pivotRadians,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::pivotDegrees( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float degrees){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1707_pivotDegrees)
HXDLIN(1707)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::pivotRadians(this1,pivot,(degrees * (::Math_obj::PI / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,pivotDegrees,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::transform( ::flixel::math::FlxBasePoint this1, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1708_transform)
HXDLIN(1708)		Float x1 = (((this1->x * matrix->a) + (this1->y * matrix->c)) + matrix->tx);
HXDLIN(1708)		Float y1 = (((this1->x * matrix->b) + (this1->y * matrix->d)) + matrix->ty);
HXDLIN(1708)		this1->set_x(x1);
HXDLIN(1708)		this1->set_y(y1);
HXDLIN(1708)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,transform,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::zero( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1709_zero)
HXDLIN(1709)		this1->set_x(this1->set_y(( (Float)(0) )));
HXDLIN(1709)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,zero,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::normalize( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1710_normalize)
HXDLIN(1710)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::normalize(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,normalize,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::rotateByRadians( ::flixel::math::FlxBasePoint this1,Float rads){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1711_rotateByRadians)
HXDLIN(1711)		Float s = ::Math_obj::sin(rads);
HXDLIN(1711)		Float c = ::Math_obj::cos(rads);
HXDLIN(1711)		Float tempX = this1->x;
HXDLIN(1711)		this1->set_x(((tempX * c) - (this1->y * s)));
HXDLIN(1711)		this1->set_y(((tempX * s) + (this1->y * c)));
HXDLIN(1711)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,rotateByRadians,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::rotateByDegrees( ::flixel::math::FlxBasePoint this1,Float degs){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1712_rotateByDegrees)
HXDLIN(1712)		Float rads = (degs * (::Math_obj::PI / ( (Float)(180) )));
HXDLIN(1712)		Float s = ::Math_obj::sin(rads);
HXDLIN(1712)		Float c = ::Math_obj::cos(rads);
HXDLIN(1712)		Float tempX = this1->x;
HXDLIN(1712)		this1->set_x(((tempX * c) - (this1->y * s)));
HXDLIN(1712)		this1->set_y(((tempX * s) + (this1->y * c)));
HXDLIN(1712)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,rotateByDegrees,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::rotateWithTrig( ::flixel::math::FlxBasePoint this1,Float sin,Float cos){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1713_rotateWithTrig)
HXDLIN(1713)		Float tempX = this1->x;
HXDLIN(1713)		this1->set_x(((tempX * cos) - (this1->y * sin)));
HXDLIN(1713)		this1->set_y(((tempX * sin) + (this1->y * cos)));
HXDLIN(1713)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,rotateWithTrig,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::setPolarRadians( ::flixel::math::FlxBasePoint this1,Float length,Float radians){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1714_setPolarRadians)
HXDLIN(1714)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(this1,length,radians);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,setPolarRadians,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::setPolarDegrees( ::flixel::math::FlxBasePoint this1,Float length,Float degrees){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1715_setPolarDegrees)
HXDLIN(1715)		return ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(this1,length,(degrees * (::Math_obj::PI / ( (Float)(180) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,setPolarDegrees,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::negate( ::flixel::math::FlxBasePoint this1){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1716_negate)
HXDLIN(1716)		this1->set_x((this1->x * ( (Float)(-1) )));
HXDLIN(1716)		this1->set_y((this1->y * ( (Float)(-1) )));
HXDLIN(1716)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyPoint_Impl__obj,negate,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::truncate( ::flixel::math::FlxBasePoint this1,Float max){
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1717_truncate)
HXDLIN(1717)		{
HXDLIN(1717)			Float l = ::Math_obj::min(max,::Math_obj::sqrt(((this1->x * this1->x) + (this1->y * this1->y))));
HXDLIN(1717)			bool _hx_tmp;
HXDLIN(1717)			if ((::Math_obj::abs(this1->x) < ((Float)0.0000001))) {
HXDLIN(1717)				_hx_tmp = (::Math_obj::abs(this1->y) < ((Float)0.0000001));
            			}
            			else {
HXDLIN(1717)				_hx_tmp = false;
            			}
HXDLIN(1717)			if (!(_hx_tmp)) {
HXDLIN(1717)				Float a = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(this1);
HXDLIN(1717)				this1->set_x((l * ::Math_obj::cos(a)));
HXDLIN(1717)				this1->set_y((l * ::Math_obj::sin(a)));
            			}
            		}
HXDLIN(1717)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyPoint_Impl__obj,truncate,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::bounce( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint normal,::hx::Null< Float >  __o_coeff){
            		Float coeff = __o_coeff.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1718_bounce)
HXDLIN(1718)		Float d = ((1 + coeff) * ((this1->x * normal->x) + (this1->y * normal->y)));
HXDLIN(1718)		this1->set_x((this1->x - (d * normal->x)));
HXDLIN(1718)		this1->set_y((this1->y - (d * normal->y)));
HXDLIN(1718)		{
HXDLIN(1718)			 ::flixel::math::FlxBasePoint _this = normal;
HXDLIN(1718)			if (_this->_weak) {
HXDLIN(1718)				_this->put();
            			}
            		}
HXDLIN(1718)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyPoint_Impl__obj,bounce,return )

 ::flixel::math::FlxBasePoint FlxReadOnlyPoint_Impl__obj::bounceWithFriction( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint normal,::hx::Null< Float >  __o_coeff,::hx::Null< Float >  __o_friction){
            		Float coeff = __o_coeff.Default(((Float)1.0));
            		Float friction = __o_friction.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_8b300062c862bdec_1719_bounceWithFriction)
HXDLIN(1719)		Float d = ((1 + coeff) * ((this1->x * normal->x) + (this1->y * normal->y)));
HXDLIN(1719)		this1->set_x((this1->x - (d * normal->x)));
HXDLIN(1719)		this1->set_y((this1->y - (d * normal->y)));
HXDLIN(1719)		{
HXDLIN(1719)			 ::flixel::math::FlxBasePoint _this = normal;
HXDLIN(1719)			if (_this->_weak) {
HXDLIN(1719)				_this->put();
            			}
            		}
HXDLIN(1719)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxReadOnlyPoint_Impl__obj,bounceWithFriction,return )


FlxReadOnlyPoint_Impl__obj::FlxReadOnlyPoint_Impl__obj()
{
}

bool FlxReadOnlyPoint_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { outValue = get_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y") ) { outValue = get_y_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounce") ) { outValue = bounce_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addPoint") ) { outValue = addPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"truncate") ) { outValue = truncate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scalePoint") ) { outValue = scalePoint_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_radians") ) { outValue = get_radians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_degrees") ) { outValue = get_degrees_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pivotRadians") ) { outValue = pivotRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pivotDegrees") ) { outValue = pivotDegrees_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subtractPoint") ) { outValue = subtractPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFromFlash") ) { outValue = copyFromFlash_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"rotateWithTrig") ) { outValue = rotateWithTrig_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"rotateByRadians") ) { outValue = rotateByRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateByDegrees") ) { outValue = rotateByDegrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPolarRadians") ) { outValue = setPolarRadians_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPolarDegrees") ) { outValue = setPolarDegrees_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bounceWithFriction") ) { outValue = bounceWithFriction_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxReadOnlyPoint_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxReadOnlyPoint_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxReadOnlyPoint_Impl__obj::__mClass;

static ::String FlxReadOnlyPoint_Impl__obj_sStaticFields[] = {
	HX_("get_x",4f,a5,60,91),
	HX_("get_y",50,a5,60,91),
	HX_("get_length",af,04,8f,8f),
	HX_("get_radians",89,a6,ea,ac),
	HX_("get_degrees",be,43,55,c0),
	HX_("set",a2,9b,57,00),
	HX_("add",21,f2,49,00),
	HX_("addPoint",6f,da,ec,3f),
	HX_("subtract",14,75,11,f8),
	HX_("subtractPoint",9c,c6,66,44),
	HX_("scale",8a,ce,ce,78),
	HX_("scalePoint",66,61,c3,e7),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("copyFromFlash",71,a5,da,18),
	HX_("floor",cc,d1,96,02),
	HX_("ceil",05,1f,bd,41),
	HX_("round",4e,f8,65,ed),
	HX_("rotate",5b,46,20,cb),
	HX_("pivotRadians",d0,df,16,97),
	HX_("pivotDegrees",05,7d,81,aa),
	HX_("transform",6c,2d,93,45),
	HX_("zero",28,0f,f1,50),
	HX_("normalize",8d,37,a1,ab),
	HX_("rotateByRadians",80,07,76,e7),
	HX_("rotateByDegrees",b5,a4,e0,fa),
	HX_("rotateWithTrig",7d,0f,08,e3),
	HX_("setPolarRadians",16,e5,81,3c),
	HX_("setPolarDegrees",4b,82,ec,4f),
	HX_("negate",c2,41,19,67),
	HX_("truncate",66,be,f9,ce),
	HX_("bounce",88,85,1d,66),
	HX_("bounceWithFriction",c8,1e,a8,25),
	::String(null())
};

void FlxReadOnlyPoint_Impl__obj::__register()
{
	FlxReadOnlyPoint_Impl__obj _hx_dummy;
	FlxReadOnlyPoint_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_",21,45,cf,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxReadOnlyPoint_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxReadOnlyPoint_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxReadOnlyPoint_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxReadOnlyPoint_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxReadOnlyPoint_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace math
} // end namespace _FlxPoint

// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawItemType
#include <flixel/graphics/tile/FlxDrawItemType.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawQuadsItem
#include <flixel/graphics/tile/FlxDrawQuadsItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTrianglesItem
#include <flixel/graphics/tile/FlxDrawTrianglesItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d1aae230bd422321_45_new,"flixel.FlxCamera","new",0x0e8a9f77,"flixel.FlxCamera.new","flixel/FlxCamera.hx",45,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_577_startQuadBatch,"flixel.FlxCamera","startQuadBatch",0xe17326fa,"flixel.FlxCamera.startQuadBatch","flixel/FlxCamera.hx",577,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_642_startTrianglesBatch,"flixel.FlxCamera","startTrianglesBatch",0xb3a3b828,"flixel.FlxCamera.startTrianglesBatch","flixel/FlxCamera.hx",642,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_666_getNewDrawTrianglesItem,"flixel.FlxCamera","getNewDrawTrianglesItem",0xcd894887,"flixel.FlxCamera.getNewDrawTrianglesItem","flixel/FlxCamera.hx",666,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_712_clearDrawStack,"flixel.FlxCamera","clearDrawStack",0x8d7c5ba0,"flixel.FlxCamera.clearDrawStack","flixel/FlxCamera.hx",712,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_745_render,"flixel.FlxCamera","render",0x1f11e49f,"flixel.FlxCamera.render","flixel/FlxCamera.hx",745,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_757_drawPixels,"flixel.FlxCamera","drawPixels",0x80c6bc1a,"flixel.FlxCamera.drawPixels","flixel/FlxCamera.hx",757,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_789_copyPixels,"flixel.FlxCamera","copyPixels",0xf4c7a68b,"flixel.FlxCamera.copyPixels","flixel/FlxCamera.hx",789,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_833_drawTriangles,"flixel.FlxCamera","drawTriangles",0x78d375de,"flixel.FlxCamera.drawTriangles","flixel/FlxCamera.hx",833,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_929_transformRect,"flixel.FlxCamera","transformRect",0x135ffe87,"flixel.FlxCamera.transformRect","flixel/FlxCamera.hx",929,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_952_transformPoint,"flixel.FlxCamera","transformPoint",0xc072398d,"flixel.FlxCamera.transformPoint","flixel/FlxCamera.hx",952,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_970_transformVector,"flixel.FlxCamera","transformVector",0x43afc0e6,"flixel.FlxCamera.transformVector","flixel/FlxCamera.hx",970,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_985_transformObject,"flixel.FlxCamera","transformObject",0xc1918ee2,"flixel.FlxCamera.transformObject","flixel/FlxCamera.hx",985,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1066_destroy,"flixel.FlxCamera","destroy",0xb607d391,"flixel.FlxCamera.destroy","flixel/FlxCamera.hx",1066,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1125_update,"flixel.FlxCamera","update",0xa0edff52,"flixel.FlxCamera.update","flixel/FlxCamera.hx",1125,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1150_updateScroll,"flixel.FlxCamera","updateScroll",0x3fd094ff,"flixel.FlxCamera.updateScroll","flixel/FlxCamera.hx",1150,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1162_bindScrollPos,"flixel.FlxCamera","bindScrollPos",0xa221ffe1,"flixel.FlxCamera.bindScrollPos","flixel/FlxCamera.hx",1162,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1182_updateFollow,"flixel.FlxCamera","updateFollow",0xf2024e63,"flixel.FlxCamera.updateFollow","flixel/FlxCamera.hx",1182,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1259_updateLerp,"flixel.FlxCamera","updateLerp",0xb2be4ee9,"flixel.FlxCamera.updateLerp","flixel/FlxCamera.hx",1259,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1276_updateFlash,"flixel.FlxCamera","updateFlash",0x43f2dcfe,"flixel.FlxCamera.updateFlash","flixel/FlxCamera.hx",1276,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1287_updateFade,"flixel.FlxCamera","updateFade",0xaec3f1ee,"flixel.FlxCamera.updateFade","flixel/FlxCamera.hx",1287,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1312_completeFade,"flixel.FlxCamera","completeFade",0xb02048de,"flixel.FlxCamera.completeFade","flixel/FlxCamera.hx",1312,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1320_updateShake,"flixel.FlxCamera","updateShake",0xbd838614,"flixel.FlxCamera.updateShake","flixel/FlxCamera.hx",1320,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1360_updateFlashSpritePosition,"flixel.FlxCamera","updateFlashSpritePosition",0x5aef376c,"flixel.FlxCamera.updateFlashSpritePosition","flixel/FlxCamera.hx",1360,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1372_updateFlashOffset,"flixel.FlxCamera","updateFlashOffset",0x0e9fbb31,"flixel.FlxCamera.updateFlashOffset","flixel/FlxCamera.hx",1372,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1386_updateScrollRect,"flixel.FlxCamera","updateScrollRect",0xbf58f9c3,"flixel.FlxCamera.updateScrollRect","flixel/FlxCamera.hx",1386,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1411_updateInternalSpritePositions,"flixel.FlxCamera","updateInternalSpritePositions",0x7d5baef6,"flixel.FlxCamera.updateInternalSpritePositions","flixel/FlxCamera.hx",1411,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1453_follow,"flixel.FlxCamera","follow",0x137f0aba,"flixel.FlxCamera.follow","flixel/FlxCamera.hx",1453,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1498_snapToTarget,"flixel.FlxCamera","snapToTarget",0x8eeb1d9f,"flixel.FlxCamera.snapToTarget","flixel/FlxCamera.hx",1498,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1509_focusOn,"flixel.FlxCamera","focusOn",0xd304f1ae,"flixel.FlxCamera.focusOn","flixel/FlxCamera.hx",1509,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1523_flash,"flixel.FlxCamera","flash",0x27663887,"flixel.FlxCamera.flash","flixel/FlxCamera.hx",1523,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1545_fade,"flixel.FlxCamera","fade",0xa5741a85,"flixel.FlxCamera.fade","flixel/FlxCamera.hx",1545,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1571_shake,"flixel.FlxCamera","shake",0xa0f6e19d,"flixel.FlxCamera.shake","flixel/FlxCamera.hx",1571,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1588_stopFade,"flixel.FlxCamera","stopFade",0x56601827,"flixel.FlxCamera.stopFade","flixel/FlxCamera.hx",1588,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1597_stopFlash,"flixel.FlxCamera","stopFlash",0x44f828a5,"flixel.FlxCamera.stopFlash","flixel/FlxCamera.hx",1597,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1607_stopShake,"flixel.FlxCamera","stopShake",0xbe88d1bb,"flixel.FlxCamera.stopShake","flixel/FlxCamera.hx",1607,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1614_stopFX,"flixel.FlxCamera","stopFX",0x29222b1d,"flixel.FlxCamera.stopFX","flixel/FlxCamera.hx",1614,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1629_copyFrom,"flixel.FlxCamera","copyFrom",0x88512948,"flixel.FlxCamera.copyFrom","flixel/FlxCamera.hx",1629,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1660_fill,"flixel.FlxCamera","fill",0xa57a338c,"flixel.FlxCamera.fill","flixel/FlxCamera.hx",1660,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1693_drawFX,"flixel.FlxCamera","drawFX",0xf9beeb9f,"flixel.FlxCamera.drawFX","flixel/FlxCamera.hx",1693,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1730_checkResize,"flixel.FlxCamera","checkResize",0x465b6af3,"flixel.FlxCamera.checkResize","flixel/FlxCamera.hx",1730,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1751_updateBlitMatrix,"flixel.FlxCamera","updateBlitMatrix",0x8e139648,"flixel.FlxCamera.updateBlitMatrix","flixel/FlxCamera.hx",1751,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1766_setSize,"flixel.FlxCamera","setSize",0xa359881a,"flixel.FlxCamera.setSize","flixel/FlxCamera.hx",1766,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1779_setPosition,"flixel.FlxCamera","setPosition",0x5729a882,"flixel.FlxCamera.setPosition","flixel/FlxCamera.hx",1779,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1794_setScrollBoundsRect,"flixel.FlxCamera","setScrollBoundsRect",0xd34a357f,"flixel.FlxCamera.setScrollBoundsRect","flixel/FlxCamera.hx",1794,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1813_setScrollBounds,"flixel.FlxCamera","setScrollBounds",0x4d9242bb,"flixel.FlxCamera.setScrollBounds","flixel/FlxCamera.hx",1813,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1829_setScale,"flixel.FlxCamera","setScale",0x46f35511,"flixel.FlxCamera.setScale","flixel/FlxCamera.hx",1829,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1866_onResize,"flixel.FlxCamera","onResize",0xa8186dfc,"flixel.FlxCamera.onResize","flixel/FlxCamera.hx",1866,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1877_getViewMarginRect,"flixel.FlxCamera","getViewMarginRect",0x3b39b7c4,"flixel.FlxCamera.getViewMarginRect","flixel/FlxCamera.hx",1877,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1890_containsPoint,"flixel.FlxCamera","containsPoint",0x2d56eb88,"flixel.FlxCamera.containsPoint","flixel/FlxCamera.hx",1890,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1902_containsRect,"flixel.FlxCamera","containsRect",0x9ec4e4ec,"flixel.FlxCamera.containsRect","flixel/FlxCamera.hx",1902,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1910_set_width,"flixel.FlxCamera","set_width",0x2386b8c0,"flixel.FlxCamera.set_width","flixel/FlxCamera.hx",1910,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1925_set_height,"flixel.FlxCamera","set_height",0xa8aa67ed,"flixel.FlxCamera.set_height","flixel/FlxCamera.hx",1925,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1940_set_zoom,"flixel.FlxCamera","set_zoom",0x3f00d599,"flixel.FlxCamera.set_zoom","flixel/FlxCamera.hx",1940,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1947_set_alpha,"flixel.FlxCamera","set_alpha",0x7abaaa18,"flixel.FlxCamera.set_alpha","flixel/FlxCamera.hx",1947,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1961_set_angle,"flixel.FlxCamera","set_angle",0x7c06468d,"flixel.FlxCamera.set_angle","flixel/FlxCamera.hx",1961,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1968_set_color,"flixel.FlxCamera","set_color",0xa380741d,"flixel.FlxCamera.set_color","flixel/FlxCamera.hx",1968,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2002_set_antialiasing,"flixel.FlxCamera","set_antialiasing",0x0f9a3f7a,"flixel.FlxCamera.set_antialiasing","flixel/FlxCamera.hx",2002,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2012_set_x,"flixel.FlxCamera","set_x",0x9f099e32,"flixel.FlxCamera.set_x","flixel/FlxCamera.hx",2012,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2019_set_y,"flixel.FlxCamera","set_y",0x9f099e33,"flixel.FlxCamera.set_y","flixel/FlxCamera.hx",2019,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2026_set_visible,"flixel.FlxCamera","set_visible",0x8f5a1dac,"flixel.FlxCamera.set_visible","flixel/FlxCamera.hx",2026,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2036_calcMarginX,"flixel.FlxCamera","calcMarginX",0x5d09726c,"flixel.FlxCamera.calcMarginX","flixel/FlxCamera.hx",2036,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2041_calcMarginY,"flixel.FlxCamera","calcMarginY",0x5d09726d,"flixel.FlxCamera.calcMarginY","flixel/FlxCamera.hx",2041,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2056_get_viewMarginLeft,"flixel.FlxCamera","get_viewMarginLeft",0x7c07fdac,"flixel.FlxCamera.get_viewMarginLeft","flixel/FlxCamera.hx",2056,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2061_get_viewMarginTop,"flixel.FlxCamera","get_viewMarginTop",0x089dac90,"flixel.FlxCamera.get_viewMarginTop","flixel/FlxCamera.hx",2061,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2066_get_viewMarginRight,"flixel.FlxCamera","get_viewMarginRight",0x82030697,"flixel.FlxCamera.get_viewMarginRight","flixel/FlxCamera.hx",2066,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2071_get_viewMarginBottom,"flixel.FlxCamera","get_viewMarginBottom",0x57f54fd0,"flixel.FlxCamera.get_viewMarginBottom","flixel/FlxCamera.hx",2071,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2076_get_viewWidth,"flixel.FlxCamera","get_viewWidth",0x66c62b0f,"flixel.FlxCamera.get_viewWidth","flixel/FlxCamera.hx",2076,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2081_get_viewHeight,"flixel.FlxCamera","get_viewHeight",0x3ceefabe,"flixel.FlxCamera.get_viewHeight","flixel/FlxCamera.hx",2081,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2086_get_viewX,"flixel.FlxCamera","get_viewX",0xaccffd01,"flixel.FlxCamera.get_viewX","flixel/FlxCamera.hx",2086,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2091_get_viewY,"flixel.FlxCamera","get_viewY",0xaccffd02,"flixel.FlxCamera.get_viewY","flixel/FlxCamera.hx",2091,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2096_get_viewLeft,"flixel.FlxCamera","get_viewLeft",0x3293c71e,"flixel.FlxCamera.get_viewLeft","flixel/FlxCamera.hx",2096,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2101_get_viewTop,"flixel.FlxCamera","get_viewTop",0x7e87575e,"flixel.FlxCamera.get_viewTop","flixel/FlxCamera.hx",2101,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2106_get_viewRight,"flixel.FlxCamera","get_viewRight",0x85c780e5,"flixel.FlxCamera.get_viewRight","flixel/FlxCamera.hx",2106,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2111_get_viewBottom,"flixel.FlxCamera","get_viewBottom",0xa01bd9c2,"flixel.FlxCamera.get_viewBottom","flixel/FlxCamera.hx",2111,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2120_get_camera,"flixel.FlxCamera","get_camera",0x5a6d0837,"flixel.FlxCamera.get_camera","flixel/FlxCamera.hx",2120,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2124_set_camera,"flixel.FlxCamera","set_camera",0x5deaa6ab,"flixel.FlxCamera.set_camera","flixel/FlxCamera.hx",2124,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2128_get_cameras,"flixel.FlxCamera","get_cameras",0xc4fa285c,"flixel.FlxCamera.get_cameras","flixel/FlxCamera.hx",2128,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2132_set_cameras,"flixel.FlxCamera","set_cameras",0xcf672f68,"flixel.FlxCamera.set_cameras","flixel/FlxCamera.hx",2132,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2046_get_defaultCameras,"flixel.FlxCamera","get_defaultCameras",0xe32986ff,"flixel.FlxCamera.get_defaultCameras","flixel/FlxCamera.hx",2046,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_2051_set_defaultCameras,"flixel.FlxCamera","set_defaultCameras",0xbfd8b973,"flixel.FlxCamera.set_defaultCameras","flixel/FlxCamera.hx",2051,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_50_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",50,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_560_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",560,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_565_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",565,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_571_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",571,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_573_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",573,0xe7aeb95a)
namespace flixel{

void FlxCamera_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_width,::hx::Null< int >  __o_height,::hx::Null< Float >  __o_zoom){
            		Float x = __o_x.Default(((Float)0.0));
            		Float y = __o_y.Default(((Float)0.0));
            		int width = __o_width.Default(0);
            		int height = __o_height.Default(0);
            		Float zoom = __o_zoom.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_45_new)
HXLINE( 525)		this->_helperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 523)		this->_helperMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 503)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 503)		_this->x = ( (Float)(0) );
HXDLIN( 503)		_this->y = ( (Float)(0) );
HXDLIN( 503)		_this->width = ( (Float)(0) );
HXDLIN( 503)		_this->height = ( (Float)(0) );
HXDLIN( 503)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 503)		rect->_inPool = false;
HXDLIN( 503)		this->_bounds = rect;
HXLINE( 498)		this->_scrollRect =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 477)		this->initialZoom = ((Float)1);
HXLINE( 472)		this->filters = null();
HXLINE( 467)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 467)		point->_inPool = false;
HXDLIN( 467)		this->_point = point;
HXLINE( 462)		this->_fxShakeAxes = 17;
HXLINE( 452)		this->_fxShakeDuration = ((Float)0);
HXLINE( 447)		this->_fxShakeIntensity = ((Float)0);
HXLINE( 442)		this->_fxFadeAlpha = ((Float)0);
HXLINE( 436)		this->_fxFadeComplete = null();
HXLINE( 431)		this->_fxFadeIn = false;
HXLINE( 425)		this->_fxFadeDuration = ((Float)0);
HXLINE( 420)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 420)		point1->_inPool = false;
HXDLIN( 420)		this->_scrollTarget = point1;
HXLINE( 410)		this->_fxFadeColor = 0;
HXLINE( 405)		this->_fxFlashAlpha = ((Float)0);
HXLINE( 400)		this->_fxFlashComplete = null();
HXLINE( 395)		this->_fxFlashDuration = ((Float)0);
HXLINE( 390)		this->_fxFlashColor = 0;
HXLINE( 385)		 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 385)		point2->_inPool = false;
HXDLIN( 385)		this->_flashOffset = point2;
HXLINE( 376)		this->_flashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 361)		this->filtersEnabled = true;
HXLINE( 356)		 ::flixel::math::FlxBasePoint point3 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 356)		point3->_inPool = false;
HXDLIN( 356)		this->followLead = point3;
HXLINE( 351)		this->antialiasing = false;
HXLINE( 345)		this->color = -1;
HXLINE( 340)		this->angle = ((Float)0);
HXLINE( 335)		this->alpha = ((Float)1);
HXLINE( 330)		this->_useBlitMatrix = false;
HXLINE( 325)		this->_blitMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 224)		this->height = 0;
HXLINE( 219)		this->width = 0;
HXLINE( 214)		this->pixelPerfectShake = null();
HXLINE( 200)		this->flashSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 190)		this->useBgAlphaBlending = false;
HXLINE( 158)		 ::flixel::math::FlxBasePoint point4 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 158)		point4->_inPool = false;
HXDLIN( 158)		this->scroll = point4;
HXLINE( 122)		this->followLerp = ((Float)1.0);
HXLINE( 114)		 ::flixel::math::FlxBasePoint point5 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 114)		point5->_inPool = false;
HXDLIN( 114)		this->targetOffset = point5;
HXLINE(  89)		this->scaleY = ((Float)0);
HXLINE(  83)		this->scaleX = ((Float)0);
HXLINE(  77)		this->y = ((Float)0);
HXLINE(  70)		this->x = ((Float)0);
HXLINE(1010)		super::__construct();
HXLINE(1012)		this->set_x(x);
HXLINE(1013)		this->set_y(y);
HXLINE(1015)		if ((zoom == 0)) {
HXLINE(1016)			zoom = ::flixel::FlxCamera_obj::defaultZoom;
            		}
HXLINE(1019)		int _hx_tmp;
HXDLIN(1019)		if ((width <= 0)) {
HXLINE(1019)			_hx_tmp = ::Math_obj::ceil((( (Float)(::flixel::FlxG_obj::width) ) / zoom));
            		}
            		else {
HXLINE(1019)			_hx_tmp = width;
            		}
HXDLIN(1019)		this->set_width(_hx_tmp);
HXLINE(1020)		int _hx_tmp1;
HXDLIN(1020)		if ((height <= 0)) {
HXLINE(1020)			_hx_tmp1 = ::Math_obj::ceil((( (Float)(::flixel::FlxG_obj::height) ) / zoom));
            		}
            		else {
HXLINE(1020)			_hx_tmp1 = height;
            		}
HXDLIN(1020)		this->set_height(_hx_tmp1);
HXLINE(1021)		this->_flashRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,width,height);
HXLINE(1023)		this->flashSprite->addChild(this->_scrollRect);
HXLINE(1024)		 ::openfl::display::Sprite _hx_tmp2 = this->_scrollRect;
HXDLIN(1024)		_hx_tmp2->set_scrollRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE(1026)		this->pixelPerfectRender = ::flixel::FlxG_obj::renderBlit;
HXLINE(1028)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1030)			this->screen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1031)			this->buffer =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
HXLINE(1032)			this->screen->set_pixels(this->buffer);
HXLINE(1033)			{
HXLINE(1033)				 ::flixel::math::FlxBasePoint this1 = this->screen->origin;
HXDLIN(1033)				this1->set_x(( (Float)(0) ));
HXDLIN(1033)				this1->set_y(( (Float)(0) ));
            			}
HXLINE(1034)			this->_flashBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->buffer,null(),null());
HXLINE(1035)			this->_scrollRect->addChild(this->_flashBitmap);
HXLINE(1036)			this->_fill =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
            		}
            		else {
HXLINE(1040)			this->canvas =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(1041)			this->_scrollRect->addChild(this->canvas);
            		}
HXLINE(1049)		this->set_color(-1);
HXLINE(1052)		this->set_zoom((this->initialZoom = zoom));
HXLINE(1054)		this->updateScrollRect();
HXLINE(1055)		this->updateFlashOffset();
HXLINE(1056)		this->updateFlashSpritePosition();
HXLINE(1057)		this->updateInternalSpritePositions();
HXLINE(1059)		this->bgColor = ::flixel::FlxG_obj::cameras->get_bgColor();
            	}

Dynamic FlxCamera_obj::__CreateEmpty() { return new FlxCamera_obj; }

void *FlxCamera_obj::_hx_vtable = 0;

Dynamic FlxCamera_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxCamera_obj > _hx_result = new FlxCamera_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxCamera_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1ff7ce3b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1ff7ce3b;
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

 ::flixel::graphics::tile::FlxDrawQuadsItem FlxCamera_obj::startQuadBatch( ::flixel::graphics::FlxGraphic graphic,bool colored,::hx::Null< bool >  __o_hasColorOffsets, ::Dynamic blend,::hx::Null< bool >  __o_smooth, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		bool hasColorOffsets = __o_hasColorOffsets.Default(false);
            		bool smooth = __o_smooth.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_577_startQuadBatch)
HXLINE( 581)		 ::flixel::graphics::tile::FlxDrawQuadsItem itemToReturn = null();
HXLINE( 582)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 584)		bool _hx_tmp;
HXDLIN( 584)		bool _hx_tmp1;
HXDLIN( 584)		bool _hx_tmp2;
HXDLIN( 584)		bool _hx_tmp3;
HXDLIN( 584)		bool _hx_tmp4;
HXDLIN( 584)		bool _hx_tmp5;
HXDLIN( 584)		bool _hx_tmp6;
HXDLIN( 584)		bool _hx_tmp7;
HXDLIN( 584)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 584)			_hx_tmp7 = ::hx::IsPointerEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TILES_dyn() );
            		}
            		else {
HXLINE( 584)			_hx_tmp7 = false;
            		}
HXDLIN( 584)		if (_hx_tmp7) {
HXLINE( 584)			_hx_tmp6 = ::hx::IsInstanceEq( this->_headTiles->graphics,graphic );
            		}
            		else {
HXLINE( 584)			_hx_tmp6 = false;
            		}
HXDLIN( 584)		if (_hx_tmp6) {
HXLINE( 584)			_hx_tmp5 = (this->_headTiles->colored == colored);
            		}
            		else {
HXLINE( 584)			_hx_tmp5 = false;
            		}
HXDLIN( 584)		if (_hx_tmp5) {
HXLINE( 584)			_hx_tmp4 = (this->_headTiles->hasColorOffsets == hasColorOffsets);
            		}
            		else {
HXLINE( 584)			_hx_tmp4 = false;
            		}
HXDLIN( 584)		if (_hx_tmp4) {
HXLINE( 584)			_hx_tmp3 = (this->_headTiles->blending == blendInt);
            		}
            		else {
HXLINE( 584)			_hx_tmp3 = false;
            		}
HXDLIN( 584)		if (_hx_tmp3) {
HXLINE( 584)			_hx_tmp2 = ::hx::IsEq( this->_headTiles->blend,blend );
            		}
            		else {
HXLINE( 584)			_hx_tmp2 = false;
            		}
HXDLIN( 584)		if (_hx_tmp2) {
HXLINE( 584)			_hx_tmp1 = (this->_headTiles->antialiasing == smooth);
            		}
            		else {
HXLINE( 584)			_hx_tmp1 = false;
            		}
HXDLIN( 584)		if (_hx_tmp1) {
HXLINE( 584)			_hx_tmp = ::hx::IsInstanceEq( this->_headTiles->shader,shader );
            		}
            		else {
HXLINE( 584)			_hx_tmp = false;
            		}
HXDLIN( 584)		if (_hx_tmp) {
HXLINE( 594)			return this->_headTiles;
            		}
HXLINE( 597)		if (::hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTilesHead )) {
HXLINE( 599)			itemToReturn = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 600)			 ::flixel::graphics::tile::FlxDrawQuadsItem newHead = ( ( ::flixel::graphics::tile::FlxDrawQuadsItem)(::flixel::FlxCamera_obj::_storageTilesHead->nextTyped) );
HXLINE( 601)			itemToReturn->reset();
HXLINE( 602)			::flixel::FlxCamera_obj::_storageTilesHead = newHead;
            		}
            		else {
HXLINE( 606)			itemToReturn =  ::flixel::graphics::tile::FlxDrawQuadsItem_obj::__alloc( HX_CTX );
            		}
HXLINE( 610)		if (::hx::IsNull( graphic->shader )) {
HXLINE( 611)			HX_STACK_DO_THROW(HX_("Attempted to queue an invalid FlxDrawItem, did you destroy a cached sprite?",e4,69,53,a4));
            		}
HXLINE( 613)		itemToReturn->graphics = graphic;
HXLINE( 614)		itemToReturn->antialiasing = smooth;
HXLINE( 615)		itemToReturn->colored = colored;
HXLINE( 616)		itemToReturn->hasColorOffsets = hasColorOffsets;
HXLINE( 617)		itemToReturn->blending = blendInt;
HXLINE( 618)		itemToReturn->blend = blend;
HXLINE( 619)		itemToReturn->shader = shader;
HXLINE( 621)		itemToReturn->nextTyped = this->_headTiles;
HXLINE( 622)		this->_headTiles = itemToReturn;
HXLINE( 624)		if (::hx::IsNull( this->_headOfDrawStack )) {
HXLINE( 626)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 629)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 631)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 634)		this->_currentDrawItem = itemToReturn;
HXLINE( 636)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxCamera_obj,startQuadBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::startTrianglesBatch( ::flixel::graphics::FlxGraphic graphic,::hx::Null< bool >  __o_smoothing,::hx::Null< bool >  __o_isColored, ::Dynamic blend, ::Dynamic hasColorOffsets, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		bool smoothing = __o_smoothing.Default(false);
            		bool isColored = __o_isColored.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_642_startTrianglesBatch)
HXLINE( 643)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 645)		bool _hx_tmp;
HXDLIN( 645)		bool _hx_tmp1;
HXDLIN( 645)		bool _hx_tmp2;
HXDLIN( 645)		bool _hx_tmp3;
HXDLIN( 645)		bool _hx_tmp4;
HXDLIN( 645)		bool _hx_tmp5;
HXDLIN( 645)		bool _hx_tmp6;
HXDLIN( 645)		bool _hx_tmp7;
HXDLIN( 645)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 645)			_hx_tmp7 = ::hx::IsPointerEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TRIANGLES_dyn() );
            		}
            		else {
HXLINE( 645)			_hx_tmp7 = false;
            		}
HXDLIN( 645)		if (_hx_tmp7) {
HXLINE( 645)			_hx_tmp6 = ::hx::IsInstanceEq( this->_headTriangles->graphics,graphic );
            		}
            		else {
HXLINE( 645)			_hx_tmp6 = false;
            		}
HXDLIN( 645)		if (_hx_tmp6) {
HXLINE( 645)			_hx_tmp5 = (this->_headTriangles->antialiasing == smoothing);
            		}
            		else {
HXLINE( 645)			_hx_tmp5 = false;
            		}
HXDLIN( 645)		if (_hx_tmp5) {
HXLINE( 645)			_hx_tmp4 = (this->_headTriangles->colored == isColored);
            		}
            		else {
HXLINE( 645)			_hx_tmp4 = false;
            		}
HXDLIN( 645)		if (_hx_tmp4) {
HXLINE( 645)			_hx_tmp3 = (this->_headTriangles->blending == blendInt);
            		}
            		else {
HXLINE( 645)			_hx_tmp3 = false;
            		}
HXDLIN( 645)		if (_hx_tmp3) {
HXLINE( 645)			_hx_tmp2 = ::hx::IsEq( this->_headTriangles->blend,blend );
            		}
            		else {
HXLINE( 645)			_hx_tmp2 = false;
            		}
HXDLIN( 645)		if (_hx_tmp2) {
HXLINE( 645)			_hx_tmp1 = ::hx::IsEq( this->_headTriangles->hasColorOffsets,hasColorOffsets );
            		}
            		else {
HXLINE( 645)			_hx_tmp1 = false;
            		}
HXDLIN( 645)		if (_hx_tmp1) {
HXLINE( 645)			_hx_tmp = ::hx::IsInstanceEq( this->_headTriangles->shader,shader );
            		}
            		else {
HXLINE( 645)			_hx_tmp = false;
            		}
HXDLIN( 645)		if (_hx_tmp) {
HXLINE( 658)			return this->_headTriangles;
            		}
HXLINE( 661)		return this->getNewDrawTrianglesItem(graphic,smoothing,isColored,blend,hasColorOffsets,shader);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxCamera_obj,startTrianglesBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::getNewDrawTrianglesItem( ::flixel::graphics::FlxGraphic graphic,::hx::Null< bool >  __o_smoothing,::hx::Null< bool >  __o_isColored, ::Dynamic blend, ::Dynamic hasColorOffsets, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		bool smoothing = __o_smoothing.Default(false);
            		bool isColored = __o_isColored.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_666_getNewDrawTrianglesItem)
HXLINE( 667)		 ::flixel::graphics::tile::FlxDrawTrianglesItem itemToReturn = null();
HXLINE( 668)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 670)		if (::hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTrianglesHead )) {
HXLINE( 672)			itemToReturn = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 673)			 ::flixel::graphics::tile::FlxDrawTrianglesItem newHead = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(::flixel::FlxCamera_obj::_storageTrianglesHead->nextTyped) );
HXLINE( 674)			itemToReturn->reset();
HXLINE( 675)			::flixel::FlxCamera_obj::_storageTrianglesHead = newHead;
            		}
            		else {
HXLINE( 679)			itemToReturn =  ::flixel::graphics::tile::FlxDrawTrianglesItem_obj::__alloc( HX_CTX );
            		}
HXLINE( 682)		itemToReturn->graphics = graphic;
HXLINE( 683)		itemToReturn->antialiasing = smoothing;
HXLINE( 684)		itemToReturn->colored = isColored;
HXLINE( 685)		itemToReturn->blending = blendInt;
HXLINE( 686)		itemToReturn->blend = blend;
HXLINE( 688)		itemToReturn->hasColorOffsets = ( (bool)(hasColorOffsets) );
HXLINE( 689)		itemToReturn->shader = shader;
HXLINE( 692)		itemToReturn->nextTyped = this->_headTriangles;
HXLINE( 693)		this->_headTriangles = itemToReturn;
HXLINE( 695)		if (::hx::IsNull( this->_headOfDrawStack )) {
HXLINE( 697)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 700)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 702)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 705)		this->_currentDrawItem = itemToReturn;
HXLINE( 707)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxCamera_obj,getNewDrawTrianglesItem,return )

void FlxCamera_obj::clearDrawStack(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_712_clearDrawStack)
HXLINE( 713)		 ::flixel::graphics::tile::FlxDrawQuadsItem currTiles = this->_headTiles;
HXLINE( 714)		 ::flixel::graphics::tile::FlxDrawQuadsItem newTilesHead;
HXLINE( 716)		while(::hx::IsNotNull( currTiles )){
HXLINE( 718)			newTilesHead = ( ( ::flixel::graphics::tile::FlxDrawQuadsItem)(currTiles->nextTyped) );
HXLINE( 719)			currTiles->reset();
HXLINE( 720)			currTiles->nextTyped = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 721)			::flixel::FlxCamera_obj::_storageTilesHead = currTiles;
HXLINE( 722)			currTiles = newTilesHead;
            		}
HXLINE( 725)		 ::flixel::graphics::tile::FlxDrawTrianglesItem currTriangles = this->_headTriangles;
HXLINE( 726)		 ::flixel::graphics::tile::FlxDrawTrianglesItem newTrianglesHead;
HXLINE( 728)		while(::hx::IsNotNull( currTriangles )){
HXLINE( 730)			newTrianglesHead = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(currTriangles->nextTyped) );
HXLINE( 731)			currTriangles->reset();
HXLINE( 732)			currTriangles->nextTyped = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 733)			::flixel::FlxCamera_obj::_storageTrianglesHead = currTriangles;
HXLINE( 734)			currTriangles = newTrianglesHead;
            		}
HXLINE( 737)		this->_currentDrawItem = null();
HXLINE( 738)		this->_headOfDrawStack = null();
HXLINE( 739)		this->_headTiles = null();
HXLINE( 740)		this->_headTriangles = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,clearDrawStack,(void))

void FlxCamera_obj::render(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_745_render)
HXLINE( 746)		 ::flixel::graphics::tile::FlxDrawBaseItem currItem = this->_headOfDrawStack;
HXLINE( 747)		while(::hx::IsNotNull( currItem )){
HXLINE( 749)			currItem->render(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 750)			currItem = currItem->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,render,(void))

void FlxCamera_obj::drawPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::display::BitmapData pixels, ::flixel::math::FlxMatrix matrix, ::openfl::geom::ColorTransform transform, ::Dynamic blend, ::Dynamic __o_smoothing, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		 ::Dynamic smoothing = __o_smoothing;
            		if (::hx::IsNull(__o_smoothing)) smoothing = false;
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_757_drawPixels)
HXDLIN( 757)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 759)			this->_helperMatrix->copyFrom(matrix);
HXLINE( 761)			if (this->_useBlitMatrix) {
HXLINE( 763)				this->_helperMatrix->concat(this->_blitMatrix);
HXLINE( 764)				bool _hx_tmp;
HXDLIN( 764)				if (!(( (bool)(smoothing) ))) {
HXLINE( 764)					_hx_tmp = this->antialiasing;
            				}
            				else {
HXLINE( 764)					_hx_tmp = true;
            				}
HXDLIN( 764)				this->buffer->draw(pixels,this->_helperMatrix,null(),null(),null(),_hx_tmp);
            			}
            			else {
HXLINE( 768)				this->_helperMatrix->translate(-(this->viewMarginX),-(this->viewMarginY));
HXLINE( 769)				bool _hx_tmp1;
HXDLIN( 769)				if (!(( (bool)(smoothing) ))) {
HXLINE( 769)					_hx_tmp1 = this->antialiasing;
            				}
            				else {
HXLINE( 769)					_hx_tmp1 = true;
            				}
HXDLIN( 769)				this->buffer->draw(pixels,this->_helperMatrix,null(),blend,null(),_hx_tmp1);
            			}
            		}
            		else {
HXLINE( 774)			bool isColored;
HXDLIN( 774)			if (::hx::IsNotNull( transform )) {
HXLINE( 774)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 774)				isColored = false;
            			}
HXLINE( 775)			bool hasColorOffsets;
HXDLIN( 775)			if (::hx::IsNotNull( transform )) {
HXLINE( 775)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 775)				hasColorOffsets = false;
            			}
HXLINE( 780)			 ::flixel::graphics::tile::FlxDrawQuadsItem drawItem = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 782)			drawItem->addQuad(frame,matrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxCamera_obj,drawPixels,(void))

void FlxCamera_obj::copyPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::display::BitmapData pixels, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::geom::ColorTransform transform, ::Dynamic blend, ::Dynamic __o_smoothing, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		 ::Dynamic smoothing = __o_smoothing;
            		if (::hx::IsNull(__o_smoothing)) smoothing = false;
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_789_copyPixels)
HXDLIN( 789)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 791)			if (::hx::IsNotNull( pixels )) {
HXLINE( 793)				if (this->_useBlitMatrix) {
HXLINE( 795)					this->_helperMatrix->identity();
HXLINE( 796)					this->_helperMatrix->translate(destPoint->x,destPoint->y);
HXLINE( 797)					this->_helperMatrix->concat(this->_blitMatrix);
HXLINE( 798)					bool _hx_tmp;
HXDLIN( 798)					if (!(( (bool)(smoothing) ))) {
HXLINE( 798)						_hx_tmp = this->antialiasing;
            					}
            					else {
HXLINE( 798)						_hx_tmp = true;
            					}
HXDLIN( 798)					this->buffer->draw(pixels,this->_helperMatrix,null(),null(),null(),_hx_tmp);
            				}
            				else {
HXLINE( 802)					Float destPoint1 = destPoint->x;
HXDLIN( 802)					int _hx_tmp1 = ::Std_obj::_hx_int(this->viewMarginX);
HXDLIN( 802)					this->_helperPoint->x = (destPoint1 - ( (Float)(_hx_tmp1) ));
HXLINE( 803)					Float destPoint2 = destPoint->y;
HXDLIN( 803)					int _hx_tmp2 = ::Std_obj::_hx_int(this->viewMarginY);
HXDLIN( 803)					this->_helperPoint->y = (destPoint2 - ( (Float)(_hx_tmp2) ));
HXLINE( 804)					this->buffer->copyPixels(pixels,sourceRect,this->_helperPoint,null(),null(),true);
            				}
            			}
            			else {
HXLINE( 807)				if (::hx::IsNotNull( frame )) {
HXLINE( 810)					frame->paint(this->buffer,destPoint,true,null());
            				}
            			}
            		}
            		else {
HXLINE( 815)			this->_helperMatrix->identity();
HXLINE( 816)			this->_helperMatrix->translate((destPoint->x + frame->offset->x),(destPoint->y + frame->offset->y));
HXLINE( 818)			bool isColored;
HXDLIN( 818)			if (::hx::IsNotNull( transform )) {
HXLINE( 818)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 818)				isColored = false;
            			}
HXLINE( 819)			bool hasColorOffsets;
HXDLIN( 819)			if (::hx::IsNotNull( transform )) {
HXLINE( 819)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 819)				hasColorOffsets = false;
            			}
HXLINE( 822)			 ::flixel::graphics::tile::FlxDrawQuadsItem drawItem = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 826)			drawItem->addQuad(frame,this->_helperMatrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxCamera_obj,copyPixels,(void))

void FlxCamera_obj::drawTriangles( ::flixel::graphics::FlxGraphic graphic, ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::openfl::_Vector::IntVector colors, ::flixel::math::FlxBasePoint position, ::Dynamic blend,::hx::Null< bool >  __o_repeat,::hx::Null< bool >  __o_smoothing, ::openfl::geom::ColorTransform transform, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		bool repeat = __o_repeat.Default(false);
            		bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_833_drawTriangles)
HXDLIN( 833)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 835)			if (::hx::IsNull( position )) {
HXLINE( 836)				 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxCamera_obj::renderPoint;
HXDLIN( 836)				this1->set_x(( (Float)(0) ));
HXDLIN( 836)				this1->set_y(( (Float)(0) ));
HXDLIN( 836)				position = this1;
            			}
HXLINE( 838)			{
HXLINE( 838)				 ::flixel::math::FlxRect _this = this->_bounds;
HXDLIN( 838)				_this->x = ( (Float)(0) );
HXDLIN( 838)				_this->y = ( (Float)(0) );
HXDLIN( 838)				_this->width = ( (Float)(this->width) );
HXDLIN( 838)				_this->height = ( (Float)(this->height) );
            			}
HXLINE( 840)			int verticesLength = vertices->get_length();
HXLINE( 841)			int currentVertexPosition = 0;
HXLINE( 843)			Float tempX;
HXDLIN( 843)			Float tempY;
HXLINE( 844)			int i = 0;
HXLINE( 845)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxCamera_obj::renderRect;
HXDLIN( 845)			_this1->x = ( (Float)(0) );
HXDLIN( 845)			_this1->y = ( (Float)(0) );
HXDLIN( 845)			_this1->width = ( (Float)(0) );
HXDLIN( 845)			_this1->height = ( (Float)(0) );
HXDLIN( 845)			 ::flixel::math::FlxRect bounds = _this1;
HXLINE( 846)			{
HXLINE( 846)				::Dynamic this2 = ::flixel::FlxCamera_obj::drawVertices;
HXDLIN( 846)				int deleteCount = ::flixel::FlxCamera_obj::drawVertices->get_length();
HXDLIN( 846)				this2->__SetField(HX_("__tempIndex",3e,e8,54,22),0,::hx::paccDynamic);
HXDLIN( 846)				{
HXLINE( 846)					int _g_current = 0;
HXDLIN( 846)					::cpp::VirtualArray _g_args = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 846)					while((_g_current < _g_args->get_length())){
HXLINE( 846)						_g_current = (_g_current + 1);
HXDLIN( 846)						 ::Dynamic item = _g_args->__get((_g_current - 1));
HXDLIN( 846)						( ( ::openfl::_Vector::FloatVector)(this2) )->insertAt(( (int)(this2->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( (Float)(item) ));
HXDLIN( 846)						::hx::FieldRef((this2).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            					}
            				}
HXDLIN( 846)				( ( ::openfl::_Vector::FloatVector)(this2) )->splice(( (int)(this2->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),deleteCount);
            			}
HXLINE( 848)			while((i < verticesLength)){
HXLINE( 850)				Float position1 = position->x;
HXDLIN( 850)				tempX = (position1 + vertices->get(i));
HXLINE( 851)				Float position2 = position->y;
HXDLIN( 851)				tempY = (position2 + vertices->get((i + 1)));
HXLINE( 853)				{
HXLINE( 853)					currentVertexPosition = (currentVertexPosition + 1);
HXDLIN( 853)					::flixel::FlxCamera_obj::drawVertices->set((currentVertexPosition - 1),tempX);
            				}
HXLINE( 854)				{
HXLINE( 854)					currentVertexPosition = (currentVertexPosition + 1);
HXDLIN( 854)					::flixel::FlxCamera_obj::drawVertices->set((currentVertexPosition - 1),tempY);
            				}
HXLINE( 856)				if ((i == 0)) {
HXLINE( 858)					bounds->x = tempX;
HXDLIN( 858)					bounds->y = tempY;
HXDLIN( 858)					bounds->width = ( (Float)(0) );
HXDLIN( 858)					bounds->height = ( (Float)(0) );
            				}
            				else {
HXLINE( 862)					if ((tempX < bounds->x)) {
HXLINE( 862)						 ::flixel::math::FlxRect bounds1 = bounds;
HXDLIN( 862)						bounds1->width = (bounds1->width + (bounds->x - tempX));
HXDLIN( 862)						bounds->x = tempX;
            					}
HXDLIN( 862)					if ((tempY < bounds->y)) {
HXLINE( 862)						 ::flixel::math::FlxRect bounds2 = bounds;
HXDLIN( 862)						bounds2->height = (bounds2->height + (bounds->y - tempY));
HXDLIN( 862)						bounds->y = tempY;
            					}
HXDLIN( 862)					if ((tempX > (bounds->x + bounds->width))) {
HXLINE( 862)						bounds->width = (tempX - bounds->x);
            					}
HXDLIN( 862)					if ((tempY > (bounds->y + bounds->height))) {
HXLINE( 862)						bounds->height = (tempY - bounds->y);
            					}
            				}
HXLINE( 865)				i = (i + 2);
            			}
HXLINE( 868)			{
HXLINE( 868)				 ::flixel::math::FlxBasePoint _this2 = position;
HXDLIN( 868)				if (_this2->_weak) {
HXLINE( 868)					_this2->put();
            				}
            			}
HXLINE( 870)			 ::flixel::math::FlxRect _this3 = this->_bounds;
HXDLIN( 870)			bool result;
HXDLIN( 870)			bool result1;
HXDLIN( 870)			bool result2;
HXDLIN( 870)			if (((bounds->x + bounds->width) > _this3->x)) {
HXLINE( 870)				result2 = (bounds->x < (_this3->x + _this3->width));
            			}
            			else {
HXLINE( 870)				result2 = false;
            			}
HXDLIN( 870)			if (result2) {
HXLINE( 870)				result1 = ((bounds->y + bounds->height) > _this3->y);
            			}
            			else {
HXLINE( 870)				result1 = false;
            			}
HXDLIN( 870)			if (result1) {
HXLINE( 870)				result = (bounds->y < (_this3->y + _this3->height));
            			}
            			else {
HXLINE( 870)				result = false;
            			}
HXDLIN( 870)			if (bounds->_weak) {
HXLINE( 870)				if (!(bounds->_inPool)) {
HXLINE( 870)					bounds->_inPool = true;
HXDLIN( 870)					bounds->_weak = false;
HXDLIN( 870)					::flixel::math::FlxRect_obj::_pool->putUnsafe(bounds);
            				}
            			}
HXDLIN( 870)			if (!(result)) {
HXLINE( 872)				::Dynamic this3 = ::flixel::FlxCamera_obj::drawVertices;
HXDLIN( 872)				this3->__SetField(HX_("__tempIndex",3e,e8,54,22),(::flixel::FlxCamera_obj::drawVertices->get_length() - verticesLength),::hx::paccDynamic);
HXDLIN( 872)				{
HXLINE( 872)					int _g_current1 = 0;
HXDLIN( 872)					::cpp::VirtualArray _g_args1 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 872)					while((_g_current1 < _g_args1->get_length())){
HXLINE( 872)						_g_current1 = (_g_current1 + 1);
HXDLIN( 872)						 ::Dynamic item1 = _g_args1->__get((_g_current1 - 1));
HXDLIN( 872)						( ( ::openfl::_Vector::FloatVector)(this3) )->insertAt(( (int)(this3->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( (Float)(item1) ));
HXDLIN( 872)						::hx::FieldRef((this3).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            					}
            				}
HXDLIN( 872)				( ( ::openfl::_Vector::FloatVector)(this3) )->splice(( (int)(this3->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),verticesLength);
            			}
            			else {
HXLINE( 876)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->clear();
HXLINE( 877)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->beginBitmapFill(graphic->bitmap,null(),repeat,smoothing);
HXLINE( 878)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->drawTriangles(::flixel::FlxCamera_obj::drawVertices,indices,uvtData,null());
HXLINE( 879)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->endFill();
HXLINE( 882)				if (this->_useBlitMatrix) {
HXLINE( 883)					this->_helperMatrix->copyFrom(this->_blitMatrix);
            				}
            				else {
HXLINE( 886)					this->_helperMatrix->identity();
HXLINE( 887)					this->_helperMatrix->translate(-(this->viewMarginX),-(this->viewMarginY));
            				}
HXLINE( 890)				this->buffer->draw(::flixel::FlxCamera_obj::trianglesSprite,this->_helperMatrix,null(),null(),null(),null());
            			}
HXLINE( 904)			if (!(bounds->_inPool)) {
HXLINE( 904)				bounds->_inPool = true;
HXDLIN( 904)				bounds->_weak = false;
HXDLIN( 904)				::flixel::math::FlxRect_obj::_pool->putUnsafe(bounds);
            			}
            		}
            		else {
HXLINE( 908)			{
HXLINE( 908)				 ::flixel::math::FlxRect _this4 = this->_bounds;
HXDLIN( 908)				_this4->x = ( (Float)(0) );
HXDLIN( 908)				_this4->y = ( (Float)(0) );
HXDLIN( 908)				_this4->width = ( (Float)(this->width) );
HXDLIN( 908)				_this4->height = ( (Float)(this->height) );
            			}
HXLINE( 909)			bool isColored;
HXDLIN( 909)			if (::hx::IsNotNull( colors )) {
HXLINE( 909)				isColored = (colors->get_length() != 0);
            			}
            			else {
HXLINE( 909)				isColored = false;
            			}
HXLINE( 912)			bool hasColorOffsets;
HXDLIN( 912)			if (::hx::IsNotNull( transform )) {
HXLINE( 912)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 912)				hasColorOffsets = false;
            			}
HXLINE( 913)			if (!(isColored)) {
HXLINE( 913)				if (::hx::IsNotNull( transform )) {
HXLINE( 913)					isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            				}
            				else {
HXLINE( 913)					isColored = false;
            				}
            			}
            			else {
HXLINE( 913)				isColored = true;
            			}
HXLINE( 914)			 ::flixel::graphics::tile::FlxDrawTrianglesItem drawItem = this->startTrianglesBatch(graphic,smoothing,isColored,blend,hasColorOffsets,shader);
HXLINE( 915)			drawItem->addTriangles(vertices,indices,uvtData,colors,position,this->_bounds,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC11(FlxCamera_obj,drawTriangles,(void))

 ::flixel::math::FlxRect FlxCamera_obj::transformRect( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_929_transformRect)
HXLINE( 930)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 932)			{
HXLINE( 932)				 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 932)				rect1->x = (rect1->x + -(this->viewMarginX));
HXDLIN( 932)				 ::flixel::math::FlxRect rect2 = rect;
HXDLIN( 932)				rect2->y = (rect2->y + -(this->viewMarginY));
            			}
HXLINE( 934)			if (this->_useBlitMatrix) {
HXLINE( 936)				 ::flixel::math::FlxRect rect3 = rect;
HXDLIN( 936)				rect3->x = (rect3->x * this->zoom);
HXLINE( 937)				 ::flixel::math::FlxRect rect4 = rect;
HXDLIN( 937)				rect4->y = (rect4->y * this->zoom);
HXLINE( 938)				 ::flixel::math::FlxRect rect5 = rect;
HXDLIN( 938)				rect5->width = (rect5->width * this->zoom);
HXLINE( 939)				 ::flixel::math::FlxRect rect6 = rect;
HXDLIN( 939)				rect6->height = (rect6->height * this->zoom);
            			}
            		}
HXLINE( 943)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformRect,return )

 ::flixel::math::FlxBasePoint FlxCamera_obj::transformPoint( ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_952_transformPoint)
HXLINE( 953)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 955)			{
HXLINE( 955)				Float y = this->viewMarginY;
HXDLIN( 955)				point->set_x((point->x - this->viewMarginX));
HXDLIN( 955)				point->set_y((point->y - y));
            			}
HXLINE( 957)			if (this->_useBlitMatrix) {
HXLINE( 958)				Float amount = this->zoom;
HXDLIN( 958)				point->set_x((point->x * amount));
HXDLIN( 958)				point->set_y((point->y * amount));
            			}
            		}
HXLINE( 961)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformPoint,return )

 ::flixel::math::FlxBasePoint FlxCamera_obj::transformVector( ::flixel::math::FlxBasePoint vector){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_970_transformVector)
HXLINE( 971)		bool _hx_tmp;
HXDLIN( 971)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 971)			_hx_tmp = this->_useBlitMatrix;
            		}
            		else {
HXLINE( 971)			_hx_tmp = false;
            		}
HXDLIN( 971)		if (_hx_tmp) {
HXLINE( 972)			Float amount = this->zoom;
HXDLIN( 972)			vector->set_x((vector->x * amount));
HXDLIN( 972)			vector->set_y((vector->y * amount));
            		}
HXLINE( 974)		return vector;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformVector,return )

 ::openfl::display::DisplayObject FlxCamera_obj::transformObject( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_985_transformObject)
HXLINE( 986)		Float _hx_tmp = object->get_scaleX();
HXDLIN( 986)		object->set_scaleX((_hx_tmp * this->totalScaleX));
HXLINE( 987)		Float _hx_tmp1 = object->get_scaleY();
HXDLIN( 987)		object->set_scaleY((_hx_tmp1 * this->totalScaleY));
HXLINE( 989)		Float _hx_tmp2 = object->get_x();
HXDLIN( 989)		object->set_x((_hx_tmp2 - (this->scroll->x * this->totalScaleX)));
HXLINE( 990)		Float _hx_tmp3 = object->get_y();
HXDLIN( 990)		object->set_y((_hx_tmp3 - (this->scroll->y * this->totalScaleY)));
HXLINE( 992)		Float _hx_tmp4 = object->get_x();
HXDLIN( 992)		object->set_x((_hx_tmp4 - (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x)));
HXLINE( 993)		Float _hx_tmp5 = object->get_y();
HXDLIN( 993)		object->set_y((_hx_tmp5 - (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y)));
HXLINE( 995)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformObject,return )

void FlxCamera_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1066_destroy)
HXLINE(1067)		::flixel::util::FlxDestroyUtil_obj::removeChild(this->flashSprite,this->_scrollRect);
HXLINE(1069)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1071)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->_flashBitmap);
HXLINE(1072)			this->screen = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->screen)) );
HXLINE(1073)			this->buffer = null();
HXLINE(1074)			this->_flashBitmap = null();
HXLINE(1075)			this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
            		}
            		else {
HXLINE(1084)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->canvas);
HXLINE(1085)			if (::hx::IsNotNull( this->canvas )) {
HXLINE(1087)				{
HXLINE(1087)					int _g = 0;
HXDLIN(1087)					int _g1 = this->canvas->get_numChildren();
HXDLIN(1087)					while((_g < _g1)){
HXLINE(1087)						_g = (_g + 1);
HXDLIN(1087)						int i = (_g - 1);
HXLINE(1089)						this->canvas->removeChildAt(0);
            					}
            				}
HXLINE(1091)				this->canvas = null();
            			}
HXLINE(1094)			if (::hx::IsNotNull( this->_headOfDrawStack )) {
HXLINE(1096)				this->clearDrawStack();
            			}
HXLINE(1099)			this->_blitMatrix = null();
HXLINE(1100)			this->_helperMatrix = null();
HXLINE(1101)			this->_helperPoint = null();
            		}
HXLINE(1104)		this->_bounds = null();
HXLINE(1105)		this->scroll = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scroll)) );
HXLINE(1106)		this->targetOffset = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->targetOffset)) );
HXLINE(1107)		this->deadzone = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->deadzone)) );
HXLINE(1109)		this->target = null();
HXLINE(1110)		this->flashSprite = null();
HXLINE(1111)		this->_scrollRect = null();
HXLINE(1112)		this->_flashRect = null();
HXLINE(1113)		this->_flashPoint = null();
HXLINE(1114)		this->_fxFlashComplete = null();
HXLINE(1115)		this->_fxFadeComplete = null();
HXLINE(1116)		this->_fxShakeComplete = null();
HXLINE(1118)		this->super::destroy();
            	}


void FlxCamera_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1125_update)
HXLINE(1127)		if (::hx::IsNotNull( this->target )) {
HXLINE(1129)			this->updateFollow();
HXLINE(1130)			this->updateLerp(elapsed);
            		}
HXLINE(1133)		this->updateScroll();
HXLINE(1134)		this->updateFlash(elapsed);
HXLINE(1135)		this->updateFade(elapsed);
HXLINE(1137)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(1137)		if (this->filtersEnabled) {
HXLINE(1137)			_hx_tmp = this->filters;
            		}
            		else {
HXLINE(1137)			_hx_tmp = null();
            		}
HXDLIN(1137)		this->flashSprite->set_filters(_hx_tmp);
HXLINE(1139)		this->updateFlashSpritePosition();
HXLINE(1140)		this->updateShake(elapsed);
            	}


void FlxCamera_obj::updateScroll(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1150_updateScroll)
HXDLIN(1150)		this->bindScrollPos(this->scroll);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScroll,(void))

 ::flixel::math::FlxBasePoint FlxCamera_obj::bindScrollPos( ::flixel::math::FlxBasePoint scrollPos){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1162_bindScrollPos)
HXLINE(1163)		 ::Dynamic minX;
HXDLIN(1163)		if (::hx::IsNull( this->minScrollX )) {
HXLINE(1163)			minX = null();
            		}
            		else {
HXLINE(1163)			minX = (( (Float)(this->minScrollX) ) - this->viewMarginX);
            		}
HXLINE(1164)		 ::Dynamic maxX;
HXDLIN(1164)		if (::hx::IsNull( this->maxScrollX )) {
HXLINE(1164)			maxX = null();
            		}
            		else {
HXLINE(1164)			maxX = (( (Float)(this->maxScrollX) ) - (( (Float)(this->width) ) - this->viewMarginX));
            		}
HXLINE(1165)		 ::Dynamic minY;
HXDLIN(1165)		if (::hx::IsNull( this->minScrollY )) {
HXLINE(1165)			minY = null();
            		}
            		else {
HXLINE(1165)			minY = (( (Float)(this->minScrollY) ) - this->viewMarginY);
            		}
HXLINE(1166)		 ::Dynamic maxY;
HXDLIN(1166)		if (::hx::IsNull( this->maxScrollY )) {
HXLINE(1166)			maxY = null();
            		}
            		else {
HXLINE(1166)			maxY = (( (Float)(this->maxScrollY) ) - (( (Float)(this->height) ) - this->viewMarginY));
            		}
HXLINE(1169)		{
HXLINE(1169)			Float Value = scrollPos->x;
HXDLIN(1169)			Float lowerBound;
HXDLIN(1169)			bool lowerBound1;
HXDLIN(1169)			if (::hx::IsNotNull( minX )) {
HXLINE(1169)				lowerBound1 = ::hx::IsLess( Value,minX );
            			}
            			else {
HXLINE(1169)				lowerBound1 = false;
            			}
HXDLIN(1169)			if (lowerBound1) {
HXLINE(1169)				lowerBound = ( (Float)(minX) );
            			}
            			else {
HXLINE(1169)				lowerBound = Value;
            			}
HXDLIN(1169)			Float x;
HXDLIN(1169)			bool x1;
HXDLIN(1169)			if (::hx::IsNotNull( maxX )) {
HXLINE(1169)				x1 = ::hx::IsGreater( lowerBound,maxX );
            			}
            			else {
HXLINE(1169)				x1 = false;
            			}
HXDLIN(1169)			if (x1) {
HXLINE(1169)				x = ( (Float)(maxX) );
            			}
            			else {
HXLINE(1169)				x = lowerBound;
            			}
HXDLIN(1169)			scrollPos->set_x(x);
            		}
HXLINE(1170)		{
HXLINE(1170)			Float Value1 = scrollPos->y;
HXDLIN(1170)			Float lowerBound2;
HXDLIN(1170)			bool lowerBound3;
HXDLIN(1170)			if (::hx::IsNotNull( minY )) {
HXLINE(1170)				lowerBound3 = ::hx::IsLess( Value1,minY );
            			}
            			else {
HXLINE(1170)				lowerBound3 = false;
            			}
HXDLIN(1170)			if (lowerBound3) {
HXLINE(1170)				lowerBound2 = ( (Float)(minY) );
            			}
            			else {
HXLINE(1170)				lowerBound2 = Value1;
            			}
HXDLIN(1170)			Float y;
HXDLIN(1170)			bool y1;
HXDLIN(1170)			if (::hx::IsNotNull( maxY )) {
HXLINE(1170)				y1 = ::hx::IsGreater( lowerBound2,maxY );
            			}
            			else {
HXLINE(1170)				y1 = false;
            			}
HXDLIN(1170)			if (y1) {
HXLINE(1170)				y = ( (Float)(maxY) );
            			}
            			else {
HXLINE(1170)				y = lowerBound2;
            			}
HXDLIN(1170)			scrollPos->set_y(y);
            		}
HXLINE(1171)		return scrollPos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,bindScrollPos,return )

void FlxCamera_obj::updateFollow(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1182_updateFollow)
HXDLIN(1182)		if (::hx::IsNull( this->deadzone )) {
HXLINE(1184)			this->target->getMidpoint(this->_point);
HXLINE(1185)			{
HXLINE(1185)				 ::flixel::math::FlxBasePoint this1 = this->_point;
HXDLIN(1185)				 ::flixel::math::FlxBasePoint point = this->targetOffset;
HXDLIN(1185)				{
HXLINE(1185)					Float y = point->y;
HXDLIN(1185)					this1->set_x((this1->x + point->x));
HXDLIN(1185)					this1->set_y((this1->y + y));
            				}
HXDLIN(1185)				{
HXLINE(1185)					 ::flixel::math::FlxBasePoint _this = point;
HXDLIN(1185)					if (_this->_weak) {
HXLINE(1185)						_this->put();
            					}
            				}
            			}
HXLINE(1186)			{
HXLINE(1186)				 ::flixel::math::FlxBasePoint this2 = this->_scrollTarget;
HXDLIN(1186)				Float y1 = (this->_point->y - (( (Float)(this->height) ) * ((Float)0.5)));
HXDLIN(1186)				this2->set_x((this->_point->x - (( (Float)(this->width) ) * ((Float)0.5))));
HXDLIN(1186)				this2->set_y(y1);
            			}
            		}
            		else {
HXLINE(1190)			Float edge;
HXLINE(1191)			Float targetX = (this->target->x + this->targetOffset->x);
HXLINE(1192)			Float targetY = (this->target->y + this->targetOffset->y);
HXLINE(1194)			if (::hx::IsPointerEq( this->style,::flixel::FlxCameraFollowStyle_obj::SCREEN_BY_SCREEN_dyn() )) {
HXLINE(1196)				if ((targetX >= (this->scroll->x + (( (Float)(this->width) ) - this->viewMarginX)))) {
HXLINE(1198)					this->_scrollTarget->set_x((this->_scrollTarget->x + (( (Float)(this->width) ) - (this->viewMarginX * ( (Float)(2) )))));
            				}
            				else {
HXLINE(1200)					Float _hx_tmp = (targetX + this->target->get_width());
HXDLIN(1200)					if ((_hx_tmp < (this->scroll->x + this->viewMarginX))) {
HXLINE(1202)						this->_scrollTarget->set_x((this->_scrollTarget->x - (( (Float)(this->width) ) - (this->viewMarginX * ( (Float)(2) )))));
            					}
            				}
HXLINE(1205)				if ((targetY >= (this->scroll->y + (( (Float)(this->height) ) - this->viewMarginY)))) {
HXLINE(1207)					this->_scrollTarget->set_y((this->_scrollTarget->y + (( (Float)(this->height) ) - (this->viewMarginY * ( (Float)(2) )))));
            				}
            				else {
HXLINE(1209)					Float _hx_tmp1 = (targetY + this->target->get_height());
HXDLIN(1209)					if ((_hx_tmp1 < (this->scroll->y + this->viewMarginY))) {
HXLINE(1211)						this->_scrollTarget->set_y((this->_scrollTarget->y - (( (Float)(this->height) ) - (this->viewMarginY * ( (Float)(2) )))));
            					}
            				}
HXLINE(1215)				this->bindScrollPos(this->_scrollTarget);
            			}
            			else {
HXLINE(1219)				edge = (targetX - this->deadzone->x);
HXLINE(1220)				if ((this->_scrollTarget->x > edge)) {
HXLINE(1222)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(1224)				Float edge1 = (targetX + this->target->get_width());
HXDLIN(1224)				edge = ((edge1 - this->deadzone->x) - this->deadzone->width);
HXLINE(1225)				if ((this->_scrollTarget->x < edge)) {
HXLINE(1227)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(1230)				edge = (targetY - this->deadzone->y);
HXLINE(1231)				if ((this->_scrollTarget->y > edge)) {
HXLINE(1233)					this->_scrollTarget->set_y(edge);
            				}
HXLINE(1235)				Float edge2 = (targetY + this->target->get_height());
HXDLIN(1235)				edge = ((edge2 - this->deadzone->y) - this->deadzone->height);
HXLINE(1236)				if ((this->_scrollTarget->y < edge)) {
HXLINE(1238)					this->_scrollTarget->set_y(edge);
            				}
            			}
HXLINE(1242)			if (::Std_obj::isOfType(this->target,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1244)				if (::hx::IsNull( this->_lastTargetPosition )) {
HXLINE(1246)					Float x = this->target->x;
HXDLIN(1246)					Float y2 = this->target->y;
HXDLIN(1246)					 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y2);
HXDLIN(1246)					point1->_inPool = false;
HXDLIN(1246)					this->_lastTargetPosition = point1;
            				}
HXLINE(1248)				this->_scrollTarget->set_x((this->_scrollTarget->x + ((this->target->x - this->_lastTargetPosition->x) * this->followLead->x)));
HXLINE(1249)				this->_scrollTarget->set_y((this->_scrollTarget->y + ((this->target->y - this->_lastTargetPosition->y) * this->followLead->y)));
HXLINE(1251)				this->_lastTargetPosition->set_x(this->target->x);
HXLINE(1252)				this->_lastTargetPosition->set_y(this->target->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFollow,(void))

void FlxCamera_obj::updateLerp(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1259_updateLerp)
HXDLIN(1259)		if ((this->followLerp >= ((Float)1.0))) {
HXLINE(1261)			 ::flixel::math::FlxBasePoint this1 = this->scroll;
HXDLIN(1261)			 ::flixel::math::FlxBasePoint p = this->_scrollTarget;
HXDLIN(1261)			{
HXLINE(1261)				Float y = p->y;
HXDLIN(1261)				this1->set_x(p->x);
HXDLIN(1261)				this1->set_y(y);
            			}
HXDLIN(1261)			{
HXLINE(1261)				 ::flixel::math::FlxBasePoint _this = p;
HXDLIN(1261)				if (_this->_weak) {
HXLINE(1261)					_this->put();
            				}
            			}
            		}
            		else {
HXLINE(1263)			if ((this->followLerp > ((Float)0.0))) {
HXLINE(1266)				Float adjustedLerp = (((Float)1.0) - ::Math_obj::pow((((Float)1.0) - this->followLerp),(elapsed * ( (Float)(60) ))));
HXLINE(1268)				this->scroll->set_x((this->scroll->x + ((this->_scrollTarget->x - this->scroll->x) * adjustedLerp)));
HXLINE(1269)				this->scroll->set_y((this->scroll->y + ((this->_scrollTarget->y - this->scroll->y) * adjustedLerp)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateLerp,(void))

void FlxCamera_obj::updateFlash(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1276_updateFlash)
HXDLIN(1276)		if ((this->_fxFlashAlpha > ((Float)0.0))) {
HXLINE(1278)			 ::flixel::FlxCamera _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1278)			_hx_tmp->_fxFlashAlpha = (_hx_tmp->_fxFlashAlpha - (elapsed / this->_fxFlashDuration));
HXLINE(1279)			bool _hx_tmp1;
HXDLIN(1279)			if ((this->_fxFlashAlpha <= 0)) {
HXLINE(1279)				_hx_tmp1 = ::hx::IsNotNull( this->_fxFlashComplete );
            			}
            			else {
HXLINE(1279)				_hx_tmp1 = false;
            			}
HXDLIN(1279)			if (_hx_tmp1) {
HXLINE(1281)				this->_fxFlashComplete();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFlash,(void))

void FlxCamera_obj::updateFade(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1287_updateFade)
HXLINE(1288)		if ((this->_fxFadeDuration == ((Float)0.0))) {
HXLINE(1289)			return;
            		}
HXLINE(1291)		if (this->_fxFadeIn) {
HXLINE(1293)			 ::flixel::FlxCamera _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1293)			_hx_tmp->_fxFadeAlpha = (_hx_tmp->_fxFadeAlpha - (elapsed / this->_fxFadeDuration));
HXLINE(1294)			if ((this->_fxFadeAlpha <= ((Float)0.0))) {
HXLINE(1296)				this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1297)				this->completeFade();
            			}
            		}
            		else {
HXLINE(1302)			 ::flixel::FlxCamera _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1302)			_hx_tmp1->_fxFadeAlpha = (_hx_tmp1->_fxFadeAlpha + (elapsed / this->_fxFadeDuration));
HXLINE(1303)			if ((this->_fxFadeAlpha >= ((Float)1.0))) {
HXLINE(1305)				this->_fxFadeAlpha = ((Float)1.0);
HXLINE(1306)				this->completeFade();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFade,(void))

void FlxCamera_obj::completeFade(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1312_completeFade)
HXLINE(1313)		this->_fxFadeDuration = ((Float)0.0);
HXLINE(1314)		if (::hx::IsNotNull( this->_fxFadeComplete )) {
HXLINE(1315)			this->_fxFadeComplete();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,completeFade,(void))

void FlxCamera_obj::updateShake(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1320_updateShake)
HXDLIN(1320)		if ((this->_fxShakeDuration > 0)) {
HXLINE(1322)			 ::flixel::FlxCamera _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1322)			_hx_tmp->_fxShakeDuration = (_hx_tmp->_fxShakeDuration - elapsed);
HXLINE(1323)			if ((this->_fxShakeDuration <= 0)) {
HXLINE(1325)				if (::hx::IsNotNull( this->_fxShakeComplete )) {
HXLINE(1327)					this->_fxShakeComplete();
            				}
            			}
            			else {
HXLINE(1332)				 ::Dynamic pixelPerfect;
HXDLIN(1332)				if (::hx::IsNull( this->pixelPerfectShake )) {
HXLINE(1332)					pixelPerfect = this->pixelPerfectRender;
            				}
            				else {
HXLINE(1332)					pixelPerfect = this->pixelPerfectShake;
            				}
HXLINE(1333)				int this1 = this->_fxShakeAxes;
HXDLIN(1333)				bool _hx_tmp1;
HXDLIN(1333)				if ((this1 != 1)) {
HXLINE(1333)					_hx_tmp1 = (this1 == 17);
            				}
            				else {
HXLINE(1333)					_hx_tmp1 = true;
            				}
HXDLIN(1333)				if (_hx_tmp1) {
HXLINE(1335)					Float shakePixels = ::flixel::FlxG_obj::random->_hx_float(-1,1,null());
HXDLIN(1335)					Float shakePixels1 = ((shakePixels * this->_fxShakeIntensity) * ( (Float)(this->width) ));
HXLINE(1336)					if (( (bool)(pixelPerfect) )) {
HXLINE(1337)						shakePixels1 = ( (Float)(::Math_obj::round(shakePixels1)) );
            					}
HXLINE(1339)					 ::openfl::display::Sprite fh = this->flashSprite;
HXDLIN(1339)					Float _hx_tmp2 = fh->get_x();
HXDLIN(1339)					fh->set_x((_hx_tmp2 + ((shakePixels1 * this->zoom) * ::flixel::FlxG_obj::scaleMode->scale->x)));
            				}
HXLINE(1342)				int this2 = this->_fxShakeAxes;
HXDLIN(1342)				bool _hx_tmp3;
HXDLIN(1342)				if ((this2 != 16)) {
HXLINE(1342)					_hx_tmp3 = (this2 == 17);
            				}
            				else {
HXLINE(1342)					_hx_tmp3 = true;
            				}
HXDLIN(1342)				if (_hx_tmp3) {
HXLINE(1344)					Float shakePixels2 = ::flixel::FlxG_obj::random->_hx_float(-1,1,null());
HXDLIN(1344)					Float shakePixels3 = ((shakePixels2 * this->_fxShakeIntensity) * ( (Float)(this->height) ));
HXLINE(1345)					if (( (bool)(pixelPerfect) )) {
HXLINE(1346)						shakePixels3 = ( (Float)(::Math_obj::round(shakePixels3)) );
            					}
HXLINE(1348)					 ::openfl::display::Sprite fh1 = this->flashSprite;
HXDLIN(1348)					Float _hx_tmp4 = fh1->get_y();
HXDLIN(1348)					fh1->set_y((_hx_tmp4 + ((shakePixels3 * this->zoom) * ::flixel::FlxG_obj::scaleMode->scale->y)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateShake,(void))

void FlxCamera_obj::updateFlashSpritePosition(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1360_updateFlashSpritePosition)
HXDLIN(1360)		if (::hx::IsNotNull( this->flashSprite )) {
HXLINE(1362)			this->flashSprite->set_x(((this->x * ::flixel::FlxG_obj::scaleMode->scale->x) + this->_flashOffset->x));
HXLINE(1363)			this->flashSprite->set_y(((this->y * ::flixel::FlxG_obj::scaleMode->scale->y) + this->_flashOffset->y));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashSpritePosition,(void))

void FlxCamera_obj::updateFlashOffset(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1372_updateFlashOffset)
HXLINE(1373)		this->_flashOffset->set_x((((( (Float)(this->width) ) * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->x) * this->initialZoom));
HXLINE(1374)		this->_flashOffset->set_y((((( (Float)(this->height) ) * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->y) * this->initialZoom));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashOffset,(void))

void FlxCamera_obj::updateScrollRect(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1386_updateScrollRect)
HXLINE(1387)		 ::openfl::geom::Rectangle rect;
HXDLIN(1387)		if (::hx::IsNotNull( this->_scrollRect )) {
HXLINE(1387)			rect = this->_scrollRect->get_scrollRect();
            		}
            		else {
HXLINE(1387)			rect = null();
            		}
HXLINE(1389)		if (::hx::IsNotNull( rect )) {
HXLINE(1391)			rect->x = (rect->y = ( (Float)(0) ));
HXLINE(1393)			rect->width = ((( (Float)(this->width) ) * this->initialZoom) * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1394)			rect->height = ((( (Float)(this->height) ) * this->initialZoom) * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1396)			this->_scrollRect->set_scrollRect(rect);
HXLINE(1398)			this->_scrollRect->set_x((((Float)-0.5) * rect->width));
HXLINE(1399)			this->_scrollRect->set_y((((Float)-0.5) * rect->height));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScrollRect,(void))

void FlxCamera_obj::updateInternalSpritePositions(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1411_updateInternalSpritePositions)
HXDLIN(1411)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1413)			if (::hx::IsNotNull( this->_flashBitmap )) {
HXLINE(1415)				this->_flashBitmap->set_x(( (Float)(0) ));
HXLINE(1416)				this->_flashBitmap->set_y(( (Float)(0) ));
            			}
            		}
            		else {
HXLINE(1421)			if (::hx::IsNotNull( this->canvas )) {
HXLINE(1423)				this->canvas->set_x((((((Float)-0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x));
HXLINE(1424)				this->canvas->set_y((((((Float)-0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y));
HXLINE(1426)				this->canvas->set_scaleX(this->totalScaleX);
HXLINE(1427)				this->canvas->set_scaleY(this->totalScaleY);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateInternalSpritePositions,(void))

void FlxCamera_obj::follow( ::flixel::FlxObject target, ::flixel::FlxCameraFollowStyle __o_style,::hx::Null< Float >  __o_lerp){
            		 ::flixel::FlxCameraFollowStyle style = __o_style;
            		if (::hx::IsNull(__o_style)) style = ::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn();
            		Float lerp = __o_lerp.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1453_follow)
HXLINE(1454)		this->style = style;
HXLINE(1455)		this->target = target;
HXLINE(1456)		this->followLerp = lerp;
HXLINE(1457)		this->_lastTargetPosition = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_lastTargetPosition)) );
HXLINE(1458)		this->deadzone = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->deadzone)) );
HXLINE(1460)		switch((int)(style->_hx_getIndex())){
            			case (int)0: {
HXLINE(1463)				Float w = ( (Float)(0) );
HXLINE(1464)				Float h = ( (Float)(0) );
HXLINE(1465)				if (::hx::IsNotNull( target )) {
HXLINE(1467)					w = target->get_width();
HXLINE(1468)					h = target->get_height();
            				}
HXLINE(1470)				Float X = ((( (Float)(this->width) ) - w) / ( (Float)(2) ));
HXDLIN(1470)				Float Y = (((( (Float)(this->height) ) - h) / ( (Float)(2) )) - (h * ((Float)0.25)));
HXDLIN(1470)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1470)				_this->x = X;
HXDLIN(1470)				_this->y = Y;
HXDLIN(1470)				_this->width = w;
HXDLIN(1470)				_this->height = h;
HXDLIN(1470)				 ::flixel::math::FlxRect rect = _this;
HXDLIN(1470)				rect->_inPool = false;
HXDLIN(1470)				this->deadzone = rect;
            			}
            			break;
            			case (int)1: {
HXLINE(1473)				Float w1 = (( (Float)(this->width) ) / ( (Float)(8) ));
HXLINE(1474)				Float h1 = (( (Float)(this->height) ) / ( (Float)(3) ));
HXLINE(1475)				Float X1 = ((( (Float)(this->width) ) - w1) / ( (Float)(2) ));
HXDLIN(1475)				Float Y1 = (((( (Float)(this->height) ) - h1) / ( (Float)(2) )) - (h1 * ((Float)0.25)));
HXDLIN(1475)				 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1475)				_this1->x = X1;
HXDLIN(1475)				_this1->y = Y1;
HXDLIN(1475)				_this1->width = w1;
HXDLIN(1475)				_this1->height = h1;
HXDLIN(1475)				 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN(1475)				rect1->_inPool = false;
HXDLIN(1475)				this->deadzone = rect1;
            			}
            			break;
            			case (int)2: {
HXLINE(1478)				Float helper = (::Math_obj::max(( (Float)(this->width) ),( (Float)(this->height) )) / ( (Float)(4) ));
HXLINE(1479)				Float X2 = ((( (Float)(this->width) ) - helper) / ( (Float)(2) ));
HXDLIN(1479)				Float Y2 = ((( (Float)(this->height) ) - helper) / ( (Float)(2) ));
HXDLIN(1479)				 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1479)				_this2->x = X2;
HXDLIN(1479)				_this2->y = Y2;
HXDLIN(1479)				_this2->width = helper;
HXDLIN(1479)				_this2->height = helper;
HXDLIN(1479)				 ::flixel::math::FlxRect rect2 = _this2;
HXDLIN(1479)				rect2->_inPool = false;
HXDLIN(1479)				this->deadzone = rect2;
            			}
            			break;
            			case (int)3: {
HXLINE(1482)				Float helper1 = (::Math_obj::max(( (Float)(this->width) ),( (Float)(this->height) )) / ( (Float)(8) ));
HXLINE(1483)				Float X3 = ((( (Float)(this->width) ) - helper1) / ( (Float)(2) ));
HXDLIN(1483)				Float Y3 = ((( (Float)(this->height) ) - helper1) / ( (Float)(2) ));
HXDLIN(1483)				 ::flixel::math::FlxRect _this3 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1483)				_this3->x = X3;
HXDLIN(1483)				_this3->y = Y3;
HXDLIN(1483)				_this3->width = helper1;
HXDLIN(1483)				_this3->height = helper1;
HXDLIN(1483)				 ::flixel::math::FlxRect rect3 = _this3;
HXDLIN(1483)				rect3->_inPool = false;
HXDLIN(1483)				this->deadzone = rect3;
            			}
            			break;
            			case (int)4: {
HXLINE(1486)				Float Width = ( (Float)(this->width) );
HXDLIN(1486)				Float Height = ( (Float)(this->height) );
HXDLIN(1486)				 ::flixel::math::FlxRect _this4 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1486)				_this4->x = ( (Float)(0) );
HXDLIN(1486)				_this4->y = ( (Float)(0) );
HXDLIN(1486)				_this4->width = Width;
HXDLIN(1486)				_this4->height = Height;
HXDLIN(1486)				 ::flixel::math::FlxRect rect4 = _this4;
HXDLIN(1486)				rect4->_inPool = false;
HXDLIN(1486)				this->deadzone = rect4;
            			}
            			break;
            			case (int)5: {
HXLINE(1489)				this->deadzone = null();
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxCamera_obj,follow,(void))

void FlxCamera_obj::snapToTarget(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1498_snapToTarget)
HXLINE(1499)		this->updateFollow();
HXLINE(1500)		{
HXLINE(1500)			 ::flixel::math::FlxBasePoint this1 = this->scroll;
HXDLIN(1500)			 ::flixel::math::FlxBasePoint p = this->_scrollTarget;
HXDLIN(1500)			{
HXLINE(1500)				Float y = p->y;
HXDLIN(1500)				this1->set_x(p->x);
HXDLIN(1500)				this1->set_y(y);
            			}
HXDLIN(1500)			{
HXLINE(1500)				 ::flixel::math::FlxBasePoint _this = p;
HXDLIN(1500)				if (_this->_weak) {
HXLINE(1500)					_this->put();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,snapToTarget,(void))

void FlxCamera_obj::focusOn( ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1509_focusOn)
HXLINE(1510)		{
HXLINE(1510)			 ::flixel::math::FlxBasePoint this1 = this->scroll;
HXDLIN(1510)			Float y = (point->y - (( (Float)(this->height) ) * ((Float)0.5)));
HXDLIN(1510)			this1->set_x((point->x - (( (Float)(this->width) ) * ((Float)0.5))));
HXDLIN(1510)			this1->set_y(y);
            		}
HXLINE(1511)		{
HXLINE(1511)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN(1511)			if (_this->_weak) {
HXLINE(1511)				_this->put();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,focusOn,(void))

void FlxCamera_obj::flash(::hx::Null< int >  __o_Color,::hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,::hx::Null< bool >  __o_Force){
            		int Color = __o_Color.Default(-1);
            		Float Duration = __o_Duration.Default(1);
            		bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1523_flash)
HXLINE(1524)		bool _hx_tmp;
HXDLIN(1524)		if (!(Force)) {
HXLINE(1524)			_hx_tmp = (this->_fxFlashAlpha > ((Float)0.0));
            		}
            		else {
HXLINE(1524)			_hx_tmp = false;
            		}
HXDLIN(1524)		if (_hx_tmp) {
HXLINE(1525)			return;
            		}
HXLINE(1527)		this->_fxFlashColor = Color;
HXLINE(1528)		if ((Duration <= 0)) {
HXLINE(1529)			Duration = ((Float)0.000001);
            		}
HXLINE(1530)		this->_fxFlashDuration = Duration;
HXLINE(1531)		this->_fxFlashComplete = OnComplete;
HXLINE(1532)		this->_fxFlashAlpha = ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,flash,(void))

void FlxCamera_obj::fade(::hx::Null< int >  __o_Color,::hx::Null< Float >  __o_Duration,::hx::Null< bool >  __o_FadeIn, ::Dynamic OnComplete,::hx::Null< bool >  __o_Force){
            		int Color = __o_Color.Default(-16777216);
            		Float Duration = __o_Duration.Default(1);
            		bool FadeIn = __o_FadeIn.Default(false);
            		bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1545_fade)
HXLINE(1546)		bool _hx_tmp;
HXDLIN(1546)		if ((this->_fxFadeDuration > 0)) {
HXLINE(1546)			_hx_tmp = !(Force);
            		}
            		else {
HXLINE(1546)			_hx_tmp = false;
            		}
HXDLIN(1546)		if (_hx_tmp) {
HXLINE(1547)			return;
            		}
HXLINE(1549)		this->_fxFadeColor = Color;
HXLINE(1550)		if ((Duration <= 0)) {
HXLINE(1551)			Duration = ((Float)0.000001);
            		}
HXLINE(1553)		this->_fxFadeIn = FadeIn;
HXLINE(1554)		this->_fxFadeDuration = Duration;
HXLINE(1555)		this->_fxFadeComplete = OnComplete;
HXLINE(1557)		Float _hx_tmp1;
HXDLIN(1557)		if (this->_fxFadeIn) {
HXLINE(1557)			_hx_tmp1 = ((Float)0.999999);
            		}
            		else {
HXLINE(1557)			_hx_tmp1 = ((Float)0.000001);
            		}
HXDLIN(1557)		this->_fxFadeAlpha = _hx_tmp1;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,fade,(void))

void FlxCamera_obj::shake(::hx::Null< Float >  __o_Intensity,::hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,::hx::Null< bool >  __o_Force, ::Dynamic Axes){
            		Float Intensity = __o_Intensity.Default(((Float)0.05));
            		Float Duration = __o_Duration.Default(((Float)0.5));
            		bool Force = __o_Force.Default(true);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1571_shake)
HXLINE(1572)		if (::hx::IsNull( Axes )) {
HXLINE(1573)			Axes = 17;
            		}
HXLINE(1575)		bool _hx_tmp;
HXDLIN(1575)		if (!(Force)) {
HXLINE(1575)			_hx_tmp = (this->_fxShakeDuration > 0);
            		}
            		else {
HXLINE(1575)			_hx_tmp = false;
            		}
HXDLIN(1575)		if (_hx_tmp) {
HXLINE(1576)			return;
            		}
HXLINE(1578)		this->_fxShakeIntensity = Intensity;
HXLINE(1579)		this->_fxShakeDuration = Duration;
HXLINE(1580)		this->_fxShakeComplete = OnComplete;
HXLINE(1581)		this->_fxShakeAxes = ( (int)(Axes) );
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,shake,(void))

void FlxCamera_obj::stopFade(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1588_stopFade)
HXLINE(1589)		this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1590)		this->_fxFadeDuration = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,stopFade,(void))

void FlxCamera_obj::stopFlash(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1597_stopFlash)
HXLINE(1598)		this->_fxFlashAlpha = ((Float)0.0);
HXLINE(1599)		this->updateFlashSpritePosition();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,stopFlash,(void))

void FlxCamera_obj::stopShake(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1607_stopShake)
HXDLIN(1607)		this->_fxShakeDuration = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,stopShake,(void))

void FlxCamera_obj::stopFX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1614_stopFX)
HXLINE(1615)		this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1616)		this->_fxFadeDuration = ((Float)0.0);
HXLINE(1617)		this->_fxFlashAlpha = ((Float)0.0);
HXLINE(1618)		this->updateFlashSpritePosition();
HXLINE(1619)		this->_fxShakeDuration = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,stopFX,(void))

 ::flixel::FlxCamera FlxCamera_obj::copyFrom( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1629_copyFrom)
HXLINE(1630)		this->setScrollBounds(Camera->minScrollX,Camera->maxScrollX,Camera->minScrollY,Camera->maxScrollY);
HXLINE(1632)		this->target = Camera->target;
HXLINE(1634)		if (::hx::IsNotNull( this->target )) {
HXLINE(1636)			if (::hx::IsNull( Camera->deadzone )) {
HXLINE(1638)				this->deadzone = null();
            			}
            			else {
HXLINE(1642)				if (::hx::IsNull( this->deadzone )) {
HXLINE(1644)					 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1644)					_this->x = ( (Float)(0) );
HXDLIN(1644)					_this->y = ( (Float)(0) );
HXDLIN(1644)					_this->width = ( (Float)(0) );
HXDLIN(1644)					_this->height = ( (Float)(0) );
HXDLIN(1644)					 ::flixel::math::FlxRect rect = _this;
HXDLIN(1644)					rect->_inPool = false;
HXDLIN(1644)					this->deadzone = rect;
            				}
HXLINE(1646)				{
HXLINE(1646)					 ::flixel::math::FlxRect _this1 = this->deadzone;
HXDLIN(1646)					 ::flixel::math::FlxRect Rect = Camera->deadzone;
HXDLIN(1646)					_this1->x = Rect->x;
HXDLIN(1646)					_this1->y = Rect->y;
HXDLIN(1646)					_this1->width = Rect->width;
HXDLIN(1646)					_this1->height = Rect->height;
HXDLIN(1646)					if (Rect->_weak) {
HXLINE(1646)						if (!(Rect->_inPool)) {
HXLINE(1646)							Rect->_inPool = true;
HXDLIN(1646)							Rect->_weak = false;
HXDLIN(1646)							::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            						}
            					}
            				}
            			}
            		}
HXLINE(1649)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,copyFrom,return )

void FlxCamera_obj::fill(int Color,::hx::Null< bool >  __o_BlendAlpha,::hx::Null< Float >  __o_FxAlpha, ::openfl::display::Graphics graphics){
            		bool BlendAlpha = __o_BlendAlpha.Default(true);
            		Float FxAlpha = __o_FxAlpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1660_fill)
HXDLIN(1660)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1662)			if (BlendAlpha) {
HXLINE(1664)				this->_fill->fillRect(this->_flashRect,Color);
HXLINE(1665)				this->buffer->copyPixels(this->_fill,this->_flashRect,this->_flashPoint,null(),null(),BlendAlpha);
            			}
            			else {
HXLINE(1669)				this->buffer->fillRect(this->_flashRect,Color);
            			}
            		}
            		else {
HXLINE(1674)			if ((FxAlpha == 0)) {
HXLINE(1675)				return;
            			}
HXLINE(1677)			 ::openfl::display::Graphics targetGraphics;
HXDLIN(1677)			if (::hx::IsNull( graphics )) {
HXLINE(1677)				targetGraphics = this->canvas->get_graphics();
            			}
            			else {
HXLINE(1677)				targetGraphics = graphics;
            			}
HXLINE(1679)			targetGraphics->overrideBlendMode(null());
HXLINE(1680)			targetGraphics->beginFill(Color,FxAlpha);
HXLINE(1683)			targetGraphics->drawRect((this->viewMarginX - ( (Float)(1) )),(this->viewMarginY - ( (Float)(1) )),((( (Float)(this->width) ) - (this->viewMarginX * ( (Float)(2) ))) + 2),((( (Float)(this->height) ) - (this->viewMarginY * ( (Float)(2) ))) + 2));
HXLINE(1684)			targetGraphics->endFill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,fill,(void))

void FlxCamera_obj::drawFX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1693_drawFX)
HXLINE(1695)		if ((this->_fxFlashAlpha > ((Float)0.0))) {
HXLINE(1697)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1699)				int color = this->_fxFlashColor;
HXLINE(1700)				{
HXLINE(1700)					Float Value = ((( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )) * this->_fxFlashAlpha);
HXDLIN(1700)					{
HXLINE(1700)						int Value1 = ::Math_obj::round((Value * ( (Float)(255) )));
HXDLIN(1700)						color = (color & 16777215);
HXDLIN(1700)						int color1;
HXDLIN(1700)						if ((Value1 > 255)) {
HXLINE(1700)							color1 = 255;
            						}
            						else {
HXLINE(1700)							if ((Value1 < 0)) {
HXLINE(1700)								color1 = 0;
            							}
            							else {
HXLINE(1700)								color1 = Value1;
            							}
            						}
HXDLIN(1700)						color = (color | (color1 << 24));
            					}
            				}
HXLINE(1701)				this->fill(color,null(),null(),null());
            			}
            			else {
HXLINE(1705)				Float alpha = ((( (Float)(((this->color >> 24) & 255)) ) / ( (Float)(255) )) * this->_fxFlashAlpha);
HXLINE(1706)				int _hx_tmp = (this->_fxFlashColor & 16777215);
HXDLIN(1706)				this->fill(_hx_tmp,true,alpha,this->canvas->get_graphics());
            			}
            		}
HXLINE(1711)		if ((this->_fxFadeAlpha > ((Float)0.0))) {
HXLINE(1713)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1715)				int color2 = this->_fxFadeColor;
HXLINE(1716)				{
HXLINE(1716)					Float Value2 = ((( (Float)(((color2 >> 24) & 255)) ) / ( (Float)(255) )) * this->_fxFadeAlpha);
HXDLIN(1716)					{
HXLINE(1716)						int Value3 = ::Math_obj::round((Value2 * ( (Float)(255) )));
HXDLIN(1716)						color2 = (color2 & 16777215);
HXDLIN(1716)						int color3;
HXDLIN(1716)						if ((Value3 > 255)) {
HXLINE(1716)							color3 = 255;
            						}
            						else {
HXLINE(1716)							if ((Value3 < 0)) {
HXLINE(1716)								color3 = 0;
            							}
            							else {
HXLINE(1716)								color3 = Value3;
            							}
            						}
HXDLIN(1716)						color2 = (color2 | (color3 << 24));
            					}
            				}
HXLINE(1717)				this->fill(color2,null(),null(),null());
            			}
            			else {
HXLINE(1721)				Float alpha1 = ((( (Float)(((this->_fxFadeColor >> 24) & 255)) ) / ( (Float)(255) )) * this->_fxFadeAlpha);
HXLINE(1722)				int _hx_tmp1 = (this->_fxFadeColor & 16777215);
HXDLIN(1722)				this->fill(_hx_tmp1,true,alpha1,this->canvas->get_graphics());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,drawFX,(void))

void FlxCamera_obj::checkResize(){
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_1730_checkResize)
HXDLIN(1730)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1732)			bool _hx_tmp;
HXDLIN(1732)			if ((this->width == this->buffer->width)) {
HXLINE(1732)				_hx_tmp = (this->height != this->buffer->height);
            			}
            			else {
HXLINE(1732)				_hx_tmp = true;
            			}
HXDLIN(1732)			if (_hx_tmp) {
HXLINE(1734)				 ::flixel::graphics::FlxGraphic oldBuffer = this->screen->graphic;
HXLINE(1735)				this->buffer =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
HXLINE(1736)				this->screen->set_pixels(this->buffer);
HXLINE(1737)				{
HXLINE(1737)					 ::flixel::math::FlxBasePoint this1 = this->screen->origin;
HXDLIN(1737)					this1->set_x(( (Float)(0) ));
HXDLIN(1737)					this1->set_y(( (Float)(0) ));
            				}
HXLINE(1738)				this->_flashBitmap->set_bitmapData(this->buffer);
HXLINE(1739)				this->_flashRect->width = ( (Float)(this->width) );
HXLINE(1740)				this->_flashRect->height = ( (Float)(this->height) );
HXLINE(1741)				this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
HXLINE(1742)				this->_fill =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
HXLINE(1743)				::flixel::FlxG_obj::bitmap->removeIfNoUse(oldBuffer);
            			}
HXLINE(1746)			{
HXLINE(1746)				this->_blitMatrix->identity();
HXDLIN(1746)				this->_blitMatrix->translate(-(this->viewMarginX),-(this->viewMarginY));
HXDLIN(1746)				this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXDLIN(1746)				bool _hx_tmp1;
HXDLIN(1746)				if (!((this->scaleX < this->initialZoom))) {
HXLINE(1746)					_hx_tmp1 = (this->scaleY < this->initialZoom);
            				}
            				else {
HXLINE(1746)					_hx_tmp1 = true;
            				}
HXDLIN(1746)				this->_useBlitMatrix = _hx_tmp1;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,checkResize,(void))

void FlxCamera_obj::updateBlitMatrix(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1751_updateBlitMatrix)
HXLINE(1752)		this->_blitMatrix->identity();
HXLINE(1753)		this->_blitMatrix->translate(-(this->viewMarginX),-(this->viewMarginY));
HXLINE(1754)		this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXLINE(1756)		bool _hx_tmp;
HXDLIN(1756)		if (!((this->scaleX < this->initialZoom))) {
HXLINE(1756)			_hx_tmp = (this->scaleY < this->initialZoom);
            		}
            		else {
HXLINE(1756)			_hx_tmp = true;
            		}
HXDLIN(1756)		this->_useBlitMatrix = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateBlitMatrix,(void))

void FlxCamera_obj::setSize(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1766_setSize)
HXLINE(1767)		this->set_width(Width);
HXLINE(1768)		this->set_height(Height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setSize,(void))

void FlxCamera_obj::setPosition(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1779_setPosition)
HXLINE(1780)		this->set_x(X);
HXLINE(1781)		this->set_y(Y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setPosition,(void))

void FlxCamera_obj::setScrollBoundsRect(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height,::hx::Null< bool >  __o_UpdateWorld){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		Float Width = __o_Width.Default(0);
            		Float Height = __o_Height.Default(0);
            		bool UpdateWorld = __o_UpdateWorld.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1794_setScrollBoundsRect)
HXLINE(1795)		if (UpdateWorld) {
HXLINE(1797)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1797)			_this->x = X;
HXDLIN(1797)			_this->y = Y;
HXDLIN(1797)			_this->width = Width;
HXDLIN(1797)			_this->height = Height;
            		}
HXLINE(1800)		this->setScrollBounds(X,(X + Width),Y,(Y + Height));
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,setScrollBoundsRect,(void))

void FlxCamera_obj::setScrollBounds( ::Dynamic MinX, ::Dynamic MaxX, ::Dynamic MinY, ::Dynamic MaxY){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1813_setScrollBounds)
HXLINE(1814)		this->minScrollX = MinX;
HXLINE(1815)		this->maxScrollX = MaxX;
HXLINE(1816)		this->minScrollY = MinY;
HXLINE(1817)		this->maxScrollY = MaxY;
HXLINE(1818)		this->updateScroll();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,setScrollBounds,(void))

void FlxCamera_obj::setScale(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1829_setScale)
HXLINE(1830)		this->scaleX = X;
HXLINE(1831)		this->scaleY = Y;
HXLINE(1833)		this->totalScaleX = (this->scaleX * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1834)		this->totalScaleY = (this->scaleY * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1836)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1838)			{
HXLINE(1838)				this->_blitMatrix->identity();
HXDLIN(1838)				this->_blitMatrix->translate(-(this->viewMarginX),-(this->viewMarginY));
HXDLIN(1838)				this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXDLIN(1838)				bool _hx_tmp;
HXDLIN(1838)				if (!((this->scaleX < this->initialZoom))) {
HXLINE(1838)					_hx_tmp = (this->scaleY < this->initialZoom);
            				}
            				else {
HXLINE(1838)					_hx_tmp = true;
            				}
HXDLIN(1838)				this->_useBlitMatrix = _hx_tmp;
            			}
HXLINE(1840)			if (this->_useBlitMatrix) {
HXLINE(1842)				this->_flashBitmap->set_scaleX((this->initialZoom * ::flixel::FlxG_obj::scaleMode->scale->x));
HXLINE(1843)				this->_flashBitmap->set_scaleY((this->initialZoom * ::flixel::FlxG_obj::scaleMode->scale->y));
            			}
            			else {
HXLINE(1847)				this->_flashBitmap->set_scaleX(this->totalScaleX);
HXLINE(1848)				this->_flashBitmap->set_scaleY(this->totalScaleY);
            			}
            		}
HXLINE(1852)		this->viewMarginX = (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) / this->scaleX);
HXLINE(1853)		this->viewMarginY = (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) / this->scaleY);
HXLINE(1855)		this->updateScrollRect();
HXLINE(1856)		this->updateInternalSpritePositions();
HXLINE(1858)		::flixel::FlxG_obj::cameras->cameraResized->dispatch(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setScale,(void))

void FlxCamera_obj::onResize(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1866_onResize)
HXLINE(1867)		this->updateFlashOffset();
HXLINE(1868)		this->setScale(this->scaleX,this->scaleY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,onResize,(void))

 ::flixel::math::FlxRect FlxCamera_obj::getViewMarginRect( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1877_getViewMarginRect)
HXLINE(1878)		if (::hx::IsNull( rect )) {
HXLINE(1879)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1879)			_this->x = ( (Float)(0) );
HXDLIN(1879)			_this->y = ( (Float)(0) );
HXDLIN(1879)			_this->width = ( (Float)(0) );
HXDLIN(1879)			_this->height = ( (Float)(0) );
HXDLIN(1879)			 ::flixel::math::FlxRect rect1 = _this;
HXDLIN(1879)			rect1->_inPool = false;
HXDLIN(1879)			rect = rect1;
            		}
HXLINE(1881)		rect->x = this->viewMarginX;
HXDLIN(1881)		rect->y = this->viewMarginY;
HXDLIN(1881)		rect->width = (( (Float)(this->width) ) - (this->viewMarginX * ( (Float)(2) )));
HXDLIN(1881)		rect->height = (( (Float)(this->height) ) - (this->viewMarginY * ( (Float)(2) )));
HXDLIN(1881)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,getViewMarginRect,return )

bool FlxCamera_obj::containsPoint( ::flixel::math::FlxBasePoint point,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height){
            		Float width = __o_width.Default(0);
            		Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1890_containsPoint)
HXLINE(1891)		bool contained;
HXDLIN(1891)		bool contained1;
HXDLIN(1891)		bool contained2;
HXDLIN(1891)		if (((point->x + width) > this->viewMarginX)) {
HXLINE(1891)			contained2 = (point->x < (( (Float)(this->width) ) - this->viewMarginX));
            		}
            		else {
HXLINE(1891)			contained2 = false;
            		}
HXDLIN(1891)		if (contained2) {
HXLINE(1891)			contained1 = ((point->y + height) > this->viewMarginY);
            		}
            		else {
HXLINE(1891)			contained1 = false;
            		}
HXDLIN(1891)		if (contained1) {
HXLINE(1891)			contained = (point->y < (( (Float)(this->height) ) - this->viewMarginY));
            		}
            		else {
HXLINE(1891)			contained = false;
            		}
HXLINE(1893)		{
HXLINE(1893)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN(1893)			if (_this->_weak) {
HXLINE(1893)				_this->put();
            			}
            		}
HXLINE(1894)		return contained;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxCamera_obj,containsPoint,return )

bool FlxCamera_obj::containsRect( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1902_containsRect)
HXLINE(1903)		bool contained;
HXDLIN(1903)		bool contained1;
HXDLIN(1903)		bool contained2;
HXDLIN(1903)		if (((rect->x + rect->width) > this->viewMarginX)) {
HXLINE(1903)			contained2 = (rect->x < (( (Float)(this->width) ) - this->viewMarginX));
            		}
            		else {
HXLINE(1903)			contained2 = false;
            		}
HXDLIN(1903)		if (contained2) {
HXLINE(1903)			contained1 = ((rect->y + rect->height) > this->viewMarginY);
            		}
            		else {
HXLINE(1903)			contained1 = false;
            		}
HXDLIN(1903)		if (contained1) {
HXLINE(1903)			contained = (rect->y < (( (Float)(this->height) ) - this->viewMarginY));
            		}
            		else {
HXLINE(1903)			contained = false;
            		}
HXLINE(1905)		if (rect->_weak) {
HXLINE(1905)			if (!(rect->_inPool)) {
HXLINE(1905)				rect->_inPool = true;
HXDLIN(1905)				rect->_weak = false;
HXDLIN(1905)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect);
            			}
            		}
HXLINE(1906)		return contained;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,containsRect,return )

int FlxCamera_obj::set_width(int Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1910_set_width)
HXLINE(1911)		bool _hx_tmp;
HXDLIN(1911)		if ((this->width != Value)) {
HXLINE(1911)			_hx_tmp = (Value > 0);
            		}
            		else {
HXLINE(1911)			_hx_tmp = false;
            		}
HXDLIN(1911)		if (_hx_tmp) {
HXLINE(1913)			this->width = Value;
HXLINE(1914)			this->viewMarginX = (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) / this->scaleX);
HXLINE(1915)			this->updateFlashOffset();
HXLINE(1916)			this->updateScrollRect();
HXLINE(1917)			this->updateInternalSpritePositions();
HXLINE(1919)			::flixel::FlxG_obj::cameras->cameraResized->dispatch(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1921)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_width,return )

int FlxCamera_obj::set_height(int Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1925_set_height)
HXLINE(1926)		bool _hx_tmp;
HXDLIN(1926)		if ((this->height != Value)) {
HXLINE(1926)			_hx_tmp = (Value > 0);
            		}
            		else {
HXLINE(1926)			_hx_tmp = false;
            		}
HXDLIN(1926)		if (_hx_tmp) {
HXLINE(1928)			this->height = Value;
HXLINE(1929)			this->viewMarginY = (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) / this->scaleY);
HXLINE(1930)			this->updateFlashOffset();
HXLINE(1931)			this->updateScrollRect();
HXLINE(1932)			this->updateInternalSpritePositions();
HXLINE(1934)			::flixel::FlxG_obj::cameras->cameraResized->dispatch(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1936)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_height,return )

Float FlxCamera_obj::set_zoom(Float Zoom){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1940_set_zoom)
HXLINE(1941)		Float _hx_tmp;
HXDLIN(1941)		if ((Zoom == 0)) {
HXLINE(1941)			_hx_tmp = ::flixel::FlxCamera_obj::defaultZoom;
            		}
            		else {
HXLINE(1941)			_hx_tmp = Zoom;
            		}
HXDLIN(1941)		this->zoom = _hx_tmp;
HXLINE(1942)		this->setScale(this->zoom,this->zoom);
HXLINE(1943)		return this->zoom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_zoom,return )

Float FlxCamera_obj::set_alpha(Float Alpha){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1947_set_alpha)
HXLINE(1948)		Float lowerBound;
HXDLIN(1948)		if ((Alpha < 0)) {
HXLINE(1948)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(1948)			lowerBound = Alpha;
            		}
HXDLIN(1948)		Float _hx_tmp;
HXDLIN(1948)		if ((lowerBound > 1)) {
HXLINE(1948)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE(1948)			_hx_tmp = lowerBound;
            		}
HXDLIN(1948)		this->alpha = _hx_tmp;
HXLINE(1949)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1951)			this->_flashBitmap->set_alpha(Alpha);
            		}
            		else {
HXLINE(1955)			this->canvas->set_alpha(Alpha);
            		}
HXLINE(1957)		return Alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_alpha,return )

Float FlxCamera_obj::set_angle(Float Angle){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1961_set_angle)
HXLINE(1962)		this->angle = Angle;
HXLINE(1963)		this->flashSprite->set_rotation(Angle);
HXLINE(1964)		return Angle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_angle,return )

int FlxCamera_obj::set_color(int Color){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1968_set_color)
HXLINE(1969)		this->color = Color;
HXLINE(1970)		 ::openfl::geom::ColorTransform colorTransform;
HXLINE(1972)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1974)			if (::hx::IsNull( this->_flashBitmap )) {
HXLINE(1976)				return Color;
            			}
HXLINE(1978)			colorTransform = this->_flashBitmap->get_transform()->get_colorTransform();
            		}
            		else {
HXLINE(1982)			colorTransform = this->canvas->get_transform()->get_colorTransform();
            		}
HXLINE(1985)		colorTransform->redMultiplier = (( (Float)(((this->color >> 16) & 255)) ) / ( (Float)(255) ));
HXLINE(1986)		colorTransform->greenMultiplier = (( (Float)(((this->color >> 8) & 255)) ) / ( (Float)(255) ));
HXLINE(1987)		colorTransform->blueMultiplier = (( (Float)((this->color & 255)) ) / ( (Float)(255) ));
HXLINE(1989)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1991)			this->_flashBitmap->get_transform()->set_colorTransform(colorTransform);
            		}
            		else {
HXLINE(1995)			this->canvas->get_transform()->set_colorTransform(colorTransform);
            		}
HXLINE(1998)		return Color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_color,return )

bool FlxCamera_obj::set_antialiasing(bool Antialiasing){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2002_set_antialiasing)
HXLINE(2003)		this->antialiasing = Antialiasing;
HXLINE(2004)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(2006)			this->_flashBitmap->smoothing = Antialiasing;
            		}
HXLINE(2008)		return Antialiasing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_antialiasing,return )

Float FlxCamera_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2012_set_x)
HXLINE(2013)		this->x = x;
HXLINE(2014)		this->updateFlashSpritePosition();
HXLINE(2015)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_x,return )

Float FlxCamera_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2019_set_y)
HXLINE(2020)		this->y = y;
HXLINE(2021)		this->updateFlashSpritePosition();
HXLINE(2022)		return y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_y,return )

bool FlxCamera_obj::set_visible(bool visible){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2026_set_visible)
HXLINE(2027)		if (::hx::IsNotNull( this->flashSprite )) {
HXLINE(2029)			this->flashSprite->set_visible(visible);
            		}
HXLINE(2031)		return (this->visible = visible);
            	}


void FlxCamera_obj::calcMarginX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2036_calcMarginX)
HXDLIN(2036)		this->viewMarginX = (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) / this->scaleX);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,calcMarginX,(void))

void FlxCamera_obj::calcMarginY(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2041_calcMarginY)
HXDLIN(2041)		this->viewMarginY = (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) / this->scaleY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,calcMarginY,(void))

Float FlxCamera_obj::get_viewMarginLeft(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2056_get_viewMarginLeft)
HXDLIN(2056)		return this->viewMarginX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewMarginLeft,return )

Float FlxCamera_obj::get_viewMarginTop(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2061_get_viewMarginTop)
HXDLIN(2061)		return this->viewMarginY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewMarginTop,return )

Float FlxCamera_obj::get_viewMarginRight(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2066_get_viewMarginRight)
HXDLIN(2066)		return (( (Float)(this->width) ) - this->viewMarginX);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewMarginRight,return )

Float FlxCamera_obj::get_viewMarginBottom(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2071_get_viewMarginBottom)
HXDLIN(2071)		return (( (Float)(this->height) ) - this->viewMarginY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewMarginBottom,return )

Float FlxCamera_obj::get_viewWidth(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2076_get_viewWidth)
HXDLIN(2076)		return (( (Float)(this->width) ) - (this->viewMarginX * ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewWidth,return )

Float FlxCamera_obj::get_viewHeight(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2081_get_viewHeight)
HXDLIN(2081)		return (( (Float)(this->height) ) - (this->viewMarginY * ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewHeight,return )

Float FlxCamera_obj::get_viewX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2086_get_viewX)
HXDLIN(2086)		return (this->scroll->x + this->viewMarginX);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewX,return )

Float FlxCamera_obj::get_viewY(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2091_get_viewY)
HXDLIN(2091)		return (this->scroll->y + this->viewMarginY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewY,return )

Float FlxCamera_obj::get_viewLeft(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2096_get_viewLeft)
HXDLIN(2096)		return (this->scroll->x + this->viewMarginX);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewLeft,return )

Float FlxCamera_obj::get_viewTop(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2101_get_viewTop)
HXDLIN(2101)		return (this->scroll->y + this->viewMarginY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewTop,return )

Float FlxCamera_obj::get_viewRight(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2106_get_viewRight)
HXDLIN(2106)		return (this->scroll->x + (( (Float)(this->width) ) - this->viewMarginX));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewRight,return )

Float FlxCamera_obj::get_viewBottom(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2111_get_viewBottom)
HXDLIN(2111)		return (this->scroll->y + (( (Float)(this->height) ) - this->viewMarginY));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_viewBottom,return )

 ::flixel::FlxCamera FlxCamera_obj::get_camera(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2120_get_camera)
HXDLIN(2120)		HX_STACK_DO_THROW(HX_("don't reference camera.camera",c9,e5,ca,73));
HXDLIN(2120)		return null();
            	}


 ::flixel::FlxCamera FlxCamera_obj::set_camera( ::flixel::FlxCamera value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2124_set_camera)
HXDLIN(2124)		HX_STACK_DO_THROW(HX_("don't reference camera.camera",c9,e5,ca,73));
HXDLIN(2124)		return null();
            	}


::Array< ::Dynamic> FlxCamera_obj::get_cameras(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2128_get_cameras)
HXDLIN(2128)		HX_STACK_DO_THROW(HX_("don't reference camera.cameras",8a,2a,be,dd));
HXDLIN(2128)		return null();
            	}


::Array< ::Dynamic> FlxCamera_obj::set_cameras(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2132_set_cameras)
HXDLIN(2132)		HX_STACK_DO_THROW(HX_("don't reference camera.cameras",8a,2a,be,dd));
HXDLIN(2132)		return null();
            	}


Float FlxCamera_obj::defaultZoom;

::Array< ::Dynamic> FlxCamera_obj::_defaultCameras;

 ::flixel::graphics::tile::FlxDrawQuadsItem FlxCamera_obj::_storageTilesHead;

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::_storageTrianglesHead;

 ::openfl::_Vector::FloatVector FlxCamera_obj::drawVertices;

 ::openfl::display::Sprite FlxCamera_obj::trianglesSprite;

 ::flixel::math::FlxBasePoint FlxCamera_obj::renderPoint;

 ::flixel::math::FlxRect FlxCamera_obj::renderRect;

::Array< ::Dynamic> FlxCamera_obj::get_defaultCameras(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2046_get_defaultCameras)
HXDLIN(2046)		return ::flixel::FlxCamera_obj::_defaultCameras;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,get_defaultCameras,return )

::Array< ::Dynamic> FlxCamera_obj::set_defaultCameras(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_2051_set_defaultCameras)
HXDLIN(2051)		return (::flixel::FlxCamera_obj::_defaultCameras = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_defaultCameras,return )


::hx::ObjectPtr< FlxCamera_obj > FlxCamera_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_width,::hx::Null< int >  __o_height,::hx::Null< Float >  __o_zoom) {
	::hx::ObjectPtr< FlxCamera_obj > __this = new FlxCamera_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height,__o_zoom);
	return __this;
}

::hx::ObjectPtr< FlxCamera_obj > FlxCamera_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_width,::hx::Null< int >  __o_height,::hx::Null< Float >  __o_zoom) {
	FlxCamera_obj *__this = (FlxCamera_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxCamera_obj), true, "flixel.FlxCamera"));
	*(void **)__this = FlxCamera_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height,__o_zoom);
	return __this;
}

FlxCamera_obj::FlxCamera_obj()
{
}

void FlxCamera_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxCamera);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(scaleX,"scaleX");
	HX_MARK_MEMBER_NAME(scaleY,"scaleY");
	HX_MARK_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_MARK_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(targetOffset,"targetOffset");
	HX_MARK_MEMBER_NAME(followLerp,"followLerp");
	HX_MARK_MEMBER_NAME(deadzone,"deadzone");
	HX_MARK_MEMBER_NAME(minScrollX,"minScrollX");
	HX_MARK_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_MARK_MEMBER_NAME(minScrollY,"minScrollY");
	HX_MARK_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_MARK_MEMBER_NAME(scroll,"scroll");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(bgColor,"bgColor");
	HX_MARK_MEMBER_NAME(screen,"screen");
	HX_MARK_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_MARK_MEMBER_NAME(flashSprite,"flashSprite");
	HX_MARK_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_MARK_MEMBER_NAME(pixelPerfectShake,"pixelPerfectShake");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(viewMarginX,"viewMarginX");
	HX_MARK_MEMBER_NAME(viewMarginY,"viewMarginY");
	HX_MARK_MEMBER_NAME(_blitMatrix,"_blitMatrix");
	HX_MARK_MEMBER_NAME(_useBlitMatrix,"_useBlitMatrix");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(followLead,"followLead");
	HX_MARK_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_MARK_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_MARK_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_MARK_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_MARK_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_MARK_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_MARK_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_MARK_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_MARK_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_MARK_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_MARK_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_MARK_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_MARK_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_MARK_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_MARK_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_MARK_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(filters,"filters");
	HX_MARK_MEMBER_NAME(initialZoom,"initialZoom");
	HX_MARK_MEMBER_NAME(_fill,"_fill");
	HX_MARK_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_MARK_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_MARK_MEMBER_NAME(_bounds,"_bounds");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_MARK_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_MARK_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_MARK_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_MARK_MEMBER_NAME(_headTiles,"_headTiles");
	HX_MARK_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxCamera_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(scaleX,"scaleX");
	HX_VISIT_MEMBER_NAME(scaleY,"scaleY");
	HX_VISIT_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_VISIT_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(targetOffset,"targetOffset");
	HX_VISIT_MEMBER_NAME(followLerp,"followLerp");
	HX_VISIT_MEMBER_NAME(deadzone,"deadzone");
	HX_VISIT_MEMBER_NAME(minScrollX,"minScrollX");
	HX_VISIT_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_VISIT_MEMBER_NAME(minScrollY,"minScrollY");
	HX_VISIT_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_VISIT_MEMBER_NAME(scroll,"scroll");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(bgColor,"bgColor");
	HX_VISIT_MEMBER_NAME(screen,"screen");
	HX_VISIT_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_VISIT_MEMBER_NAME(flashSprite,"flashSprite");
	HX_VISIT_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_VISIT_MEMBER_NAME(pixelPerfectShake,"pixelPerfectShake");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(viewMarginX,"viewMarginX");
	HX_VISIT_MEMBER_NAME(viewMarginY,"viewMarginY");
	HX_VISIT_MEMBER_NAME(_blitMatrix,"_blitMatrix");
	HX_VISIT_MEMBER_NAME(_useBlitMatrix,"_useBlitMatrix");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(followLead,"followLead");
	HX_VISIT_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_VISIT_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_VISIT_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_VISIT_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_VISIT_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_VISIT_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_VISIT_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_VISIT_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_VISIT_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_VISIT_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_VISIT_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_VISIT_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_VISIT_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_VISIT_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_VISIT_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_VISIT_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(filters,"filters");
	HX_VISIT_MEMBER_NAME(initialZoom,"initialZoom");
	HX_VISIT_MEMBER_NAME(_fill,"_fill");
	HX_VISIT_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_VISIT_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_VISIT_MEMBER_NAME(_bounds,"_bounds");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_VISIT_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_VISIT_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_VISIT_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_VISIT_MEMBER_NAME(_headTiles,"_headTiles");
	HX_VISIT_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxCamera_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return ::hx::Val( zoom ); }
		if (HX_FIELD_EQ(inName,"fade") ) { return ::hx::Val( fade_dyn() ); }
		if (HX_FIELD_EQ(inName,"fill") ) { return ::hx::Val( fill_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return ::hx::Val( style ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"viewX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewX() ); }
		if (HX_FIELD_EQ(inName,"viewY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewY() ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"angle") ) { return ::hx::Val( angle ); }
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"_fill") ) { return ::hx::Val( _fill ); }
		if (HX_FIELD_EQ(inName,"flash") ) { return ::hx::Val( flash_dyn() ); }
		if (HX_FIELD_EQ(inName,"shake") ) { return ::hx::Val( shake_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { return ::hx::Val( scaleX ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { return ::hx::Val( scaleY ); }
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return ::hx::Val( scroll ); }
		if (HX_FIELD_EQ(inName,"buffer") ) { return ::hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"screen") ) { return ::hx::Val( screen ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"_point") ) { return ::hx::Val( _point ); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return ::hx::Val( canvas ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"follow") ) { return ::hx::Val( follow_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopFX") ) { return ::hx::Val( stopFX_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawFX") ) { return ::hx::Val( drawFX_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { return ::hx::Val( bgColor ); }
		if (HX_FIELD_EQ(inName,"viewTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewTop() ); }
		if (HX_FIELD_EQ(inName,"filters") ) { return ::hx::Val( filters ); }
		if (HX_FIELD_EQ(inName,"_bounds") ) { return ::hx::Val( _bounds ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"focusOn") ) { return ::hx::Val( focusOn_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return ::hx::Val( setSize_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { return ::hx::Val( deadzone ); }
		if (HX_FIELD_EQ(inName,"viewLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewLeft() ); }
		if (HX_FIELD_EQ(inName,"stopFade") ) { return ::hx::Val( stopFade_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScale") ) { return ::hx::Val( setScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return ::hx::Val( set_zoom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viewWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewWidth() ); }
		if (HX_FIELD_EQ(inName,"viewRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewRight() ); }
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { return ::hx::Val( _fxFadeIn ); }
		if (HX_FIELD_EQ(inName,"stopFlash") ) { return ::hx::Val( stopFlash_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopShake") ) { return ::hx::Val( stopShake_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return ::hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return ::hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewX") ) { return ::hx::Val( get_viewX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewY") ) { return ::hx::Val( get_viewY_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { return ::hx::Val( followLerp ); }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { return ::hx::Val( minScrollX ); }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { return ::hx::Val( maxScrollX ); }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { return ::hx::Val( minScrollY ); }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { return ::hx::Val( maxScrollY ); }
		if (HX_FIELD_EQ(inName,"viewHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewHeight() ); }
		if (HX_FIELD_EQ(inName,"viewBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewBottom() ); }
		if (HX_FIELD_EQ(inName,"followLead") ) { return ::hx::Val( followLead ); }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return ::hx::Val( _flashRect ); }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { return ::hx::Val( _headTiles ); }
		if (HX_FIELD_EQ(inName,"drawPixels") ) { return ::hx::Val( drawPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return ::hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateLerp") ) { return ::hx::Val( updateLerp_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFade") ) { return ::hx::Val( updateFade_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_camera") ) { return ::hx::Val( get_camera_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_camera") ) { return ::hx::Val( set_camera_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { return ::hx::Val( totalScaleX ); }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { return ::hx::Val( totalScaleY ); }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { return ::hx::Val( flashSprite ); }
		if (HX_FIELD_EQ(inName,"viewMarginX") ) { return ::hx::Val( viewMarginX ); }
		if (HX_FIELD_EQ(inName,"viewMarginY") ) { return ::hx::Val( viewMarginY ); }
		if (HX_FIELD_EQ(inName,"_blitMatrix") ) { return ::hx::Val( _blitMatrix ); }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return ::hx::Val( _flashPoint ); }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { return ::hx::Val( initialZoom ); }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { return ::hx::Val( _scrollRect ); }
		if (HX_FIELD_EQ(inName,"updateFlash") ) { return ::hx::Val( updateFlash_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateShake") ) { return ::hx::Val( updateShake_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkResize") ) { return ::hx::Val( checkResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return ::hx::Val( setPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return ::hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcMarginX") ) { return ::hx::Val( calcMarginX_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcMarginY") ) { return ::hx::Val( calcMarginY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewTop") ) { return ::hx::Val( get_viewTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cameras") ) { return ::hx::Val( get_cameras_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cameras") ) { return ::hx::Val( set_cameras_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { return ::hx::Val( targetOffset ); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return ::hx::Val( antialiasing ); }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { return ::hx::Val( _flashOffset ); }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { return ::hx::Val( _fxFadeColor ); }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { return ::hx::Val( _fxFadeAlpha ); }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { return ::hx::Val( _fxShakeAxes ); }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { return ::hx::Val( _flashBitmap ); }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { return ::hx::Val( _helperPoint ); }
		if (HX_FIELD_EQ(inName,"updateScroll") ) { return ::hx::Val( updateScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFollow") ) { return ::hx::Val( updateFollow_dyn() ); }
		if (HX_FIELD_EQ(inName,"completeFade") ) { return ::hx::Val( completeFade_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapToTarget") ) { return ::hx::Val( snapToTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"containsRect") ) { return ::hx::Val( containsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewLeft") ) { return ::hx::Val( get_viewLeft_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"viewMarginTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewMarginTop() ); }
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { return ::hx::Val( _fxFlashColor ); }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { return ::hx::Val( _fxFlashAlpha ); }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { return ::hx::Val( _scrollTarget ); }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { return ::hx::Val( _helperMatrix ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return ::hx::Val( drawTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformRect") ) { return ::hx::Val( transformRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindScrollPos") ) { return ::hx::Val( bindScrollPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return ::hx::Val( containsPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewWidth") ) { return ::hx::Val( get_viewWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewRight") ) { return ::hx::Val( get_viewRight_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"viewMarginLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewMarginLeft() ); }
		if (HX_FIELD_EQ(inName,"_useBlitMatrix") ) { return ::hx::Val( _useBlitMatrix ); }
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { return ::hx::Val( filtersEnabled ); }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { return ::hx::Val( _headTriangles ); }
		if (HX_FIELD_EQ(inName,"startQuadBatch") ) { return ::hx::Val( startQuadBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearDrawStack") ) { return ::hx::Val( clearDrawStack_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { return ::hx::Val( transformPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewHeight") ) { return ::hx::Val( get_viewHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewBottom") ) { return ::hx::Val( get_viewBottom_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"viewMarginRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewMarginRight() ); }
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { return ::hx::Val( _fxFadeDuration ); }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { return ::hx::Val( _fxFadeComplete ); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return ::hx::Val( transformVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformObject") ) { return ::hx::Val( transformObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollBounds") ) { return ::hx::Val( setScrollBounds_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"viewMarginBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewMarginBottom() ); }
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { return ::hx::Val( _fxFlashDuration ); }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { return ::hx::Val( _fxFlashComplete ); }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { return ::hx::Val( _fxShakeDuration ); }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { return ::hx::Val( _fxShakeComplete ); }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { return ::hx::Val( _currentDrawItem ); }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { return ::hx::Val( _headOfDrawStack ); }
		if (HX_FIELD_EQ(inName,"updateScrollRect") ) { return ::hx::Val( updateScrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBlitMatrix") ) { return ::hx::Val( updateBlitMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return ::hx::Val( set_antialiasing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"pixelPerfectShake") ) { return ::hx::Val( pixelPerfectShake ); }
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { return ::hx::Val( _fxShakeIntensity ); }
		if (HX_FIELD_EQ(inName,"updateFlashOffset") ) { return ::hx::Val( updateFlashOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getViewMarginRect") ) { return ::hx::Val( getViewMarginRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewMarginTop") ) { return ::hx::Val( get_viewMarginTop_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { return ::hx::Val( useBgAlphaBlending ); }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { return ::hx::Val( pixelPerfectRender ); }
		if (HX_FIELD_EQ(inName,"get_viewMarginLeft") ) { return ::hx::Val( get_viewMarginLeft_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { return ::hx::Val( _lastTargetPosition ); }
		if (HX_FIELD_EQ(inName,"startTrianglesBatch") ) { return ::hx::Val( startTrianglesBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollBoundsRect") ) { return ::hx::Val( setScrollBoundsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewMarginRight") ) { return ::hx::Val( get_viewMarginRight_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_viewMarginBottom") ) { return ::hx::Val( get_viewMarginBottom_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getNewDrawTrianglesItem") ) { return ::hx::Val( getNewDrawTrianglesItem_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"updateFlashSpritePosition") ) { return ::hx::Val( updateFlashSpritePosition_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"updateInternalSpritePositions") ) { return ::hx::Val( updateInternalSpritePositions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxCamera_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { outValue = ( renderRect ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { outValue = ( defaultZoom ); return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { outValue = ( renderPoint ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { outValue = ( drawVertices ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_defaultCameras") ) { outValue = ( _defaultCameras ); return true; }
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { outValue = ( trianglesSprite ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { outValue = ( _storageTilesHead ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_defaultCameras") ) { outValue = get_defaultCameras_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_defaultCameras") ) { outValue = set_defaultCameras_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { outValue = ( _storageTrianglesHead ); return true; }
	}
	return false;
}

::hx::Val FlxCamera_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_x(inValue.Cast< Float >()) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_y(inValue.Cast< Float >()) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_zoom(inValue.Cast< Float >()) );zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast<  ::flixel::FlxCameraFollowStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_width(inValue.Cast< int >()) );width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_alpha(inValue.Cast< Float >()) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_angle(inValue.Cast< Float >()) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_color(inValue.Cast< int >()) );color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fill") ) { _fill=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleY") ) { scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scroll") ) { scroll=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screen") ) { screen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_height(inValue.Cast< int >()) );height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { bgColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filters") ) { filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bounds") ) { _bounds=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { deadzone=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { _fxFadeIn=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { followLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { minScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { maxScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { minScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { maxScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"followLead") ) { followLead=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { _headTiles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawQuadsItem >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { totalScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { totalScaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { flashSprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewMarginX") ) { viewMarginX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewMarginY") ) { viewMarginY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_blitMatrix") ) { _blitMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { initialZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { _scrollRect=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { targetOffset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_antialiasing(inValue.Cast< bool >()) );antialiasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { _flashOffset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { _fxFadeColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { _fxFadeAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { _fxShakeAxes=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { _flashBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { _helperPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { _fxFlashColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { _fxFlashAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { _scrollTarget=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { _helperMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_useBlitMatrix") ) { _useBlitMatrix=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { filtersEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { _headTriangles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { _fxFadeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { _fxFadeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { _fxFlashDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { _fxFlashComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { _fxShakeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { _fxShakeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { _currentDrawItem=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { _headOfDrawStack=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"pixelPerfectShake") ) { pixelPerfectShake=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { _fxShakeIntensity=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { useBgAlphaBlending=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { pixelPerfectRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { _lastTargetPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxCamera_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { renderRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { defaultZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { renderPoint=ioValue.Cast<  ::flixel::math::FlxBasePoint >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { drawVertices=ioValue.Cast<  ::openfl::_Vector::FloatVector >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_defaultCameras") ) { _defaultCameras=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { trianglesSprite=ioValue.Cast<  ::openfl::display::Sprite >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { _storageTilesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawQuadsItem >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { _storageTrianglesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return true; }
	}
	return false;
}

void FlxCamera_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("scaleX",8e,ea,25,3c));
	outFields->push(HX_("scaleY",8f,ea,25,3c));
	outFields->push(HX_("totalScaleX",72,dd,5b,02));
	outFields->push(HX_("totalScaleY",73,dd,5b,02));
	outFields->push(HX_("style",31,a5,1d,84));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("targetOffset",c4,d1,c3,1c));
	outFields->push(HX_("followLerp",88,dc,83,d9));
	outFields->push(HX_("deadzone",d0,12,55,6d));
	outFields->push(HX_("minScrollX",39,80,8f,f6));
	outFields->push(HX_("maxScrollX",67,ad,fc,9a));
	outFields->push(HX_("minScrollY",3a,80,8f,f6));
	outFields->push(HX_("maxScrollY",68,ad,fc,9a));
	outFields->push(HX_("scroll",0d,d8,64,47));
	outFields->push(HX_("buffer",00,bd,94,d0));
	outFields->push(HX_("bgColor",5e,81,83,f7));
	outFields->push(HX_("screen",6c,3b,5d,47));
	outFields->push(HX_("useBgAlphaBlending",23,25,12,b2));
	outFields->push(HX_("flashSprite",d5,e9,0d,f4));
	outFields->push(HX_("pixelPerfectRender",dd,59,4f,2f));
	outFields->push(HX_("pixelPerfectShake",1f,5e,46,36));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("viewMarginX",85,f4,67,47));
	outFields->push(HX_("viewMarginY",86,f4,67,47));
	outFields->push(HX_("viewMarginLeft",1a,5a,50,ab));
	outFields->push(HX_("viewMarginTop",e2,37,af,e8));
	outFields->push(HX_("viewMarginRight",69,8a,0b,b2));
	outFields->push(HX_("viewMarginBottom",be,23,60,2f));
	outFields->push(HX_("viewWidth",61,25,f7,0a));
	outFields->push(HX_("viewHeight",2c,08,99,43));
	outFields->push(HX_("viewX",53,e6,fc,36));
	outFields->push(HX_("viewY",54,e6,fc,36));
	outFields->push(HX_("viewLeft",0c,fd,d1,84));
	outFields->push(HX_("viewTop",30,b9,be,9c));
	outFields->push(HX_("viewRight",37,7b,f8,29));
	outFields->push(HX_("viewBottom",30,e7,c5,a6));
	outFields->push(HX_("_blitMatrix",75,45,ab,aa));
	outFields->push(HX_("_useBlitMatrix",be,57,dc,4e));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("angle",d3,43,e2,22));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("antialiasing",f4,16,b3,48));
	outFields->push(HX_("followLead",ad,cd,83,d9));
	outFields->push(HX_("filtersEnabled",06,08,9b,18));
	outFields->push(HX_("_flashRect",b5,c2,f3,5d));
	outFields->push(HX_("_flashPoint",9f,1d,2a,b7));
	outFields->push(HX_("_flashOffset",64,53,c1,f6));
	outFields->push(HX_("_fxFlashColor",64,98,14,dc));
	outFields->push(HX_("_fxFlashDuration",f3,7e,d1,2d));
	outFields->push(HX_("_fxFlashAlpha",5f,ce,4e,b3));
	outFields->push(HX_("_fxFadeColor",96,44,a8,b9));
	outFields->push(HX_("_lastTargetPosition",2f,d6,08,c4));
	outFields->push(HX_("_scrollTarget",1d,da,1d,c1));
	outFields->push(HX_("_fxFadeDuration",01,fe,dd,9f));
	outFields->push(HX_("_fxFadeIn",d2,da,fe,a8));
	outFields->push(HX_("_fxFadeAlpha",91,7a,e2,90));
	outFields->push(HX_("_fxShakeIntensity",5e,86,94,7a));
	outFields->push(HX_("_fxShakeDuration",09,2e,72,36));
	outFields->push(HX_("_fxShakeAxes",5a,79,f0,5e));
	outFields->push(HX_("_point",91,fb,76,c2));
	outFields->push(HX_("filters",bb,a1,46,09));
	outFields->push(HX_("initialZoom",b7,71,1d,2d));
	outFields->push(HX_("_fill",62,ea,cc,f6));
	outFields->push(HX_("_flashBitmap",c0,cb,8d,87));
	outFields->push(HX_("_scrollRect",f0,a8,f0,db));
	outFields->push(HX_("_bounds",14,98,94,d4));
	outFields->push(HX_("canvas",d8,54,42,b8));
	outFields->push(HX_("_helperMatrix",2e,81,ce,de));
	outFields->push(HX_("_helperPoint",03,e6,14,f8));
	outFields->push(HX_("_currentDrawItem",11,6b,5a,19));
	outFields->push(HX_("_headOfDrawStack",ce,c5,68,ac));
	outFields->push(HX_("_headTiles",06,ac,50,ff));
	outFields->push(HX_("_headTriangles",ac,b3,7c,97));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxCamera_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleX),HX_("scaleX",8e,ea,25,3c)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleY),HX_("scaleY",8f,ea,25,3c)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleX),HX_("totalScaleX",72,dd,5b,02)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleY),HX_("totalScaleY",73,dd,5b,02)},
	{::hx::fsObject /*  ::flixel::FlxCameraFollowStyle */ ,(int)offsetof(FlxCamera_obj,style),HX_("style",31,a5,1d,84)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(FlxCamera_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxCamera_obj,targetOffset),HX_("targetOffset",c4,d1,c3,1c)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,followLerp),HX_("followLerp",88,dc,83,d9)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxCamera_obj,deadzone),HX_("deadzone",d0,12,55,6d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,minScrollX),HX_("minScrollX",39,80,8f,f6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,maxScrollX),HX_("maxScrollX",67,ad,fc,9a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,minScrollY),HX_("minScrollY",3a,80,8f,f6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,maxScrollY),HX_("maxScrollY",68,ad,fc,9a)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxCamera_obj,scroll),HX_("scroll",0d,d8,64,47)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxCamera_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,bgColor),HX_("bgColor",5e,81,83,f7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxCamera_obj,screen),HX_("screen",6c,3b,5d,47)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,useBgAlphaBlending),HX_("useBgAlphaBlending",23,25,12,b2)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxCamera_obj,flashSprite),HX_("flashSprite",d5,e9,0d,f4)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,pixelPerfectRender),HX_("pixelPerfectRender",dd,59,4f,2f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,pixelPerfectShake),HX_("pixelPerfectShake",1f,5e,46,36)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewMarginX),HX_("viewMarginX",85,f4,67,47)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewMarginY),HX_("viewMarginY",86,f4,67,47)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxCamera_obj,_blitMatrix),HX_("_blitMatrix",75,45,ab,aa)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,_useBlitMatrix),HX_("_useBlitMatrix",be,57,dc,4e)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,angle),HX_("angle",d3,43,e2,22)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,antialiasing),HX_("antialiasing",f4,16,b3,48)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxCamera_obj,followLead),HX_("followLead",ad,cd,83,d9)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,filtersEnabled),HX_("filtersEnabled",06,08,9b,18)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(FlxCamera_obj,_flashRect),HX_("_flashRect",b5,c2,f3,5d)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxCamera_obj,_flashPoint),HX_("_flashPoint",9f,1d,2a,b7)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxCamera_obj,_flashOffset),HX_("_flashOffset",64,53,c1,f6)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFlashColor),HX_("_fxFlashColor",64,98,14,dc)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashDuration),HX_("_fxFlashDuration",f3,7e,d1,2d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,_fxFlashComplete),HX_("_fxFlashComplete",58,70,0b,99)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashAlpha),HX_("_fxFlashAlpha",5f,ce,4e,b3)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFadeColor),HX_("_fxFadeColor",96,44,a8,b9)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxCamera_obj,_lastTargetPosition),HX_("_lastTargetPosition",2f,d6,08,c4)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxCamera_obj,_scrollTarget),HX_("_scrollTarget",1d,da,1d,c1)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeDuration),HX_("_fxFadeDuration",01,fe,dd,9f)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,_fxFadeIn),HX_("_fxFadeIn",d2,da,fe,a8)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,_fxFadeComplete),HX_("_fxFadeComplete",66,ef,17,0b)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeAlpha),HX_("_fxFadeAlpha",91,7a,e2,90)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeIntensity),HX_("_fxShakeIntensity",5e,86,94,7a)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeDuration),HX_("_fxShakeDuration",09,2e,72,36)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,_fxShakeComplete),HX_("_fxShakeComplete",6e,1f,ac,a1)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,_fxShakeAxes),HX_("_fxShakeAxes",5a,79,f0,5e)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxCamera_obj,_point),HX_("_point",91,fb,76,c2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxCamera_obj,filters),HX_("filters",bb,a1,46,09)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,initialZoom),HX_("initialZoom",b7,71,1d,2d)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxCamera_obj,_fill),HX_("_fill",62,ea,cc,f6)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(FlxCamera_obj,_flashBitmap),HX_("_flashBitmap",c0,cb,8d,87)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxCamera_obj,_scrollRect),HX_("_scrollRect",f0,a8,f0,db)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxCamera_obj,_bounds),HX_("_bounds",14,98,94,d4)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxCamera_obj,canvas),HX_("canvas",d8,54,42,b8)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxCamera_obj,_helperMatrix),HX_("_helperMatrix",2e,81,ce,de)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxCamera_obj,_helperPoint),HX_("_helperPoint",03,e6,14,f8)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawBaseItem */ ,(int)offsetof(FlxCamera_obj,_currentDrawItem),HX_("_currentDrawItem",11,6b,5a,19)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawBaseItem */ ,(int)offsetof(FlxCamera_obj,_headOfDrawStack),HX_("_headOfDrawStack",ce,c5,68,ac)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawQuadsItem */ ,(int)offsetof(FlxCamera_obj,_headTiles),HX_("_headTiles",06,ac,50,ff)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawTrianglesItem */ ,(int)offsetof(FlxCamera_obj,_headTriangles),HX_("_headTriangles",ac,b3,7c,97)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxCamera_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &FlxCamera_obj::defaultZoom,HX_("defaultZoom",74,9c,b7,22)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FlxCamera_obj::_defaultCameras,HX_("_defaultCameras",0c,2c,d2,5b)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawQuadsItem */ ,(void *) &FlxCamera_obj::_storageTilesHead,HX_("_storageTilesHead",e9,a8,61,af)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawTrianglesItem */ ,(void *) &FlxCamera_obj::_storageTrianglesHead,HX_("_storageTrianglesHead",0f,09,78,17)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(void *) &FlxCamera_obj::drawVertices,HX_("drawVertices",1d,4c,09,40)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(void *) &FlxCamera_obj::trianglesSprite,HX_("trianglesSprite",10,d3,45,ab)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(void *) &FlxCamera_obj::renderPoint,HX_("renderPoint",1a,e1,40,92)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(void *) &FlxCamera_obj::renderRect,HX_("renderRect",9a,47,b1,e8)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxCamera_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("scaleX",8e,ea,25,3c),
	HX_("scaleY",8f,ea,25,3c),
	HX_("totalScaleX",72,dd,5b,02),
	HX_("totalScaleY",73,dd,5b,02),
	HX_("style",31,a5,1d,84),
	HX_("target",51,f3,ec,86),
	HX_("targetOffset",c4,d1,c3,1c),
	HX_("followLerp",88,dc,83,d9),
	HX_("deadzone",d0,12,55,6d),
	HX_("minScrollX",39,80,8f,f6),
	HX_("maxScrollX",67,ad,fc,9a),
	HX_("minScrollY",3a,80,8f,f6),
	HX_("maxScrollY",68,ad,fc,9a),
	HX_("scroll",0d,d8,64,47),
	HX_("buffer",00,bd,94,d0),
	HX_("bgColor",5e,81,83,f7),
	HX_("screen",6c,3b,5d,47),
	HX_("useBgAlphaBlending",23,25,12,b2),
	HX_("flashSprite",d5,e9,0d,f4),
	HX_("pixelPerfectRender",dd,59,4f,2f),
	HX_("pixelPerfectShake",1f,5e,46,36),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("zoom",13,a3,f8,50),
	HX_("viewMarginX",85,f4,67,47),
	HX_("viewMarginY",86,f4,67,47),
	HX_("_blitMatrix",75,45,ab,aa),
	HX_("_useBlitMatrix",be,57,dc,4e),
	HX_("alpha",5e,a7,96,21),
	HX_("angle",d3,43,e2,22),
	HX_("color",63,71,5c,4a),
	HX_("antialiasing",f4,16,b3,48),
	HX_("followLead",ad,cd,83,d9),
	HX_("filtersEnabled",06,08,9b,18),
	HX_("_flashRect",b5,c2,f3,5d),
	HX_("_flashPoint",9f,1d,2a,b7),
	HX_("_flashOffset",64,53,c1,f6),
	HX_("_fxFlashColor",64,98,14,dc),
	HX_("_fxFlashDuration",f3,7e,d1,2d),
	HX_("_fxFlashComplete",58,70,0b,99),
	HX_("_fxFlashAlpha",5f,ce,4e,b3),
	HX_("_fxFadeColor",96,44,a8,b9),
	HX_("_lastTargetPosition",2f,d6,08,c4),
	HX_("_scrollTarget",1d,da,1d,c1),
	HX_("_fxFadeDuration",01,fe,dd,9f),
	HX_("_fxFadeIn",d2,da,fe,a8),
	HX_("_fxFadeComplete",66,ef,17,0b),
	HX_("_fxFadeAlpha",91,7a,e2,90),
	HX_("_fxShakeIntensity",5e,86,94,7a),
	HX_("_fxShakeDuration",09,2e,72,36),
	HX_("_fxShakeComplete",6e,1f,ac,a1),
	HX_("_fxShakeAxes",5a,79,f0,5e),
	HX_("_point",91,fb,76,c2),
	HX_("filters",bb,a1,46,09),
	HX_("initialZoom",b7,71,1d,2d),
	HX_("_fill",62,ea,cc,f6),
	HX_("_flashBitmap",c0,cb,8d,87),
	HX_("_scrollRect",f0,a8,f0,db),
	HX_("_bounds",14,98,94,d4),
	HX_("canvas",d8,54,42,b8),
	HX_("_helperMatrix",2e,81,ce,de),
	HX_("_helperPoint",03,e6,14,f8),
	HX_("_currentDrawItem",11,6b,5a,19),
	HX_("_headOfDrawStack",ce,c5,68,ac),
	HX_("_headTiles",06,ac,50,ff),
	HX_("_headTriangles",ac,b3,7c,97),
	HX_("startQuadBatch",b1,bc,12,5e),
	HX_("startTrianglesBatch",11,0b,b7,6e),
	HX_("getNewDrawTrianglesItem",f0,c3,0a,12),
	HX_("clearDrawStack",57,f1,1b,0a),
	HX_("render",56,6b,29,05),
	HX_("drawPixels",51,6a,6d,ce),
	HX_("copyPixels",c2,54,6e,42),
	HX_("drawTriangles",07,44,68,de),
	HX_("transformRect",b0,cc,f4,78),
	HX_("transformPoint",44,cf,11,3d),
	HX_("transformVector",4f,2b,b3,d2),
	HX_("transformObject",4b,f9,94,50),
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("updateScroll",f6,7e,28,47),
	HX_("bindScrollPos",0a,ce,b6,07),
	HX_("updateFollow",5a,38,5a,f9),
	HX_("updateLerp",20,fd,64,00),
	HX_("updateFlash",e7,9e,24,e8),
	HX_("updateFade",25,a0,6a,fc),
	HX_("completeFade",d5,32,78,b7),
	HX_("updateShake",fd,47,b5,61),
	HX_("updateFlashSpritePosition",15,1f,55,df),
	HX_("updateFlashOffset",da,51,21,f5),
	HX_("updateScrollRect",3a,ab,52,53),
	HX_("updateInternalSpritePositions",1f,1f,f9,76),
	HX_("follow",71,91,96,f9),
	HX_("snapToTarget",96,07,43,96),
	HX_("focusOn",17,4b,83,41),
	HX_("flash",b0,35,8c,02),
	HX_("fade",7c,b5,b5,43),
	HX_("shake",c6,de,1c,7c),
	HX_("stopFade",9e,fa,6f,96),
	HX_("stopFlash",4e,6e,ce,12),
	HX_("stopShake",64,17,5f,8c),
	HX_("stopFX",d4,b1,39,0f),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("fill",83,ce,bb,43),
	HX_("drawFX",56,72,d6,df),
	HX_("checkResize",dc,2c,8d,ea),
	HX_("updateBlitMatrix",bf,47,0d,22),
	HX_("setSize",83,e1,d7,11),
	HX_("setPosition",6b,6a,5b,fb),
	HX_("setScrollBoundsRect",68,88,5d,8e),
	HX_("setScrollBounds",24,ad,95,dc),
	HX_("setScale",88,37,03,87),
	HX_("onResize",73,50,28,e8),
	HX_("getViewMarginRect",6d,4e,bb,21),
	HX_("containsPoint",b1,b9,eb,92),
	HX_("containsRect",e3,ce,1c,a6),
	HX_("set_width",69,fe,5c,f1),
	HX_("set_height",24,16,51,f6),
	HX_("set_zoom",10,b8,10,7f),
	HX_("set_alpha",c1,ef,90,48),
	HX_("set_angle",36,8c,dc,49),
	HX_("set_color",c6,b9,56,71),
	HX_("set_antialiasing",f1,f0,93,a3),
	HX_("set_x",5b,9b,2f,7a),
	HX_("set_y",5c,9b,2f,7a),
	HX_("set_visible",95,df,8b,33),
	HX_("calcMarginX",55,34,3b,01),
	HX_("calcMarginY",56,34,3b,01),
	HX_("get_viewMarginLeft",e3,3a,ea,46),
	HX_("get_viewMarginTop",39,43,1f,ef),
	HX_("get_viewMarginRight",80,59,16,3d),
	HX_("get_viewMarginBottom",c7,88,ca,4d),
	HX_("get_viewWidth",38,f9,5a,cc),
	HX_("get_viewHeight",75,90,8e,b9),
	HX_("get_viewX",aa,42,a6,7a),
	HX_("get_viewY",ab,42,a6,7a),
	HX_("get_viewLeft",15,b1,eb,39),
	HX_("get_viewTop",47,19,b9,22),
	HX_("get_viewRight",0e,4f,5c,eb),
	HX_("get_viewBottom",79,6f,bb,1c),
	HX_("get_camera",6e,b6,13,a8),
	HX_("set_camera",e2,54,91,ab),
	HX_("get_cameras",45,ea,2b,69),
	HX_("set_cameras",51,f1,98,73),
	::String(null()) };

static void FlxCamera_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_defaultCameras,"_defaultCameras");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxCamera_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_defaultCameras,"_defaultCameras");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#endif

::hx::Class FlxCamera_obj::__mClass;

static ::String FlxCamera_obj_sStaticFields[] = {
	HX_("defaultZoom",74,9c,b7,22),
	HX_("_defaultCameras",0c,2c,d2,5b),
	HX_("_storageTilesHead",e9,a8,61,af),
	HX_("_storageTrianglesHead",0f,09,78,17),
	HX_("drawVertices",1d,4c,09,40),
	HX_("trianglesSprite",10,d3,45,ab),
	HX_("renderPoint",1a,e1,40,92),
	HX_("renderRect",9a,47,b1,e8),
	HX_("get_defaultCameras",36,c4,0b,ae),
	HX_("set_defaultCameras",aa,f6,ba,8a),
	::String(null())
};

void FlxCamera_obj::__register()
{
	FlxCamera_obj _hx_dummy;
	FlxCamera_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.FlxCamera",05,18,e2,d7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxCamera_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxCamera_obj::__SetStatic;
	__mClass->mMarkFunc = FlxCamera_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxCamera_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxCamera_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxCamera_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxCamera_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxCamera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxCamera_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxCamera_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_50_boot)
HXDLIN(  50)		defaultZoom = ((Float)1.0);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::_Vector::FloatVector _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_560_boot)
HXDLIN( 560)			int length = null();
HXDLIN( 560)			bool fixed = null();
HXDLIN( 560)			::Array< Float > array = null();
HXDLIN( 560)			return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_560_boot)
HXDLIN( 560)		drawVertices = ( ( ::openfl::_Vector::FloatVector)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_565_boot)
HXDLIN( 565)		trianglesSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxBasePoint _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d1aae230bd422321_571_boot)
HXDLIN( 571)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 571)			point->_inPool = false;
HXDLIN( 571)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_571_boot)
HXDLIN( 571)		renderPoint = ( ( ::flixel::math::FlxBasePoint)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxRect _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d1aae230bd422321_573_boot)
HXDLIN( 573)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 573)			_this->x = ( (Float)(0) );
HXDLIN( 573)			_this->y = ( (Float)(0) );
HXDLIN( 573)			_this->width = ( (Float)(0) );
HXDLIN( 573)			_this->height = ( (Float)(0) );
HXDLIN( 573)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 573)			rect->_inPool = false;
HXDLIN( 573)			return rect;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_573_boot)
HXDLIN( 573)		renderRect = ( ( ::flixel::math::FlxRect)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace flixel

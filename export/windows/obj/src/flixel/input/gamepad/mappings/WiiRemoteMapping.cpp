// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadMappedInput
#include <flixel/input/gamepad/FlxGamepadMappedInput.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxTypedGamepadAnalogStick
#include <flixel/input/gamepad/FlxTypedGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_id__WiiRemoteID_WiiRemoteID_Impl_
#include <flixel/input/gamepad/id/_WiiRemoteID/WiiRemoteID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxTypedGamepadMapping
#include <flixel/input/gamepad/mappings/FlxTypedGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_WiiRemoteMapping
#include <flixel/input/gamepad/mappings/WiiRemoteMapping.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bff79226d1e7d85e_8_new,"flixel.input.gamepad.mappings.WiiRemoteMapping","new",0x74d6fe89,"flixel.input.gamepad.mappings.WiiRemoteMapping.new","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",8,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_18_initValues,"flixel.input.gamepad.mappings.WiiRemoteMapping","initValues",0xff6f3809,"flixel.input.gamepad.mappings.WiiRemoteMapping.initValues","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",18,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_26_getID,"flixel.input.gamepad.mappings.WiiRemoteMapping","getID",0x8faa5c5a,"flixel.input.gamepad.mappings.WiiRemoteMapping.getID","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",26,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_36_getIDClassicController,"flixel.input.gamepad.mappings.WiiRemoteMapping","getIDClassicController",0xe5d4d794,"flixel.input.gamepad.mappings.WiiRemoteMapping.getIDClassicController","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",36,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_69_getIDNunchuk,"flixel.input.gamepad.mappings.WiiRemoteMapping","getIDNunchuk",0x6173e8c8,"flixel.input.gamepad.mappings.WiiRemoteMapping.getIDNunchuk","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",69,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_94_getIDDefault,"flixel.input.gamepad.mappings.WiiRemoteMapping","getIDDefault",0xbf6a4387,"flixel.input.gamepad.mappings.WiiRemoteMapping.getIDDefault","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",94,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_113_getRawID,"flixel.input.gamepad.mappings.WiiRemoteMapping","getRawID",0x63d54c84,"flixel.input.gamepad.mappings.WiiRemoteMapping.getRawID","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",113,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_123_getRawClassicController,"flixel.input.gamepad.mappings.WiiRemoteMapping","getRawClassicController",0x484852a5,"flixel.input.gamepad.mappings.WiiRemoteMapping.getRawClassicController","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",123,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_156_getRawNunchuk,"flixel.input.gamepad.mappings.WiiRemoteMapping","getRawNunchuk",0x7dce1499,"flixel.input.gamepad.mappings.WiiRemoteMapping.getRawNunchuk","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",156,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_183_getRawDefault,"flixel.input.gamepad.mappings.WiiRemoteMapping","getRawDefault",0xdbc46f58,"flixel.input.gamepad.mappings.WiiRemoteMapping.getRawDefault","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",183,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_203_isAxisForMotion,"flixel.input.gamepad.mappings.WiiRemoteMapping","isAxisForMotion",0xc221669d,"flixel.input.gamepad.mappings.WiiRemoteMapping.isAxisForMotion","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",203,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_219_isAxisFlipped,"flixel.input.gamepad.mappings.WiiRemoteMapping","isAxisFlipped",0x7501e940,"flixel.input.gamepad.mappings.WiiRemoteMapping.isAxisFlipped","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",219,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_266_set_attachment,"flixel.input.gamepad.mappings.WiiRemoteMapping","set_attachment",0x85409917,"flixel.input.gamepad.mappings.WiiRemoteMapping.set_attachment","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",266,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_283_getInputLabel,"flixel.input.gamepad.mappings.WiiRemoteMapping","getInputLabel",0x3b840d29,"flixel.input.gamepad.mappings.WiiRemoteMapping.getInputLabel","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",283,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_354_getMappedInput,"flixel.input.gamepad.mappings.WiiRemoteMapping","getMappedInput",0x58e48ad8,"flixel.input.gamepad.mappings.WiiRemoteMapping.getMappedInput","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",354,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_292_getWiiInputLabel,"flixel.input.gamepad.mappings.WiiRemoteMapping","getWiiInputLabel",0x964e3a42,"flixel.input.gamepad.mappings.WiiRemoteMapping.getWiiInputLabel","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",292,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_311_getLabelClassicController,"flixel.input.gamepad.mappings.WiiRemoteMapping","getLabelClassicController",0xe3b562d9,"flixel.input.gamepad.mappings.WiiRemoteMapping.getLabelClassicController","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",311,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_329_getLabelNunchuk,"flixel.input.gamepad.mappings.WiiRemoteMapping","getLabelNunchuk",0x257e9bcd,"flixel.input.gamepad.mappings.WiiRemoteMapping.getLabelNunchuk","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",329,0xc69520e9)
HX_LOCAL_STACK_FRAME(_hx_pos_bff79226d1e7d85e_341_getLabelDefault,"flixel.input.gamepad.mappings.WiiRemoteMapping","getLabelDefault",0x8374f68c,"flixel.input.gamepad.mappings.WiiRemoteMapping.getLabelDefault","flixel/input/gamepad/mappings/WiiRemoteMapping.hx",341,0xc69520e9)
namespace flixel{
namespace input{
namespace gamepad{
namespace mappings{

void WiiRemoteMapping_obj::__construct( ::flixel::input::gamepad::FlxGamepadAttachment attachment){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_8_new)
HXDLIN(   8)		super::__construct(attachment);
            	}

Dynamic WiiRemoteMapping_obj::__CreateEmpty() { return new WiiRemoteMapping_obj; }

void *WiiRemoteMapping_obj::_hx_vtable = 0;

Dynamic WiiRemoteMapping_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WiiRemoteMapping_obj > _hx_result = new WiiRemoteMapping_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WiiRemoteMapping_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x04ee1c6d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x04ee1c6d;
	} else {
		return inClassId==(int)0x425bf69d;
	}
}

void WiiRemoteMapping_obj::initValues(){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_18_initValues)
HXLINE(  19)		this->supportsMotion = true;
HXLINE(  21)		this->supportsPointer = false;
            	}


int WiiRemoteMapping_obj::getID( ::Dynamic _tmp_rawID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_26_getID)
HXDLIN(  26)		int rawID = ( (int)(_tmp_rawID) );
HXDLIN(  26)		switch((int)(this->attachment->_hx_getIndex())){
            			case (int)0: {
HXLINE(  29)				return this->getIDNunchuk(rawID);
            			}
            			break;
            			case (int)1: {
HXLINE(  28)				return this->getIDClassicController(rawID);
            			}
            			break;
            			case (int)2: {
HXLINE(  30)				return this->getIDDefault(rawID);
            			}
            			break;
            		}
HXLINE(  26)		return null();
            	}


int WiiRemoteMapping_obj::getIDClassicController(int rawID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_36_getIDClassicController)
HXDLIN(  36)		switch((int)(rawID)){
            			case (int)5: {
HXLINE(  49)				return 11;
            			}
            			break;
            			case (int)6: {
HXLINE(  50)				return 12;
            			}
            			break;
            			case (int)7: {
HXLINE(  51)				return 13;
            			}
            			break;
            			case (int)8: {
HXLINE(  52)				return 14;
            			}
            			break;
            			case (int)9: {
HXLINE(  38)				return 1;
            			}
            			break;
            			case (int)10: {
HXLINE(  39)				return 0;
            			}
            			break;
            			case (int)11: {
HXLINE(  41)				return 2;
            			}
            			break;
            			case (int)12: {
HXLINE(  40)				return 3;
            			}
            			break;
            			case (int)13: {
HXLINE(  47)				return 17;
            			}
            			break;
            			case (int)14: {
HXLINE(  48)				return 18;
            			}
            			break;
            			case (int)15: {
HXLINE(  45)				return 4;
            			}
            			break;
            			case (int)16: {
HXLINE(  46)				return 5;
            			}
            			break;
            			case (int)17: {
HXLINE(  44)				return 7;
            			}
            			break;
            			case (int)18: {
HXLINE(  42)				return 6;
            			}
            			break;
            			case (int)19: {
HXLINE(  43)				return 10;
            			}
            			break;
            			case (int)20: {
HXLINE(  53)				return 30;
            			}
            			break;
            			case (int)21: {
HXLINE(  54)				return 31;
            			}
            			break;
            			default:{
HXLINE(  55)				int id = rawID;
HXDLIN(  55)				if (::hx::IsEq( id,this->leftStick->rawUp )) {
HXLINE(  55)					return 34;
            				}
            				else {
HXLINE(  56)					int id1 = rawID;
HXDLIN(  56)					if (::hx::IsEq( id1,this->leftStick->rawDown )) {
HXLINE(  56)						return 36;
            					}
            					else {
HXLINE(  57)						int id2 = rawID;
HXDLIN(  57)						if (::hx::IsEq( id2,this->leftStick->rawLeft )) {
HXLINE(  57)							return 37;
            						}
            						else {
HXLINE(  58)							int id3 = rawID;
HXDLIN(  58)							if (::hx::IsEq( id3,this->leftStick->rawRight )) {
HXLINE(  58)								return 35;
            							}
            							else {
HXLINE(  59)								int id4 = rawID;
HXDLIN(  59)								if (::hx::IsEq( id4,this->rightStick->rawUp )) {
HXLINE(  59)									return 38;
            								}
            								else {
HXLINE(  60)									int id5 = rawID;
HXDLIN(  60)									if (::hx::IsEq( id5,this->rightStick->rawDown )) {
HXLINE(  60)										return 40;
            									}
            									else {
HXLINE(  61)										int id6 = rawID;
HXDLIN(  61)										if (::hx::IsEq( id6,this->rightStick->rawLeft )) {
HXLINE(  61)											return 41;
            										}
            										else {
HXLINE(  62)											int id7 = rawID;
HXDLIN(  62)											if (::hx::IsEq( id7,this->rightStick->rawRight )) {
HXLINE(  62)												return 39;
            											}
            											else {
HXLINE(  63)												return -1;
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  36)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getIDClassicController,return )

int WiiRemoteMapping_obj::getIDNunchuk(int rawID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_69_getIDNunchuk)
HXDLIN(  69)		switch((int)(rawID)){
            			case (int)5: {
HXLINE(  80)				return 11;
            			}
            			break;
            			case (int)6: {
HXLINE(  81)				return 12;
            			}
            			break;
            			case (int)7: {
HXLINE(  82)				return 13;
            			}
            			break;
            			case (int)8: {
HXLINE(  83)				return 14;
            			}
            			break;
            			case (int)9: {
HXLINE(  71)				return 0;
            			}
            			break;
            			case (int)10: {
HXLINE(  72)				return 1;
            			}
            			break;
            			case (int)11: {
HXLINE(  73)				return 4;
            			}
            			break;
            			case (int)12: {
HXLINE(  74)				return 17;
            			}
            			break;
            			case (int)13: {
HXLINE(  75)				return 2;
            			}
            			break;
            			case (int)14: {
HXLINE(  76)				return 3;
            			}
            			break;
            			case (int)15: {
HXLINE(  78)				return 7;
            			}
            			break;
            			case (int)16: {
HXLINE(  77)				return 6;
            			}
            			break;
            			case (int)17: {
HXLINE(  79)				return 10;
            			}
            			break;
            			default:{
HXLINE(  84)				int id = rawID;
HXDLIN(  84)				if (::hx::IsEq( id,::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawUp )) {
HXLINE(  84)					return 34;
            				}
            				else {
HXLINE(  85)					int id1 = rawID;
HXDLIN(  85)					if (::hx::IsEq( id1,::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawDown )) {
HXLINE(  85)						return 36;
            					}
            					else {
HXLINE(  86)						int id2 = rawID;
HXDLIN(  86)						if (::hx::IsEq( id2,::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawLeft )) {
HXLINE(  86)							return 37;
            						}
            						else {
HXLINE(  87)							int id3 = rawID;
HXDLIN(  87)							if (::hx::IsEq( id3,::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawRight )) {
HXLINE(  87)								return 35;
            							}
            							else {
HXLINE(  88)								return this->super::getID(rawID);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  69)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getIDNunchuk,return )

int WiiRemoteMapping_obj::getIDDefault(int rawID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_94_getIDDefault)
HXDLIN(  94)		switch((int)(rawID)){
            			case (int)9: {
HXLINE(  98)				return 2;
            			}
            			break;
            			case (int)10: {
HXLINE(  99)				return 3;
            			}
            			break;
            			case (int)11: {
HXLINE(  96)				return 0;
            			}
            			break;
            			case (int)12: {
HXLINE(  97)				return 1;
            			}
            			break;
            			case (int)13: {
HXLINE( 102)				return 7;
            			}
            			break;
            			case (int)14: {
HXLINE( 100)				return 6;
            			}
            			break;
            			case (int)15: {
HXLINE( 101)				return 10;
            			}
            			break;
            			case (int)22: {
HXLINE( 103)				return 11;
            			}
            			break;
            			case (int)23: {
HXLINE( 104)				return 12;
            			}
            			break;
            			case (int)24: {
HXLINE( 105)				return 13;
            			}
            			break;
            			case (int)25: {
HXLINE( 106)				return 14;
            			}
            			break;
            			default:{
HXLINE( 107)				return -1;
            			}
            		}
HXLINE(  94)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getIDDefault,return )

 ::Dynamic WiiRemoteMapping_obj::getRawID(int ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_113_getRawID)
HXDLIN( 113)		switch((int)(this->attachment->_hx_getIndex())){
            			case (int)0: {
HXLINE( 116)				return this->getRawNunchuk(ID);
            			}
            			break;
            			case (int)1: {
HXLINE( 115)				return this->getRawClassicController(ID);
            			}
            			break;
            			case (int)2: {
HXLINE( 117)				return this->getRawDefault(ID);
            			}
            			break;
            		}
HXLINE( 113)		return null();
            	}


int WiiRemoteMapping_obj::getRawClassicController(int ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_123_getRawClassicController)
HXDLIN( 123)		switch((int)(ID)){
            			case (int)0: {
HXLINE( 125)				return 10;
            			}
            			break;
            			case (int)1: {
HXLINE( 126)				return 9;
            			}
            			break;
            			case (int)2: {
HXLINE( 127)				return 11;
            			}
            			break;
            			case (int)3: {
HXLINE( 128)				return 12;
            			}
            			break;
            			case (int)4: {
HXLINE( 136)				return 15;
            			}
            			break;
            			case (int)5: {
HXLINE( 137)				return 16;
            			}
            			break;
            			case (int)6: {
HXLINE( 133)				return 18;
            			}
            			break;
            			case (int)7: {
HXLINE( 135)				return 17;
            			}
            			break;
            			case (int)10: {
HXLINE( 134)				return 19;
            			}
            			break;
            			case (int)11: {
HXLINE( 129)				return 5;
            			}
            			break;
            			case (int)12: {
HXLINE( 130)				return 6;
            			}
            			break;
            			case (int)13: {
HXLINE( 131)				return 7;
            			}
            			break;
            			case (int)14: {
HXLINE( 132)				return 8;
            			}
            			break;
            			case (int)17: {
HXLINE( 138)				return 13;
            			}
            			break;
            			case (int)18: {
HXLINE( 139)				return 14;
            			}
            			break;
            			case (int)30: {
HXLINE( 140)				return 20;
            			}
            			break;
            			case (int)31: {
HXLINE( 141)				return 21;
            			}
            			break;
            			case (int)34: {
HXLINE( 142)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawUp) );
            			}
            			break;
            			case (int)35: {
HXLINE( 145)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawRight) );
            			}
            			break;
            			case (int)36: {
HXLINE( 143)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawDown) );
            			}
            			break;
            			case (int)37: {
HXLINE( 144)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawLeft) );
            			}
            			break;
            			case (int)38: {
HXLINE( 146)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::RIGHT_ANALOG_STICK->rawUp) );
            			}
            			break;
            			case (int)39: {
HXLINE( 149)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::RIGHT_ANALOG_STICK->rawRight) );
            			}
            			break;
            			case (int)40: {
HXLINE( 147)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::RIGHT_ANALOG_STICK->rawDown) );
            			}
            			break;
            			case (int)41: {
HXLINE( 148)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::RIGHT_ANALOG_STICK->rawLeft) );
            			}
            			break;
            			default:{
HXLINE( 150)				return ( (int)(this->super::getRawID(ID)) );
            			}
            		}
HXLINE( 123)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getRawClassicController,return )

int WiiRemoteMapping_obj::getRawNunchuk(int ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_156_getRawNunchuk)
HXDLIN( 156)		switch((int)(ID)){
            			case (int)0: {
HXLINE( 158)				return 9;
            			}
            			break;
            			case (int)1: {
HXLINE( 159)				return 10;
            			}
            			break;
            			case (int)2: {
HXLINE( 162)				return 13;
            			}
            			break;
            			case (int)3: {
HXLINE( 163)				return 14;
            			}
            			break;
            			case (int)4: {
HXLINE( 160)				return 11;
            			}
            			break;
            			case (int)6: {
HXLINE( 164)				return 16;
            			}
            			break;
            			case (int)7: {
HXLINE( 165)				return 15;
            			}
            			break;
            			case (int)10: {
HXLINE( 166)				return 17;
            			}
            			break;
            			case (int)11: {
HXLINE( 167)				return 5;
            			}
            			break;
            			case (int)12: {
HXLINE( 168)				return 6;
            			}
            			break;
            			case (int)13: {
HXLINE( 169)				return 7;
            			}
            			break;
            			case (int)14: {
HXLINE( 170)				return 8;
            			}
            			break;
            			case (int)17: {
HXLINE( 161)				return 12;
            			}
            			break;
            			case (int)26: {
HXLINE( 171)				return 3;
            			}
            			break;
            			case (int)27: {
HXLINE( 172)				return 2;
            			}
            			break;
            			case (int)34: {
HXLINE( 173)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawUp) );
            			}
            			break;
            			case (int)35: {
HXLINE( 176)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawRight) );
            			}
            			break;
            			case (int)36: {
HXLINE( 174)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawDown) );
            			}
            			break;
            			case (int)37: {
HXLINE( 175)				return ( (int)(::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK->rawLeft) );
            			}
            			break;
            			default:{
HXLINE( 177)				return ( (int)(this->super::getRawID(ID)) );
            			}
            		}
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getRawNunchuk,return )

int WiiRemoteMapping_obj::getRawDefault(int ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_183_getRawDefault)
HXDLIN( 183)		switch((int)(ID)){
            			case (int)0: {
HXLINE( 185)				return 11;
            			}
            			break;
            			case (int)1: {
HXLINE( 186)				return 12;
            			}
            			break;
            			case (int)2: {
HXLINE( 187)				return 9;
            			}
            			break;
            			case (int)3: {
HXLINE( 188)				return 10;
            			}
            			break;
            			case (int)6: {
HXLINE( 193)				return 14;
            			}
            			break;
            			case (int)7: {
HXLINE( 195)				return 13;
            			}
            			break;
            			case (int)10: {
HXLINE( 194)				return 15;
            			}
            			break;
            			case (int)11: {
HXLINE( 189)				return 22;
            			}
            			break;
            			case (int)12: {
HXLINE( 190)				return 23;
            			}
            			break;
            			case (int)13: {
HXLINE( 191)				return 24;
            			}
            			break;
            			case (int)14: {
HXLINE( 192)				return 25;
            			}
            			break;
            			case (int)26: {
HXLINE( 196)				return 2;
            			}
            			break;
            			case (int)27: {
HXLINE( 197)				return 3;
            			}
            			break;
            			default:{
HXLINE( 198)				return ( (int)(this->super::getRawID(ID)) );
            			}
            		}
HXLINE( 183)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getRawDefault,return )

bool WiiRemoteMapping_obj::isAxisForMotion( ::Dynamic _tmp_ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_203_isAxisForMotion)
HXLINE( 204)		int ID = ( (int)(_tmp_ID) );
HXDLIN( 204)		if (::hx::IsPointerEq( this->attachment,::flixel::input::gamepad::FlxGamepadAttachment_obj::NONE_dyn() )) {
HXLINE( 206)			bool _hx_tmp;
HXDLIN( 206)			if ((ID != 2)) {
HXLINE( 206)				_hx_tmp = (ID == 3);
            			}
            			else {
HXLINE( 206)				_hx_tmp = true;
            			}
HXDLIN( 206)			if (_hx_tmp) {
HXLINE( 207)				return true;
            			}
            		}
            		else {
HXLINE( 209)			if (::hx::IsPointerEq( this->attachment,::flixel::input::gamepad::FlxGamepadAttachment_obj::WII_NUNCHUCK_dyn() )) {
HXLINE( 211)				bool _hx_tmp1;
HXDLIN( 211)				if ((ID != 3)) {
HXLINE( 211)					_hx_tmp1 = (ID == 2);
            				}
            				else {
HXLINE( 211)					_hx_tmp1 = true;
            				}
HXDLIN( 211)				if (_hx_tmp1) {
HXLINE( 212)					return true;
            				}
            			}
            		}
HXLINE( 214)		return false;
            	}


bool WiiRemoteMapping_obj::isAxisFlipped( ::Dynamic _tmp_axisID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_219_isAxisFlipped)
HXDLIN( 219)		int axisID = ( (int)(_tmp_axisID) );
HXDLIN( 219)		return (axisID == 4);
            	}


 ::flixel::input::gamepad::FlxGamepadAttachment WiiRemoteMapping_obj::set_attachment( ::flixel::input::gamepad::FlxGamepadAttachment attachment){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_266_set_attachment)
HXLINE( 267)		 ::flixel::input::gamepad::FlxTypedGamepadAnalogStick _hx_tmp;
HXDLIN( 267)		switch((int)(attachment->_hx_getIndex())){
            			case (int)0: case (int)1: {
HXLINE( 267)				_hx_tmp = ::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::LEFT_ANALOG_STICK;
            			}
            			break;
            			case (int)2: {
HXLINE( 267)				_hx_tmp = ::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::REMOTE_DPAD;
            			}
            			break;
            		}
HXDLIN( 267)		this->leftStick = _hx_tmp;
HXLINE( 273)		 ::flixel::input::gamepad::FlxTypedGamepadAnalogStick _hx_tmp1;
HXDLIN( 273)		if ((attachment->_hx_getIndex() == 1)) {
HXLINE( 273)			_hx_tmp1 = ::flixel::input::gamepad::id::_WiiRemoteID::WiiRemoteID_Impl__obj::RIGHT_ANALOG_STICK;
            		}
            		else {
HXLINE( 273)			_hx_tmp1 = null();
            		}
HXDLIN( 273)		this->rightStick = _hx_tmp1;
HXLINE( 279)		return this->super::set_attachment(attachment);
            	}


::String WiiRemoteMapping_obj::getInputLabel(int id){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_283_getInputLabel)
HXLINE( 284)		::String label = ::flixel::input::gamepad::mappings::WiiRemoteMapping_obj::getWiiInputLabel(id,this->attachment);
HXLINE( 285)		if (::hx::IsNull( label )) {
HXLINE( 286)			return this->super::getInputLabel(id);
            		}
HXLINE( 288)		return label;
            	}


 ::flixel::input::gamepad::FlxGamepadMappedInput WiiRemoteMapping_obj::getMappedInput(int id){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_354_getMappedInput)
HXDLIN( 354)		return ::flixel::input::gamepad::FlxGamepadMappedInput_obj::WII(this->getRawID(id));
            	}


::String WiiRemoteMapping_obj::getWiiInputLabel(int id, ::flixel::input::gamepad::FlxGamepadAttachment attachment){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_292_getWiiInputLabel)
HXLINE( 293)		switch((int)(id)){
            			case (int)6: {
HXLINE( 295)				return HX_("minus",70,80,68,08);
            			}
            			break;
            			case (int)7: {
HXLINE( 297)				return HX_("plus",5a,3f,5a,4a);
            			}
            			break;
            			case (int)10: {
HXLINE( 296)				return HX_("home",1f,ca,12,45);
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 301)		switch((int)(attachment->_hx_getIndex())){
            			case (int)0: {
HXLINE( 304)				switch((int)(id)){
            					case (int)2: {
HXLINE( 304)						return HX_("1",31,00,00,00);
            					}
            					break;
            					case (int)3: {
HXLINE( 304)						return HX_("2",32,00,00,00);
            					}
            					break;
            					case (int)4: {
HXLINE( 304)						return HX_("c",63,00,00,00);
            					}
            					break;
            					case (int)17: {
HXLINE( 304)						return HX_("z",7a,00,00,00);
            					}
            					break;
            					default:{
HXLINE( 304)						return null();
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 303)				switch((int)(id)){
            					case (int)0: {
HXLINE( 303)						return HX_("b",62,00,00,00);
            					}
            					break;
            					case (int)1: {
HXLINE( 303)						return HX_("a",61,00,00,00);
            					}
            					break;
            					case (int)2: {
HXLINE( 303)						return HX_("y",79,00,00,00);
            					}
            					break;
            					case (int)3: {
HXLINE( 303)						return HX_("x",78,00,00,00);
            					}
            					break;
            					case (int)4: {
HXLINE( 303)						return HX_("zl",b2,6a,00,00);
            					}
            					break;
            					case (int)5: {
HXLINE( 303)						return HX_("zr",b8,6a,00,00);
            					}
            					break;
            					case (int)17: {
HXLINE( 303)						return HX_("l",6c,00,00,00);
            					}
            					break;
            					case (int)18: {
HXLINE( 303)						return HX_("r",72,00,00,00);
            					}
            					break;
            					case (int)30: {
HXLINE( 303)						return HX_("1",31,00,00,00);
            					}
            					break;
            					case (int)31: {
HXLINE( 303)						return HX_("2",32,00,00,00);
            					}
            					break;
            					default:{
HXLINE( 303)						return null();
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 305)				switch((int)(id)){
            					case (int)2: {
HXLINE( 305)						return HX_("1",31,00,00,00);
            					}
            					break;
            					case (int)3: {
HXLINE( 305)						return HX_("2",32,00,00,00);
            					}
            					break;
            					case (int)6: {
HXLINE( 305)						return HX_("minus",70,80,68,08);
            					}
            					break;
            					case (int)7: {
HXLINE( 305)						return HX_("plus",5a,3f,5a,4a);
            					}
            					break;
            					case (int)10: {
HXLINE( 305)						return HX_("home",1f,ca,12,45);
            					}
            					break;
            					default:{
HXLINE( 305)						return null();
            					}
            				}
            			}
            			break;
            		}
HXLINE( 301)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(WiiRemoteMapping_obj,getWiiInputLabel,return )

::String WiiRemoteMapping_obj::getLabelClassicController(int ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_311_getLabelClassicController)
HXDLIN( 311)		switch((int)(ID)){
            			case (int)0: {
HXLINE( 313)				return HX_("b",62,00,00,00);
            			}
            			break;
            			case (int)1: {
HXLINE( 314)				return HX_("a",61,00,00,00);
            			}
            			break;
            			case (int)2: {
HXLINE( 315)				return HX_("y",79,00,00,00);
            			}
            			break;
            			case (int)3: {
HXLINE( 316)				return HX_("x",78,00,00,00);
            			}
            			break;
            			case (int)4: {
HXLINE( 317)				return HX_("zl",b2,6a,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE( 318)				return HX_("zr",b8,6a,00,00);
            			}
            			break;
            			case (int)17: {
HXLINE( 319)				return HX_("l",6c,00,00,00);
            			}
            			break;
            			case (int)18: {
HXLINE( 320)				return HX_("r",72,00,00,00);
            			}
            			break;
            			case (int)30: {
HXLINE( 321)				return HX_("1",31,00,00,00);
            			}
            			break;
            			case (int)31: {
HXLINE( 322)				return HX_("2",32,00,00,00);
            			}
            			break;
            			default:{
HXLINE( 323)				return null();
            			}
            		}
HXLINE( 311)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getLabelClassicController,return )

::String WiiRemoteMapping_obj::getLabelNunchuk(int ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_329_getLabelNunchuk)
HXDLIN( 329)		switch((int)(ID)){
            			case (int)2: {
HXLINE( 331)				return HX_("1",31,00,00,00);
            			}
            			break;
            			case (int)3: {
HXLINE( 332)				return HX_("2",32,00,00,00);
            			}
            			break;
            			case (int)4: {
HXLINE( 333)				return HX_("c",63,00,00,00);
            			}
            			break;
            			case (int)17: {
HXLINE( 334)				return HX_("z",7a,00,00,00);
            			}
            			break;
            			default:{
HXLINE( 335)				return null();
            			}
            		}
HXLINE( 329)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getLabelNunchuk,return )

::String WiiRemoteMapping_obj::getLabelDefault(int ID){
            	HX_STACKFRAME(&_hx_pos_bff79226d1e7d85e_341_getLabelDefault)
HXDLIN( 341)		switch((int)(ID)){
            			case (int)2: {
HXLINE( 343)				return HX_("1",31,00,00,00);
            			}
            			break;
            			case (int)3: {
HXLINE( 344)				return HX_("2",32,00,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE( 345)				return HX_("minus",70,80,68,08);
            			}
            			break;
            			case (int)7: {
HXLINE( 347)				return HX_("plus",5a,3f,5a,4a);
            			}
            			break;
            			case (int)10: {
HXLINE( 346)				return HX_("home",1f,ca,12,45);
            			}
            			break;
            			default:{
HXLINE( 348)				return null();
            			}
            		}
HXLINE( 341)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WiiRemoteMapping_obj,getLabelDefault,return )


::hx::ObjectPtr< WiiRemoteMapping_obj > WiiRemoteMapping_obj::__new( ::flixel::input::gamepad::FlxGamepadAttachment attachment) {
	::hx::ObjectPtr< WiiRemoteMapping_obj > __this = new WiiRemoteMapping_obj();
	__this->__construct(attachment);
	return __this;
}

::hx::ObjectPtr< WiiRemoteMapping_obj > WiiRemoteMapping_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::input::gamepad::FlxGamepadAttachment attachment) {
	WiiRemoteMapping_obj *__this = (WiiRemoteMapping_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WiiRemoteMapping_obj), true, "flixel.input.gamepad.mappings.WiiRemoteMapping"));
	*(void **)__this = WiiRemoteMapping_obj::_hx_vtable;
	__this->__construct(attachment);
	return __this;
}

WiiRemoteMapping_obj::WiiRemoteMapping_obj()
{
}

::hx::Val WiiRemoteMapping_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"getID") ) { return ::hx::Val( getID_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getRawID") ) { return ::hx::Val( getRawID_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initValues") ) { return ::hx::Val( initValues_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getIDNunchuk") ) { return ::hx::Val( getIDNunchuk_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIDDefault") ) { return ::hx::Val( getIDDefault_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getRawNunchuk") ) { return ::hx::Val( getRawNunchuk_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRawDefault") ) { return ::hx::Val( getRawDefault_dyn() ); }
		if (HX_FIELD_EQ(inName,"isAxisFlipped") ) { return ::hx::Val( isAxisFlipped_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputLabel") ) { return ::hx::Val( getInputLabel_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_attachment") ) { return ::hx::Val( set_attachment_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMappedInput") ) { return ::hx::Val( getMappedInput_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isAxisForMotion") ) { return ::hx::Val( isAxisForMotion_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"getIDClassicController") ) { return ::hx::Val( getIDClassicController_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getRawClassicController") ) { return ::hx::Val( getRawClassicController_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool WiiRemoteMapping_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"getLabelNunchuk") ) { outValue = getLabelNunchuk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLabelDefault") ) { outValue = getLabelDefault_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getWiiInputLabel") ) { outValue = getWiiInputLabel_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getLabelClassicController") ) { outValue = getLabelClassicController_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *WiiRemoteMapping_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *WiiRemoteMapping_obj_sStaticStorageInfo = 0;
#endif

static ::String WiiRemoteMapping_obj_sMemberFields[] = {
	HX_("initValues",12,5f,fc,53),
	HX_("getID",f1,91,60,91),
	HX_("getIDClassicController",1d,e8,c4,20),
	HX_("getIDNunchuk",11,a4,df,d0),
	HX_("getIDDefault",d0,fe,d5,2e),
	HX_("getRawID",4d,6f,fd,43),
	HX_("getRawClassicController",fc,b9,66,9f),
	HX_("getRawNunchuk",30,39,a6,8c),
	HX_("getRawDefault",ef,93,9c,ea),
	HX_("isAxisForMotion",f4,1e,bd,52),
	HX_("isAxisFlipped",d7,0d,da,83),
	HX_("set_attachment",a0,78,88,73),
	HX_("getInputLabel",c0,31,5c,4a),
	HX_("getMappedInput",61,6a,2c,47),
	::String(null()) };

::hx::Class WiiRemoteMapping_obj::__mClass;

static ::String WiiRemoteMapping_obj_sStaticFields[] = {
	HX_("getWiiInputLabel",0b,ce,f3,8d),
	HX_("getLabelClassicController",f0,8d,bd,0c),
	HX_("getLabelNunchuk",24,54,1a,b6),
	HX_("getLabelDefault",e3,ae,10,14),
	::String(null())
};

void WiiRemoteMapping_obj::__register()
{
	WiiRemoteMapping_obj _hx_dummy;
	WiiRemoteMapping_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.mappings.WiiRemoteMapping",17,06,e9,07);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WiiRemoteMapping_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(WiiRemoteMapping_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WiiRemoteMapping_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WiiRemoteMapping_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WiiRemoteMapping_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WiiRemoteMapping_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace mappings

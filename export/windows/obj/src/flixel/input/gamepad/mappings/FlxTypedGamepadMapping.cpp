// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAcceptMode
#include <flixel/input/gamepad/FlxGamepadAcceptMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadMappedInput
#include <flixel/input/gamepad/FlxGamepadMappedInput.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxTypedGamepadAnalogStick
#include <flixel/input/gamepad/FlxTypedGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxTypedGamepadMapping
#include <flixel/input/gamepad/mappings/FlxTypedGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_Manufacturer
#include <flixel/input/gamepad/mappings/Manufacturer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_12_new,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","new",0x1a2d8b9d,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.new","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",12,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_48_initValues,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","initValues",0x91a53575,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.initValues","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",48,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_52_getAnalogStick,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","getAnalogStick",0x4aec3bed,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.getAnalogStick","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",52,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_68_getID,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","getID",0x218d566e,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.getID","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",68,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_76_getRawID,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","getRawID",0xf7c2d6f0,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.getRawID","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",76,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_87_getGlobalBottomIsAccept,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","getGlobalBottomIsAccept",0x916f24d3,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.getGlobalBottomIsAccept","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",87,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_108_isAxisFlipped,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","isAxisFlipped",0xf44b1754,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.isAxisFlipped","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",108,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_113_isAxisForMotion,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","isAxisForMotion",0x88a141b1,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.isAxisForMotion","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",113,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_134_set_attachment,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","set_attachment",0x65ffbc83,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.set_attachment","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",134,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_139_getMappedInput,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","getMappedInput",0x39a3ae44,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.getMappedInput","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",139,0x5edd1803)
HX_LOCAL_STACK_FRAME(_hx_pos_35c2138a7e3ffb8f_143_getInputLabel,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping","getInputLabel",0xbacd3b3d,"flixel.input.gamepad.mappings.FlxTypedGamepadMapping.getInputLabel","flixel/input/gamepad/mappings/FlxGamepadMapping.hx",143,0x5edd1803)
namespace flixel{
namespace input{
namespace gamepad{
namespace mappings{

void FlxTypedGamepadMapping_obj::__construct( ::flixel::input::gamepad::FlxGamepadAttachment attachment){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_12_new)
HXLINE(  29)		this->bottomIsAccept = true;
HXLINE(  21)		this->attachment = ::flixel::input::gamepad::FlxGamepadAttachment_obj::NONE_dyn();
HXLINE(  15)		this->supportsPointer = false;
HXLINE(  14)		this->supportsMotion = false;
HXLINE(  33)		if (::hx::IsNotNull( attachment )) {
HXLINE(  34)			this->set_attachment(attachment);
            		}
HXLINE(  45)		this->initValues();
            	}

Dynamic FlxTypedGamepadMapping_obj::__CreateEmpty() { return new FlxTypedGamepadMapping_obj; }

void *FlxTypedGamepadMapping_obj::_hx_vtable = 0;

Dynamic FlxTypedGamepadMapping_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTypedGamepadMapping_obj > _hx_result = new FlxTypedGamepadMapping_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxTypedGamepadMapping_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x425bf69d;
}

void FlxTypedGamepadMapping_obj::initValues(){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_48_initValues)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGamepadMapping_obj,initValues,(void))

 ::flixel::input::gamepad::FlxTypedGamepadAnalogStick FlxTypedGamepadMapping_obj::getAnalogStick(int ID){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_52_getAnalogStick)
HXDLIN(  52)		switch((int)(ID)){
            			case (int)19: {
HXLINE(  55)				return this->leftStick;
            			}
            			break;
            			case (int)20: {
HXLINE(  57)				return this->rightStick;
            			}
            			break;
            			default:{
HXLINE(  59)				return null();
            			}
            		}
HXLINE(  52)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,getAnalogStick,return )

int FlxTypedGamepadMapping_obj::getID( ::Dynamic rawID){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_68_getID)
HXDLIN(  68)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,getID,return )

 ::Dynamic FlxTypedGamepadMapping_obj::getRawID(int ID){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_76_getRawID)
HXDLIN(  76)		switch((int)(ID)){
            			case (int)42: {
HXLINE(  78)				if (this->getGlobalBottomIsAccept()) {
HXLINE(  78)					return this->getRawID(0);
            				}
            				else {
HXLINE(  80)					return this->getRawID(1);
            				}
            			}
            			break;
            			case (int)43: {
HXLINE(  79)				if (this->getGlobalBottomIsAccept()) {
HXLINE(  79)					return this->getRawID(1);
            				}
            				else {
HXLINE(  81)					return this->getRawID(0);
            				}
            			}
            			break;
            			default:{
HXLINE(  82)				return -1;
            			}
            		}
HXLINE(  76)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,getRawID,return )

bool FlxTypedGamepadMapping_obj::getGlobalBottomIsAccept(){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_87_getGlobalBottomIsAccept)
HXLINE(  89)		if (::hx::IsNotNull( ::flixel::FlxG_obj::gamepads )) {
HXLINE(  91)			switch((int)(::flixel::FlxG_obj::gamepads->acceptMode->_hx_getIndex())){
            				case (int)0: {
HXLINE(  93)					return true;
            				}
            				break;
            				case (int)1: {
HXLINE(  94)					return false;
            				}
            				break;
            				case (int)2: {
HXLINE(  95)					return this->bottomIsAccept;
            				}
            				break;
            			}
            		}
HXLINE( 100)		return this->bottomIsAccept;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGamepadMapping_obj,getGlobalBottomIsAccept,return )

bool FlxTypedGamepadMapping_obj::isAxisFlipped( ::Dynamic axisID){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_108_isAxisFlipped)
HXDLIN( 108)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,isAxisFlipped,return )

bool FlxTypedGamepadMapping_obj::isAxisForMotion( ::Dynamic ID){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_113_isAxisForMotion)
HXDLIN( 113)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,isAxisForMotion,return )

 ::flixel::input::gamepad::FlxGamepadAttachment FlxTypedGamepadMapping_obj::set_attachment( ::flixel::input::gamepad::FlxGamepadAttachment attachment){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_134_set_attachment)
HXDLIN( 134)		return (this->attachment = attachment);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,set_attachment,return )

 ::flixel::input::gamepad::FlxGamepadMappedInput FlxTypedGamepadMapping_obj::getMappedInput(int id){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_139_getMappedInput)
HXDLIN( 139)		return ::flixel::input::gamepad::FlxGamepadMappedInput_obj::UNKNOWN(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,getMappedInput,return )

::String FlxTypedGamepadMapping_obj::getInputLabel(int id){
            	HX_STACKFRAME(&_hx_pos_35c2138a7e3ffb8f_143_getInputLabel)
HXLINE( 144)		if (::hx::IsEq( this->getRawID(id),-1 )) {
HXLINE( 145)			return null();
            		}
HXLINE( 147)		switch((int)(id)){
            			case (int)0: {
HXLINE( 149)				return HX_("a",61,00,00,00);
            			}
            			break;
            			case (int)1: {
HXLINE( 150)				return HX_("b",62,00,00,00);
            			}
            			break;
            			case (int)2: {
HXLINE( 151)				return HX_("x",78,00,00,00);
            			}
            			break;
            			case (int)3: {
HXLINE( 152)				return HX_("y",79,00,00,00);
            			}
            			break;
            			case (int)4: {
HXLINE( 158)				return HX_("lb",76,5e,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE( 159)				return HX_("rb",b0,63,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE( 153)				return HX_("back",27,da,10,41);
            			}
            			break;
            			case (int)7: {
HXLINE( 155)				return HX_("start",62,74,0b,84);
            			}
            			break;
            			case (int)8: {
HXLINE( 156)				return HX_("ls-click",c2,36,da,15);
            			}
            			break;
            			case (int)9: {
HXLINE( 157)				return HX_("rs-click",7c,e3,08,6d);
            			}
            			break;
            			case (int)10: {
HXLINE( 154)				return HX_("guide",bc,ba,eb,9b);
            			}
            			break;
            			case (int)11: {
HXLINE( 165)				return HX_("up",5b,66,00,00);
            			}
            			break;
            			case (int)12: {
HXLINE( 166)				return HX_("down",62,f8,6d,42);
            			}
            			break;
            			case (int)13: {
HXLINE( 167)				return HX_("left",07,08,b0,47);
            			}
            			break;
            			case (int)14: {
HXLINE( 168)				return HX_("right",dc,0b,64,e9);
            			}
            			break;
            			case (int)15: {
HXLINE( 162)				return HX_("l2-click",c1,0f,e7,86);
            			}
            			break;
            			case (int)16: {
HXLINE( 163)				return HX_("r2-click",7b,bc,15,de);
            			}
            			break;
            			case (int)17: {
HXLINE( 160)				return HX_("lt",88,5e,00,00);
            			}
            			break;
            			case (int)18: {
HXLINE( 161)				return HX_("rt",c2,63,00,00);
            			}
            			break;
            			case (int)19: {
HXLINE( 169)				return HX_("ls",87,5e,00,00);
            			}
            			break;
            			case (int)20: {
HXLINE( 170)				return HX_("rs",c1,63,00,00);
            			}
            			break;
            			case (int)21: {
HXLINE( 164)				return HX_("dpad",6f,a7,6e,42);
            			}
            			break;
            			case (int)34: {
HXLINE( 171)				return HX_("ls-up",a1,bb,6c,7b);
            			}
            			break;
            			case (int)35: {
HXLINE( 174)				return HX_("ls-right",56,c6,df,b6);
            			}
            			break;
            			case (int)36: {
HXLINE( 172)				return HX_("ls-down",28,ab,8e,b1);
            			}
            			break;
            			case (int)37: {
HXLINE( 173)				return HX_("ls-left",cd,ba,d0,b6);
            			}
            			break;
            			case (int)38: {
HXLINE( 175)				return HX_("rs-up",a7,36,d4,ef);
            			}
            			break;
            			case (int)39: {
HXLINE( 178)				return HX_("rs-right",10,73,0e,0e);
            			}
            			break;
            			case (int)40: {
HXLINE( 176)				return HX_("rs-down",ae,73,0f,ab);
            			}
            			break;
            			case (int)41: {
HXLINE( 177)				return HX_("rs-left",53,83,51,b0);
            			}
            			break;
            			case (int)42: {
HXLINE( 179)				if (this->getGlobalBottomIsAccept()) {
HXLINE( 179)					return this->getInputLabel(0);
            				}
            				else {
HXLINE( 181)					return this->getInputLabel(1);
            				}
            			}
            			break;
            			case (int)43: {
HXLINE( 180)				if (this->getGlobalBottomIsAccept()) {
HXLINE( 180)					return this->getInputLabel(1);
            				}
            				else {
HXLINE( 182)					return this->getInputLabel(0);
            				}
            			}
            			break;
            			default:{
HXLINE( 187)				return null();
            			}
            		}
HXLINE( 147)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGamepadMapping_obj,getInputLabel,return )


::hx::ObjectPtr< FlxTypedGamepadMapping_obj > FlxTypedGamepadMapping_obj::__new( ::flixel::input::gamepad::FlxGamepadAttachment attachment) {
	::hx::ObjectPtr< FlxTypedGamepadMapping_obj > __this = new FlxTypedGamepadMapping_obj();
	__this->__construct(attachment);
	return __this;
}

::hx::ObjectPtr< FlxTypedGamepadMapping_obj > FlxTypedGamepadMapping_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::input::gamepad::FlxGamepadAttachment attachment) {
	FlxTypedGamepadMapping_obj *__this = (FlxTypedGamepadMapping_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypedGamepadMapping_obj), true, "flixel.input.gamepad.mappings.FlxTypedGamepadMapping"));
	*(void **)__this = FlxTypedGamepadMapping_obj::_hx_vtable;
	__this->__construct(attachment);
	return __this;
}

FlxTypedGamepadMapping_obj::FlxTypedGamepadMapping_obj()
{
}

void FlxTypedGamepadMapping_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedGamepadMapping);
	HX_MARK_MEMBER_NAME(supportsMotion,"supportsMotion");
	HX_MARK_MEMBER_NAME(supportsPointer,"supportsPointer");
	HX_MARK_MEMBER_NAME(leftStick,"leftStick");
	HX_MARK_MEMBER_NAME(rightStick,"rightStick");
	HX_MARK_MEMBER_NAME(attachment,"attachment");
	HX_MARK_MEMBER_NAME(manufacturer,"manufacturer");
	HX_MARK_MEMBER_NAME(bottomIsAccept,"bottomIsAccept");
	HX_MARK_END_CLASS();
}

void FlxTypedGamepadMapping_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(supportsMotion,"supportsMotion");
	HX_VISIT_MEMBER_NAME(supportsPointer,"supportsPointer");
	HX_VISIT_MEMBER_NAME(leftStick,"leftStick");
	HX_VISIT_MEMBER_NAME(rightStick,"rightStick");
	HX_VISIT_MEMBER_NAME(attachment,"attachment");
	HX_VISIT_MEMBER_NAME(manufacturer,"manufacturer");
	HX_VISIT_MEMBER_NAME(bottomIsAccept,"bottomIsAccept");
}

::hx::Val FlxTypedGamepadMapping_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"getID") ) { return ::hx::Val( getID_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getRawID") ) { return ::hx::Val( getRawID_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"leftStick") ) { return ::hx::Val( leftStick ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightStick") ) { return ::hx::Val( rightStick ); }
		if (HX_FIELD_EQ(inName,"attachment") ) { return ::hx::Val( attachment ); }
		if (HX_FIELD_EQ(inName,"initValues") ) { return ::hx::Val( initValues_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manufacturer") ) { return ::hx::Val( manufacturer ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isAxisFlipped") ) { return ::hx::Val( isAxisFlipped_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputLabel") ) { return ::hx::Val( getInputLabel_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"supportsMotion") ) { return ::hx::Val( supportsMotion ); }
		if (HX_FIELD_EQ(inName,"bottomIsAccept") ) { return ::hx::Val( bottomIsAccept ); }
		if (HX_FIELD_EQ(inName,"getAnalogStick") ) { return ::hx::Val( getAnalogStick_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_attachment") ) { return ::hx::Val( set_attachment_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMappedInput") ) { return ::hx::Val( getMappedInput_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"supportsPointer") ) { return ::hx::Val( supportsPointer ); }
		if (HX_FIELD_EQ(inName,"isAxisForMotion") ) { return ::hx::Val( isAxisForMotion_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getGlobalBottomIsAccept") ) { return ::hx::Val( getGlobalBottomIsAccept_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxTypedGamepadMapping_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"leftStick") ) { leftStick=inValue.Cast<  ::flixel::input::gamepad::FlxTypedGamepadAnalogStick >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightStick") ) { rightStick=inValue.Cast<  ::flixel::input::gamepad::FlxTypedGamepadAnalogStick >(); return inValue; }
		if (HX_FIELD_EQ(inName,"attachment") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_attachment(inValue.Cast<  ::flixel::input::gamepad::FlxGamepadAttachment >()) );attachment=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadAttachment >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manufacturer") ) { manufacturer=inValue.Cast<  ::flixel::input::gamepad::mappings::Manufacturer >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"supportsMotion") ) { supportsMotion=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomIsAccept") ) { bottomIsAccept=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"supportsPointer") ) { supportsPointer=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedGamepadMapping_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("supportsMotion",da,76,a1,62));
	outFields->push(HX_("supportsPointer",99,5f,50,15));
	outFields->push(HX_("leftStick",c9,67,f1,98));
	outFields->push(HX_("rightStick",d4,5f,d6,86));
	outFields->push(HX_("attachment",e3,07,73,dd));
	outFields->push(HX_("manufacturer",51,1a,55,14));
	outFields->push(HX_("bottomIsAccept",9d,34,8c,62));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTypedGamepadMapping_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxTypedGamepadMapping_obj,supportsMotion),HX_("supportsMotion",da,76,a1,62)},
	{::hx::fsBool,(int)offsetof(FlxTypedGamepadMapping_obj,supportsPointer),HX_("supportsPointer",99,5f,50,15)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxTypedGamepadAnalogStick */ ,(int)offsetof(FlxTypedGamepadMapping_obj,leftStick),HX_("leftStick",c9,67,f1,98)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxTypedGamepadAnalogStick */ ,(int)offsetof(FlxTypedGamepadMapping_obj,rightStick),HX_("rightStick",d4,5f,d6,86)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAttachment */ ,(int)offsetof(FlxTypedGamepadMapping_obj,attachment),HX_("attachment",e3,07,73,dd)},
	{::hx::fsObject /*  ::flixel::input::gamepad::mappings::Manufacturer */ ,(int)offsetof(FlxTypedGamepadMapping_obj,manufacturer),HX_("manufacturer",51,1a,55,14)},
	{::hx::fsBool,(int)offsetof(FlxTypedGamepadMapping_obj,bottomIsAccept),HX_("bottomIsAccept",9d,34,8c,62)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxTypedGamepadMapping_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedGamepadMapping_obj_sMemberFields[] = {
	HX_("supportsMotion",da,76,a1,62),
	HX_("supportsPointer",99,5f,50,15),
	HX_("leftStick",c9,67,f1,98),
	HX_("rightStick",d4,5f,d6,86),
	HX_("attachment",e3,07,73,dd),
	HX_("manufacturer",51,1a,55,14),
	HX_("bottomIsAccept",9d,34,8c,62),
	HX_("initValues",12,5f,fc,53),
	HX_("getAnalogStick",0a,f8,74,58),
	HX_("getID",f1,91,60,91),
	HX_("getRawID",4d,6f,fd,43),
	HX_("getGlobalBottomIsAccept",16,7d,5e,0b),
	HX_("isAxisFlipped",d7,0d,da,83),
	HX_("isAxisForMotion",f4,1e,bd,52),
	HX_("set_attachment",a0,78,88,73),
	HX_("getMappedInput",61,6a,2c,47),
	HX_("getInputLabel",c0,31,5c,4a),
	::String(null()) };

::hx::Class FlxTypedGamepadMapping_obj::__mClass;

void FlxTypedGamepadMapping_obj::__register()
{
	FlxTypedGamepadMapping_obj _hx_dummy;
	FlxTypedGamepadMapping_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.mappings.FlxTypedGamepadMapping",2b,79,06,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTypedGamepadMapping_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTypedGamepadMapping_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedGamepadMapping_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedGamepadMapping_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace mappings

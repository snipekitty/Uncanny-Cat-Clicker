// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadMappedInput
#include <flixel/input/gamepad/FlxGamepadMappedInput.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxTypedGamepadAnalogStick
#include <flixel/input/gamepad/FlxTypedGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_id__PS4ID_PS4ID_Impl_
#include <flixel/input/gamepad/id/_PS4ID/PS4ID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxTypedGamepadMapping
#include <flixel/input/gamepad/mappings/FlxTypedGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PS4Mapping
#include <flixel/input/gamepad/mappings/PS4Mapping.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e4c9bfb09cde4791_7_new,"flixel.input.gamepad.mappings.PS4Mapping","new",0x2b618f95,"flixel.input.gamepad.mappings.PS4Mapping.new","flixel/input/gamepad/mappings/PS4Mapping.hx",7,0x24847fdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e4c9bfb09cde4791_21_initValues,"flixel.input.gamepad.mappings.PS4Mapping","initValues",0xcf26207d,"flixel.input.gamepad.mappings.PS4Mapping.initValues","flixel/input/gamepad/mappings/PS4Mapping.hx",21,0x24847fdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e4c9bfb09cde4791_30_getID,"flixel.input.gamepad.mappings.PS4Mapping","getID",0xeac44866,"flixel.input.gamepad.mappings.PS4Mapping.getID","flixel/input/gamepad/mappings/PS4Mapping.hx",30,0x24847fdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e4c9bfb09cde4791_65_getRawID,"flixel.input.gamepad.mappings.PS4Mapping","getRawID",0x44a56ff8,"flixel.input.gamepad.mappings.PS4Mapping.getRawID","flixel/input/gamepad/mappings/PS4Mapping.hx",65,0x24847fdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e4c9bfb09cde4791_106_getInputLabel,"flixel.input.gamepad.mappings.PS4Mapping","getInputLabel",0x47bae535,"flixel.input.gamepad.mappings.PS4Mapping.getInputLabel","flixel/input/gamepad/mappings/PS4Mapping.hx",106,0x24847fdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e4c9bfb09cde4791_125_getMappedInput,"flixel.input.gamepad.mappings.PS4Mapping","getMappedInput",0xfcaabd4c,"flixel.input.gamepad.mappings.PS4Mapping.getMappedInput","flixel/input/gamepad/mappings/PS4Mapping.hx",125,0x24847fdd)
namespace flixel{
namespace input{
namespace gamepad{
namespace mappings{

void PS4Mapping_obj::__construct( ::flixel::input::gamepad::FlxGamepadAttachment attachment){
            	HX_STACKFRAME(&_hx_pos_e4c9bfb09cde4791_7_new)
HXDLIN(   7)		super::__construct(attachment);
            	}

Dynamic PS4Mapping_obj::__CreateEmpty() { return new PS4Mapping_obj; }

void *PS4Mapping_obj::_hx_vtable = 0;

Dynamic PS4Mapping_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PS4Mapping_obj > _hx_result = new PS4Mapping_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PS4Mapping_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x425bf69d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x425bf69d;
	} else {
		return inClassId==(int)0x756c32f9;
	}
}

void PS4Mapping_obj::initValues(){
            	HX_STACKFRAME(&_hx_pos_e4c9bfb09cde4791_21_initValues)
HXLINE(  22)		this->leftStick = ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::LEFT_ANALOG_STICK;
HXLINE(  23)		this->rightStick = ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::RIGHT_ANALOG_STICK;
HXLINE(  24)		this->supportsMotion = true;
HXLINE(  25)		this->supportsPointer = true;
            	}


int PS4Mapping_obj::getID( ::Dynamic _tmp_rawID){
            	HX_STACKFRAME(&_hx_pos_e4c9bfb09cde4791_30_getID)
HXDLIN(  30)		int rawID = ( (int)(_tmp_rawID) );
HXDLIN(  30)		switch((int)(rawID)){
            			case (int)6: {
HXLINE(  32)				return 0;
            			}
            			break;
            			case (int)7: {
HXLINE(  33)				return 1;
            			}
            			break;
            			case (int)8: {
HXLINE(  34)				return 2;
            			}
            			break;
            			case (int)9: {
HXLINE(  35)				return 3;
            			}
            			break;
            			case (int)10: {
HXLINE(  39)				return 6;
            			}
            			break;
            			case (int)11: {
HXLINE(  41)				return 10;
            			}
            			break;
            			case (int)12: {
HXLINE(  42)				return 7;
            			}
            			break;
            			case (int)13: {
HXLINE(  43)				return 8;
            			}
            			break;
            			case (int)14: {
HXLINE(  44)				return 9;
            			}
            			break;
            			case (int)15: {
HXLINE(  45)				return 4;
            			}
            			break;
            			case (int)16: {
HXLINE(  46)				return 5;
            			}
            			break;
            			case (int)17: {
HXLINE(  48)				return 11;
            			}
            			break;
            			case (int)18: {
HXLINE(  47)				return 12;
            			}
            			break;
            			case (int)19: {
HXLINE(  49)				return 13;
            			}
            			break;
            			case (int)20: {
HXLINE(  50)				return 14;
            			}
            			break;
            			default:{
HXLINE(  51)				int id = rawID;
HXDLIN(  51)				if (::hx::IsEq( id,this->leftStick->rawUp )) {
HXLINE(  51)					return 34;
            				}
            				else {
HXLINE(  52)					int id1 = rawID;
HXDLIN(  52)					if (::hx::IsEq( id1,this->leftStick->rawDown )) {
HXLINE(  52)						return 36;
            					}
            					else {
HXLINE(  53)						int id2 = rawID;
HXDLIN(  53)						if (::hx::IsEq( id2,this->leftStick->rawLeft )) {
HXLINE(  53)							return 37;
            						}
            						else {
HXLINE(  54)							int id3 = rawID;
HXDLIN(  54)							if (::hx::IsEq( id3,this->leftStick->rawRight )) {
HXLINE(  54)								return 35;
            							}
            							else {
HXLINE(  55)								int id4 = rawID;
HXDLIN(  55)								if (::hx::IsEq( id4,this->rightStick->rawUp )) {
HXLINE(  55)									return 38;
            								}
            								else {
HXLINE(  56)									int id5 = rawID;
HXDLIN(  56)									if (::hx::IsEq( id5,this->rightStick->rawDown )) {
HXLINE(  56)										return 40;
            									}
            									else {
HXLINE(  57)										int id6 = rawID;
HXDLIN(  57)										if (::hx::IsEq( id6,this->rightStick->rawLeft )) {
HXLINE(  57)											return 41;
            										}
            										else {
HXLINE(  58)											int id7 = rawID;
HXDLIN(  58)											if (::hx::IsEq( id7,this->rightStick->rawRight )) {
HXLINE(  58)												return 39;
            											}
            											else {
HXLINE(  59)												return -1;
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  30)		return null();
            	}


 ::Dynamic PS4Mapping_obj::getRawID(int ID){
            	HX_STACKFRAME(&_hx_pos_e4c9bfb09cde4791_65_getRawID)
HXDLIN(  65)		switch((int)(ID)){
            			case (int)0: {
HXLINE(  67)				return 6;
            			}
            			break;
            			case (int)1: {
HXLINE(  68)				return 7;
            			}
            			break;
            			case (int)2: {
HXLINE(  69)				return 8;
            			}
            			break;
            			case (int)3: {
HXLINE(  70)				return 9;
            			}
            			break;
            			case (int)4: {
HXLINE(  80)				return 15;
            			}
            			break;
            			case (int)5: {
HXLINE(  81)				return 16;
            			}
            			break;
            			case (int)6: {
HXLINE(  74)				return 10;
            			}
            			break;
            			case (int)7: {
HXLINE(  77)				return 12;
            			}
            			break;
            			case (int)8: {
HXLINE(  78)				return 13;
            			}
            			break;
            			case (int)9: {
HXLINE(  79)				return 14;
            			}
            			break;
            			case (int)10: {
HXLINE(  76)				return 11;
            			}
            			break;
            			case (int)11: {
HXLINE(  82)				return 17;
            			}
            			break;
            			case (int)12: {
HXLINE(  83)				return 18;
            			}
            			break;
            			case (int)13: {
HXLINE(  84)				return 19;
            			}
            			break;
            			case (int)14: {
HXLINE(  85)				return 20;
            			}
            			break;
            			case (int)17: {
HXLINE(  86)				return 4;
            			}
            			break;
            			case (int)18: {
HXLINE(  87)				return 5;
            			}
            			break;
            			case (int)34: {
HXLINE(  88)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::LEFT_ANALOG_STICK->rawUp;
            			}
            			break;
            			case (int)35: {
HXLINE(  91)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::LEFT_ANALOG_STICK->rawRight;
            			}
            			break;
            			case (int)36: {
HXLINE(  89)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::LEFT_ANALOG_STICK->rawDown;
            			}
            			break;
            			case (int)37: {
HXLINE(  90)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::LEFT_ANALOG_STICK->rawLeft;
            			}
            			break;
            			case (int)38: {
HXLINE(  92)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::RIGHT_ANALOG_STICK->rawUp;
            			}
            			break;
            			case (int)39: {
HXLINE(  95)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::RIGHT_ANALOG_STICK->rawRight;
            			}
            			break;
            			case (int)40: {
HXLINE(  93)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::RIGHT_ANALOG_STICK->rawDown;
            			}
            			break;
            			case (int)41: {
HXLINE(  94)				return ::flixel::input::gamepad::id::_PS4ID::PS4ID_Impl__obj::RIGHT_ANALOG_STICK->rawLeft;
            			}
            			break;
            			default:{
HXLINE( 100)				return this->super::getRawID(ID);
            			}
            		}
HXLINE(  65)		return null();
            	}


::String PS4Mapping_obj::getInputLabel(int id){
            	HX_STACKFRAME(&_hx_pos_e4c9bfb09cde4791_106_getInputLabel)
HXDLIN( 106)		switch((int)(id)){
            			case (int)0: {
HXLINE( 108)				return HX_("x",78,00,00,00);
            			}
            			break;
            			case (int)1: {
HXLINE( 109)				return HX_("circle",10,72,0d,56);
            			}
            			break;
            			case (int)2: {
HXLINE( 110)				return HX_("square",9d,00,f2,58);
            			}
            			break;
            			case (int)3: {
HXLINE( 111)				return HX_("triangle",c8,be,c5,8d);
            			}
            			break;
            			case (int)4: {
HXLINE( 115)				return HX_("l1",45,5e,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE( 116)				return HX_("r1",7f,63,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE( 112)				return HX_("share",df,e4,1c,7c);
            			}
            			break;
            			case (int)7: {
HXLINE( 114)				return HX_("options",5e,33,fe,df);
            			}
            			break;
            			case (int)10: {
HXLINE( 113)				return HX_("ps",03,62,00,00);
            			}
            			break;
            			case (int)17: {
HXLINE( 117)				return HX_("l2",46,5e,00,00);
            			}
            			break;
            			case (int)18: {
HXLINE( 118)				return HX_("r2",80,63,00,00);
            			}
            			break;
            			default:{
HXLINE( 119)				return this->super::getInputLabel(id);
            			}
            		}
HXLINE( 106)		return null();
            	}


 ::flixel::input::gamepad::FlxGamepadMappedInput PS4Mapping_obj::getMappedInput(int id){
            	HX_STACKFRAME(&_hx_pos_e4c9bfb09cde4791_125_getMappedInput)
HXDLIN( 125)		return ::flixel::input::gamepad::FlxGamepadMappedInput_obj::PS4(this->getRawID(id));
            	}



::hx::ObjectPtr< PS4Mapping_obj > PS4Mapping_obj::__new( ::flixel::input::gamepad::FlxGamepadAttachment attachment) {
	::hx::ObjectPtr< PS4Mapping_obj > __this = new PS4Mapping_obj();
	__this->__construct(attachment);
	return __this;
}

::hx::ObjectPtr< PS4Mapping_obj > PS4Mapping_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::input::gamepad::FlxGamepadAttachment attachment) {
	PS4Mapping_obj *__this = (PS4Mapping_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PS4Mapping_obj), true, "flixel.input.gamepad.mappings.PS4Mapping"));
	*(void **)__this = PS4Mapping_obj::_hx_vtable;
	__this->__construct(attachment);
	return __this;
}

PS4Mapping_obj::PS4Mapping_obj()
{
}

::hx::Val PS4Mapping_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"getID") ) { return ::hx::Val( getID_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getRawID") ) { return ::hx::Val( getRawID_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initValues") ) { return ::hx::Val( initValues_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getInputLabel") ) { return ::hx::Val( getInputLabel_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getMappedInput") ) { return ::hx::Val( getMappedInput_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PS4Mapping_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *PS4Mapping_obj_sStaticStorageInfo = 0;
#endif

static ::String PS4Mapping_obj_sMemberFields[] = {
	HX_("initValues",12,5f,fc,53),
	HX_("getID",f1,91,60,91),
	HX_("getRawID",4d,6f,fd,43),
	HX_("getInputLabel",c0,31,5c,4a),
	HX_("getMappedInput",61,6a,2c,47),
	::String(null()) };

::hx::Class PS4Mapping_obj::__mClass;

void PS4Mapping_obj::__register()
{
	PS4Mapping_obj _hx_dummy;
	PS4Mapping_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.mappings.PS4Mapping",23,21,fb,12);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PS4Mapping_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PS4Mapping_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PS4Mapping_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PS4Mapping_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace mappings

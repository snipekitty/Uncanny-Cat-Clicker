// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_gamepad_FlxAnalogToDigitalMode
#include <flixel/input/gamepad/FlxAnalogToDigitalMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxTypedGamepadAnalogStick
#include <flixel/input/gamepad/FlxTypedGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c143eff98b2dc38_7_new,"flixel.input.gamepad.FlxTypedGamepadAnalogStick","new",0x7a3f7f8c,"flixel.input.gamepad.FlxTypedGamepadAnalogStick.new","flixel/input/gamepad/FlxGamepadAnalogStick.hx",7,0xc7b72a73)
HX_LOCAL_STACK_FRAME(_hx_pos_9c143eff98b2dc38_71_toString,"flixel.input.gamepad.FlxTypedGamepadAnalogStick","toString",0xf67ca200,"flixel.input.gamepad.FlxTypedGamepadAnalogStick.toString","flixel/input/gamepad/FlxGamepadAnalogStick.hx",71,0xc7b72a73)
namespace flixel{
namespace input{
namespace gamepad{

void FlxTypedGamepadAnalogStick_obj::__construct(int x,int y, ::Dynamic settings){
            	HX_STACKFRAME(&_hx_pos_9c143eff98b2dc38_7_new)
HXLINE(  40)		this->mode = ::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::BOTH_dyn();
HXLINE(  35)		this->digitalThreshold = ((Float)0.5);
HXLINE(  30)		this->rawRight = -1;
HXLINE(  25)		this->rawLeft = -1;
HXLINE(  20)		this->rawDown = -1;
HXLINE(  15)		this->rawUp = -1;
HXLINE(  44)		this->x = x;
HXLINE(  45)		this->y = y;
HXLINE(  47)		if (::hx::IsNotNull( settings )) {
HXLINE(  49)			if (::hx::IsNotNull( settings->__Field(HX_("mode",63,d3,60,48),::hx::paccDynamic) )) {
HXLINE(  50)				this->mode = settings->__Field(HX_("mode",63,d3,60,48),::hx::paccDynamic);
            			}
HXLINE(  52)			if (::hx::IsNotNull( settings->__Field(HX_("up",5b,66,00,00),::hx::paccDynamic) )) {
HXLINE(  53)				this->rawUp =  ::Dynamic(settings->__Field(HX_("up",5b,66,00,00),::hx::paccDynamic));
            			}
HXLINE(  55)			if (::hx::IsNotNull( settings->__Field(HX_("down",62,f8,6d,42),::hx::paccDynamic) )) {
HXLINE(  56)				this->rawDown =  ::Dynamic(settings->__Field(HX_("down",62,f8,6d,42),::hx::paccDynamic));
            			}
HXLINE(  58)			if (::hx::IsNotNull( settings->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic) )) {
HXLINE(  59)				this->rawLeft =  ::Dynamic(settings->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic));
            			}
HXLINE(  61)			if (::hx::IsNotNull( settings->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic) )) {
HXLINE(  62)				this->rawRight =  ::Dynamic(settings->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic));
            			}
HXLINE(  64)			if (::hx::IsNotNull( settings->__Field(HX_("threshold",ab,c3,a3,34),::hx::paccDynamic) )) {
HXLINE(  65)				this->digitalThreshold = ( (Float)(settings->__Field(HX_("threshold",ab,c3,a3,34),::hx::paccDynamic)) );
            			}
            		}
            	}

Dynamic FlxTypedGamepadAnalogStick_obj::__CreateEmpty() { return new FlxTypedGamepadAnalogStick_obj; }

void *FlxTypedGamepadAnalogStick_obj::_hx_vtable = 0;

Dynamic FlxTypedGamepadAnalogStick_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTypedGamepadAnalogStick_obj > _hx_result = new FlxTypedGamepadAnalogStick_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxTypedGamepadAnalogStick_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ae0c46a;
}

::String FlxTypedGamepadAnalogStick_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_9c143eff98b2dc38_71_toString)
HXLINE(  72)		 ::Dynamic value = this->x;
HXDLIN(  72)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  72)		_this->label = HX_("x",78,00,00,00);
HXDLIN(  72)		_this->value = value;
HXLINE(  73)		 ::Dynamic value1 = this->y;
HXDLIN(  73)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  73)		_this1->label = HX_("y",79,00,00,00);
HXDLIN(  73)		_this1->value = value1;
HXLINE(  74)		 ::Dynamic value2 = this->rawUp;
HXDLIN(  74)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  74)		_this2->label = HX_("rawUp",63,6a,26,e4);
HXDLIN(  74)		_this2->value = value2;
HXLINE(  75)		 ::Dynamic value3 = this->rawDown;
HXDLIN(  75)		 ::flixel::util::LabelValuePair _this3 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  75)		_this3->label = HX_("rawDown",6a,0e,23,ff);
HXDLIN(  75)		_this3->value = value3;
HXLINE(  76)		 ::Dynamic value4 = this->rawLeft;
HXDLIN(  76)		 ::flixel::util::LabelValuePair _this4 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  76)		_this4->label = HX_("rawLeft",0f,1e,65,04);
HXDLIN(  76)		_this4->value = value4;
HXLINE(  77)		 ::Dynamic value5 = this->rawRight;
HXDLIN(  77)		 ::flixel::util::LabelValuePair _this5 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  77)		_this5->label = HX_("rawRight",d4,3c,22,4b);
HXDLIN(  77)		_this5->value = value5;
HXLINE(  78)		 ::Dynamic value6 = this->digitalThreshold;
HXDLIN(  78)		 ::flixel::util::LabelValuePair _this6 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  78)		_this6->label = HX_("digitalThreshold",b3,20,9a,6e);
HXDLIN(  78)		_this6->value = value6;
HXLINE(  79)		 ::Dynamic value7 = this->mode;
HXDLIN(  79)		 ::flixel::util::LabelValuePair _this7 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  79)		_this7->label = HX_("mode",63,d3,60,48);
HXDLIN(  79)		_this7->value = value7;
HXLINE(  71)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(8)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)->init(4,_this4)->init(5,_this5)->init(6,_this6)->init(7,_this7));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGamepadAnalogStick_obj,toString,return )


::hx::ObjectPtr< FlxTypedGamepadAnalogStick_obj > FlxTypedGamepadAnalogStick_obj::__new(int x,int y, ::Dynamic settings) {
	::hx::ObjectPtr< FlxTypedGamepadAnalogStick_obj > __this = new FlxTypedGamepadAnalogStick_obj();
	__this->__construct(x,y,settings);
	return __this;
}

::hx::ObjectPtr< FlxTypedGamepadAnalogStick_obj > FlxTypedGamepadAnalogStick_obj::__alloc(::hx::Ctx *_hx_ctx,int x,int y, ::Dynamic settings) {
	FlxTypedGamepadAnalogStick_obj *__this = (FlxTypedGamepadAnalogStick_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypedGamepadAnalogStick_obj), true, "flixel.input.gamepad.FlxTypedGamepadAnalogStick"));
	*(void **)__this = FlxTypedGamepadAnalogStick_obj::_hx_vtable;
	__this->__construct(x,y,settings);
	return __this;
}

FlxTypedGamepadAnalogStick_obj::FlxTypedGamepadAnalogStick_obj()
{
}

void FlxTypedGamepadAnalogStick_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedGamepadAnalogStick);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(rawUp,"rawUp");
	HX_MARK_MEMBER_NAME(rawDown,"rawDown");
	HX_MARK_MEMBER_NAME(rawLeft,"rawLeft");
	HX_MARK_MEMBER_NAME(rawRight,"rawRight");
	HX_MARK_MEMBER_NAME(digitalThreshold,"digitalThreshold");
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_END_CLASS();
}

void FlxTypedGamepadAnalogStick_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(rawUp,"rawUp");
	HX_VISIT_MEMBER_NAME(rawDown,"rawDown");
	HX_VISIT_MEMBER_NAME(rawLeft,"rawLeft");
	HX_VISIT_MEMBER_NAME(rawRight,"rawRight");
	HX_VISIT_MEMBER_NAME(digitalThreshold,"digitalThreshold");
	HX_VISIT_MEMBER_NAME(mode,"mode");
}

::hx::Val FlxTypedGamepadAnalogStick_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { return ::hx::Val( mode ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"rawUp") ) { return ::hx::Val( rawUp ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rawDown") ) { return ::hx::Val( rawDown ); }
		if (HX_FIELD_EQ(inName,"rawLeft") ) { return ::hx::Val( rawLeft ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rawRight") ) { return ::hx::Val( rawRight ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"digitalThreshold") ) { return ::hx::Val( digitalThreshold ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxTypedGamepadAnalogStick_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast<  ::flixel::input::gamepad::FlxAnalogToDigitalMode >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"rawUp") ) { rawUp=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rawDown") ) { rawDown=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rawLeft") ) { rawLeft=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rawRight") ) { rawRight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"digitalThreshold") ) { digitalThreshold=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedGamepadAnalogStick_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("rawUp",63,6a,26,e4));
	outFields->push(HX_("rawDown",6a,0e,23,ff));
	outFields->push(HX_("rawLeft",0f,1e,65,04));
	outFields->push(HX_("rawRight",d4,3c,22,4b));
	outFields->push(HX_("digitalThreshold",b3,20,9a,6e));
	outFields->push(HX_("mode",63,d3,60,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTypedGamepadAnalogStick_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FlxTypedGamepadAnalogStick_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(FlxTypedGamepadAnalogStick_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTypedGamepadAnalogStick_obj,rawUp),HX_("rawUp",63,6a,26,e4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTypedGamepadAnalogStick_obj,rawDown),HX_("rawDown",6a,0e,23,ff)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTypedGamepadAnalogStick_obj,rawLeft),HX_("rawLeft",0f,1e,65,04)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTypedGamepadAnalogStick_obj,rawRight),HX_("rawRight",d4,3c,22,4b)},
	{::hx::fsFloat,(int)offsetof(FlxTypedGamepadAnalogStick_obj,digitalThreshold),HX_("digitalThreshold",b3,20,9a,6e)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxAnalogToDigitalMode */ ,(int)offsetof(FlxTypedGamepadAnalogStick_obj,mode),HX_("mode",63,d3,60,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxTypedGamepadAnalogStick_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedGamepadAnalogStick_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("rawUp",63,6a,26,e4),
	HX_("rawDown",6a,0e,23,ff),
	HX_("rawLeft",0f,1e,65,04),
	HX_("rawRight",d4,3c,22,4b),
	HX_("digitalThreshold",b3,20,9a,6e),
	HX_("mode",63,d3,60,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class FlxTypedGamepadAnalogStick_obj::__mClass;

void FlxTypedGamepadAnalogStick_obj::__register()
{
	FlxTypedGamepadAnalogStick_obj _hx_dummy;
	FlxTypedGamepadAnalogStick_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.FlxTypedGamepadAnalogStick",9a,09,96,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTypedGamepadAnalogStick_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTypedGamepadAnalogStick_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedGamepadAnalogStick_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedGamepadAnalogStick_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad

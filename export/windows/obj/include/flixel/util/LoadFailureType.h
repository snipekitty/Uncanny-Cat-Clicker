// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_util_LoadFailureType
#define INCLUDED_flixel_util_LoadFailureType

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flixel,util,LoadFailureType)
HX_DECLARE_CLASS1(haxe,Exception)
namespace flixel{
namespace util{


class LoadFailureType_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef LoadFailureType_obj OBJ_;

	public:
		LoadFailureType_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("flixel.util.LoadFailureType",64,0a,58,f4); }
		::String __ToString() const { return HX_("LoadFailureType.",f0,86,e7,21) + _hx_tag; }

		static ::flixel::util::LoadFailureType INVALID_NAME(::String name,::String message);
		static ::Dynamic INVALID_NAME_dyn();
		static ::flixel::util::LoadFailureType INVALID_PATH(::String path,::String message);
		static ::Dynamic INVALID_PATH_dyn();
		static ::flixel::util::LoadFailureType IO( ::haxe::Exception exception);
		static ::Dynamic IO_dyn();
		static ::flixel::util::LoadFailureType PARSING(::String rawData, ::haxe::Exception exception);
		static ::Dynamic PARSING_dyn();
};

} // end namespace flixel
} // end namespace util

#endif /* INCLUDED_flixel_util_LoadFailureType */ 

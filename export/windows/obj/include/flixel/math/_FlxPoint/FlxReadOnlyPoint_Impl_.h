// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_math__FlxPoint_FlxReadOnlyPoint_Impl_
#define INCLUDED_flixel_math__FlxPoint_FlxReadOnlyPoint_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS3(flixel,math,_FlxPoint,FlxReadOnlyPoint_Impl_)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace flixel{
namespace math{
namespace _FlxPoint{


class HXCPP_CLASS_ATTRIBUTES FlxReadOnlyPoint_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxReadOnlyPoint_Impl__obj OBJ_;
		FlxReadOnlyPoint_Impl__obj();

	public:
		enum { _hx_ClassId = 0x5def37d5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_"); }

		inline static ::hx::ObjectPtr< FlxReadOnlyPoint_Impl__obj > __new() {
			::hx::ObjectPtr< FlxReadOnlyPoint_Impl__obj > __this = new FlxReadOnlyPoint_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxReadOnlyPoint_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxReadOnlyPoint_Impl__obj *__this = (FlxReadOnlyPoint_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxReadOnlyPoint_Impl__obj), false, "flixel.math._FlxPoint.FlxReadOnlyPoint_Impl_"));
			*(void **)__this = FlxReadOnlyPoint_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxReadOnlyPoint_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxReadOnlyPoint_Impl_",fc,a2,44,f1); }

		static Float get_x( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic get_x_dyn();

		static Float get_y( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic get_y_dyn();

		static Float get_length( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic get_length_dyn();

		static Float get_radians( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic get_radians_dyn();

		static Float get_degrees( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic get_degrees_dyn();

		static  ::flixel::math::FlxBasePoint set( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  x,::hx::Null< int >  y);
		static ::Dynamic set_dyn();

		static  ::flixel::math::FlxBasePoint add( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  x,::hx::Null< int >  y);
		static ::Dynamic add_dyn();

		static  ::flixel::math::FlxBasePoint addPoint( ::flixel::math::FlxBasePoint this1,Float point);
		static ::Dynamic addPoint_dyn();

		static  ::flixel::math::FlxBasePoint subtract( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  x,::hx::Null< int >  y);
		static ::Dynamic subtract_dyn();

		static  ::flixel::math::FlxBasePoint subtractPoint( ::flixel::math::FlxBasePoint this1,Float point);
		static ::Dynamic subtractPoint_dyn();

		static  ::flixel::math::FlxBasePoint scale( ::flixel::math::FlxBasePoint this1,::hx::Null< int >  x,::hx::Null< int >  y);
		static ::Dynamic scale_dyn();

		static  ::flixel::math::FlxBasePoint scalePoint( ::flixel::math::FlxBasePoint this1,Float point);
		static ::Dynamic scalePoint_dyn();

		static  ::flixel::math::FlxBasePoint copyFrom( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point);
		static ::Dynamic copyFrom_dyn();

		static  ::flixel::math::FlxBasePoint copyFromFlash( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint point);
		static ::Dynamic copyFromFlash_dyn();

		static  ::flixel::math::FlxBasePoint floor( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic floor_dyn();

		static  ::flixel::math::FlxBasePoint ceil( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic ceil_dyn();

		static  ::flixel::math::FlxBasePoint round( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic round_dyn();

		static  ::flixel::math::FlxBasePoint rotate( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float degrees);
		static ::Dynamic rotate_dyn();

		static  ::flixel::math::FlxBasePoint pivotRadians( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float radians);
		static ::Dynamic pivotRadians_dyn();

		static  ::flixel::math::FlxBasePoint pivotDegrees( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint pivot,Float degrees);
		static ::Dynamic pivotDegrees_dyn();

		static  ::flixel::math::FlxBasePoint transform( ::flixel::math::FlxBasePoint this1, ::openfl::geom::Matrix matrix);
		static ::Dynamic transform_dyn();

		static  ::flixel::math::FlxBasePoint zero( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic zero_dyn();

		static  ::flixel::math::FlxBasePoint normalize( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic normalize_dyn();

		static  ::flixel::math::FlxBasePoint rotateByRadians( ::flixel::math::FlxBasePoint this1,Float rads);
		static ::Dynamic rotateByRadians_dyn();

		static  ::flixel::math::FlxBasePoint rotateByDegrees( ::flixel::math::FlxBasePoint this1,Float degs);
		static ::Dynamic rotateByDegrees_dyn();

		static  ::flixel::math::FlxBasePoint rotateWithTrig( ::flixel::math::FlxBasePoint this1,Float sin,Float cos);
		static ::Dynamic rotateWithTrig_dyn();

		static  ::flixel::math::FlxBasePoint setPolarRadians( ::flixel::math::FlxBasePoint this1,Float length,Float radians);
		static ::Dynamic setPolarRadians_dyn();

		static  ::flixel::math::FlxBasePoint setPolarDegrees( ::flixel::math::FlxBasePoint this1,Float length,Float degrees);
		static ::Dynamic setPolarDegrees_dyn();

		static  ::flixel::math::FlxBasePoint negate( ::flixel::math::FlxBasePoint this1);
		static ::Dynamic negate_dyn();

		static  ::flixel::math::FlxBasePoint truncate( ::flixel::math::FlxBasePoint this1,Float max);
		static ::Dynamic truncate_dyn();

		static  ::flixel::math::FlxBasePoint bounce( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint normal,::hx::Null< Float >  coeff);
		static ::Dynamic bounce_dyn();

		static  ::flixel::math::FlxBasePoint bounceWithFriction( ::flixel::math::FlxBasePoint this1, ::flixel::math::FlxBasePoint normal,::hx::Null< Float >  coeff,::hx::Null< Float >  friction);
		static ::Dynamic bounceWithFriction_dyn();

};

} // end namespace flixel
} // end namespace math
} // end namespace _FlxPoint

#endif /* INCLUDED_flixel_math__FlxPoint_FlxReadOnlyPoint_Impl_ */ 

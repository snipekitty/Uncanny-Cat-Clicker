// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_text_FlxInputTextManager
#define INCLUDED_flixel_text_FlxInputTextManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS2(flixel,text,FlxInputTextManager)
HX_DECLARE_CLASS2(flixel,text,IFlxInputText)
HX_DECLARE_CLASS2(flixel,text,TypingAction)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxBaseSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxSignal1)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,TextEvent)

namespace flixel{
namespace text{


class HXCPP_CLASS_ATTRIBUTES FlxInputTextManager_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef FlxInputTextManager_obj OBJ_;
		FlxInputTextManager_obj();

	public:
		enum { _hx_ClassId = 0x596f56df };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.text.FlxInputTextManager")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.text.FlxInputTextManager"); }
		static ::hx::ObjectPtr< FlxInputTextManager_obj > __new();
		static ::hx::ObjectPtr< FlxInputTextManager_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxInputTextManager_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxInputTextManager",c8,c5,e0,01); }

		::Dynamic focus;
		 ::flixel::util::_FlxSignal::FlxSignal1 onTypingAction;
		::Array< ::Dynamic> _registeredInputTexts;
		bool _mac;
		void destroy();

		void addEvents();
		::Dynamic addEvents_dyn();

		void removeEvents();
		::Dynamic removeEvents_dyn();

		void registerInputText(::Dynamic input);
		::Dynamic registerInputText_dyn();

		void unregisterInputText(::Dynamic input);
		::Dynamic unregisterInputText_dyn();

		void setFocus(::Dynamic value);
		::Dynamic setFocus_dyn();

		void onTextInput( ::openfl::events::TextEvent event);
		::Dynamic onTextInput_dyn();

		void dispatchTypingAction( ::flixel::text::TypingAction action);
		::Dynamic dispatchTypingAction_dyn();

		void onKeyDown(int key,int modifier);
		::Dynamic onKeyDown_dyn();

		bool get_isTyping();
		::Dynamic get_isTyping_dyn();

};

} // end namespace flixel
} // end namespace text

#endif /* INCLUDED_flixel_text_FlxInputTextManager */ 

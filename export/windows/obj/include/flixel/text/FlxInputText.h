// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_text_FlxInputText
#define INCLUDED_flixel_text_FlxInputText

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_IFlxInputText
#include <flixel/text/IFlxInputText.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,input,FlxPointer)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,text,FlxInputText)
HX_DECLARE_CLASS2(flixel,text,FlxInputTextFilterMode)
HX_DECLARE_CLASS2(flixel,text,FlxInputTextManager)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,text,IFlxInputText)
HX_DECLARE_CLASS2(flixel,text,MoveCursorAction)
HX_DECLARE_CLASS2(flixel,text,TypingAction)
HX_DECLARE_CLASS2(flixel,text,TypingCommand)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(flixel,util,IFlxSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxBaseSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxSignal1)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxSignal2)
HX_DECLARE_CLASS2(lime,math,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,text,TextFormat)

namespace flixel{
namespace text{


class HXCPP_CLASS_ATTRIBUTES FlxInputText_obj : public  ::flixel::text::FlxText_obj
{
	public:
		typedef  ::flixel::text::FlxText_obj super;
		typedef FlxInputText_obj OBJ_;
		FlxInputText_obj();

	public:
		enum { _hx_ClassId = 0x3674a1f6 };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_fieldWidth,::String text,::hx::Null< int >  __o_size,::hx::Null< int >  __o_textColor,::hx::Null< int >  __o_backgroundColor,::hx::Null< bool >  __o_embeddedFont, ::flixel::text::FlxInputTextManager manager);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.text.FlxInputText")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.text.FlxInputText"); }
		static ::hx::ObjectPtr< FlxInputText_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_fieldWidth,::String text,::hx::Null< int >  __o_size,::hx::Null< int >  __o_textColor,::hx::Null< int >  __o_backgroundColor,::hx::Null< bool >  __o_embeddedFont, ::flixel::text::FlxInputTextManager manager);
		static ::hx::ObjectPtr< FlxInputText_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_fieldWidth,::String text,::hx::Null< int >  __o_size,::hx::Null< int >  __o_textColor,::hx::Null< int >  __o_backgroundColor,::hx::Null< bool >  __o_embeddedFont, ::flixel::text::FlxInputTextManager manager);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxInputText_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxInputText",25,d3,0c,31); }

		static void __boot();
		static  ::flixel::text::FlxInputTextManager globalManager;
		static int GUTTER;
		static ::Array< ::String > DELIMITERS;
		bool background;
		int backgroundColor;
		int caretColor;
		int caretWidth;
		bool editable;
		int fieldBorderColor;
		int fieldBorderThickness;
		 ::flixel::text::FlxInputTextFilterMode filterMode;
		int forceCase;
		bool hasFocus;
		bool mouseWheelEnabled;
		 ::flixel::util::_FlxSignal::FlxSignal1 onEnter;
		 ::flixel::util::_FlxSignal::FlxSignal1 onFocusChange;
		 ::flixel::util::_FlxSignal::FlxSignal2 onScrollChange;
		 ::flixel::util::_FlxSignal::FlxSignal2 onTextChange;
		bool selectable;
		int selectedTextColor;
		int selectionColor;
		bool useSelectedTextFormat;
		 ::flixel::text::FlxInputTextManager manager;
		 ::flixel::FlxSprite _backgroundSprite;
		 ::flixel::FlxSprite _caret;
		int _caretIndex;
		Float _caretTimer;
		 ::flixel::FlxSprite _fieldBorderSprite;
		bool _justGainedFocus;
		 ::flixel::FlxCamera _pointerCamera;
		bool _regenBackground;
		bool _regenCaretSize;
		::Array< ::Dynamic> _selectionBoxes;
		 ::openfl::text::TextFormat _selectionFormat;
		int _selectionIndex;
		int _lastPressTime;
		Float _scrollVCounter;
		bool _mouseDown;
		void setManager( ::flixel::text::FlxInputTextManager manager);
		::Dynamic setManager_dyn();

		void startFocus();
		::Dynamic startFocus_dyn();

		void endFocus();
		::Dynamic endFocus_dyn();

		void update(Float elapsed);

		void draw();

		void destroy();

		void applyFormats( ::openfl::text::TextFormat formatAdjusted,::hx::Null< bool >  useBorderColor);

		void regenGraphic();

		void dispatchTypingAction( ::flixel::text::TypingAction action);
		::Dynamic dispatchTypingAction_dyn();

		void replaceSelectedText(::String newText);
		::Dynamic replaceSelectedText_dyn();

		void setSelection(int beginIndex,int endIndex);
		::Dynamic setSelection_dyn();

		void addText(::String newText);
		::Dynamic addText_dyn();

		void clipSprite( ::flixel::FlxSprite sprite,::hx::Null< bool >  border);
		::Dynamic clipSprite_dyn();

		void drawSprite( ::flixel::FlxSprite sprite);
		::Dynamic drawSprite_dyn();

		::String filterText(::String newText,::hx::Null< bool >  selection);
		::Dynamic filterText_dyn();

		Float getCaretOffsetX();
		::Dynamic getCaretOffsetX_dyn();

		int getCharAtPosition(Float x,Float y);
		::Dynamic getCharAtPosition_dyn();

		 ::openfl::geom::Rectangle getCharBoundaries(int _hx_char);
		::Dynamic getCharBoundaries_dyn();

		int getCharIndexOnDifferentLine(int charIndex,int lineIndex);
		::Dynamic getCharIndexOnDifferentLine_dyn();

		int getLineIndexOfChar(int _hx_char);
		::Dynamic getLineIndexOfChar_dyn();

		Float getLineY(int line);
		::Dynamic getLineY_dyn();

		 ::lime::math::Rectangle getLimeBounds( ::flixel::FlxCamera camera);
		::Dynamic getLimeBounds_dyn();

		Float getScrollVOffset();
		::Dynamic getScrollVOffset_dyn();

		bool isCaretLineVisible();
		::Dynamic isCaretLineVisible_dyn();

		void moveCursor( ::flixel::text::MoveCursorAction type,bool shiftKey);
		::Dynamic moveCursor_dyn();

		void regenBackground();
		::Dynamic regenBackground_dyn();

		void replaceText(int beginIndex,int endIndex,::String newText);
		::Dynamic replaceText_dyn();

		void runCommand( ::flixel::text::TypingCommand cmd);
		::Dynamic runCommand_dyn();

		void restartCaretTimer();
		::Dynamic restartCaretTimer_dyn();

		void updateBackgroundPosition();
		::Dynamic updateBackgroundPosition_dyn();

		void updateCaretPosition();
		::Dynamic updateCaretPosition_dyn();

		void updateCaretSize();
		::Dynamic updateCaretSize_dyn();

		void updateSelection(::hx::Null< bool >  keepScroll);
		::Dynamic updateSelection_dyn();

		void updateSelectionBoxes();
		::Dynamic updateSelectionBoxes_dyn();

		void updateSelectionSprites();
		::Dynamic updateSelectionSprites_dyn();

		void updateSpritePositions();
		::Dynamic updateSpritePositions_dyn();

		bool updateMouseInput(Float elapsed);
		::Dynamic updateMouseInput_dyn();

		bool updateTouchInput(Float elapsed);
		::Dynamic updateTouchInput_dyn();

		bool checkPointerOverlap( ::flixel::input::FlxPointer pointer);
		::Dynamic checkPointerOverlap_dyn();

		void updatePointerPress( ::flixel::input::FlxPointer pointer);
		::Dynamic updatePointerPress_dyn();

		void updatePointerDrag( ::flixel::input::FlxPointer pointer,Float elapsed);
		::Dynamic updatePointerDrag_dyn();

		void updatePointerMove( ::flixel::input::FlxPointer pointer);
		::Dynamic updatePointerMove_dyn();

		void updatePointerRelease( ::flixel::input::FlxPointer pointer);
		::Dynamic updatePointerRelease_dyn();

		void updatePointerDoublePress( ::flixel::input::FlxPointer pointer);
		::Dynamic updatePointerDoublePress_dyn();

		 ::flixel::math::FlxBasePoint getRelativePosition( ::flixel::input::FlxPointer pointer);
		::Dynamic getRelativePosition_dyn();

		bool set_bold(bool value);

		 ::flixel::math::FlxRect set_clipRect( ::flixel::math::FlxRect value);

		int set_color(int value);

		Float set_fieldHeight(Float value);

		Float set_fieldWidth(Float value);

		::String set_font(::String value);

		bool set_italic(bool value);

		int set_size(int value);

		::String set_systemFont(::String value);

		::String set_text(::String value);

		Float set_x(Float value);

		Float set_y(Float value);

		bool set_background(bool value);
		::Dynamic set_background_dyn();

		int set_backgroundColor(int value);
		::Dynamic set_backgroundColor_dyn();

		int get_bottomScrollV();
		::Dynamic get_bottomScrollV_dyn();

		int set_caretColor(int value);
		::Dynamic set_caretColor_dyn();

		int get_caretIndex();
		::Dynamic get_caretIndex_dyn();

		int set_caretIndex(int value);
		::Dynamic set_caretIndex_dyn();

		int set_caretWidth(int value);
		::Dynamic set_caretWidth_dyn();

		int set_fieldBorderColor(int value);
		::Dynamic set_fieldBorderColor_dyn();

		int set_fieldBorderThickness(int value);
		::Dynamic set_fieldBorderThickness_dyn();

		 ::flixel::text::FlxInputTextFilterMode set_filterMode( ::flixel::text::FlxInputTextFilterMode value);
		::Dynamic set_filterMode_dyn();

		int set_forceCase(int value);
		::Dynamic set_forceCase_dyn();

		int get_maxChars();
		::Dynamic get_maxChars_dyn();

		int set_maxChars(int value);
		::Dynamic set_maxChars_dyn();

		int get_maxScrollH();
		::Dynamic get_maxScrollH_dyn();

		int get_maxScrollV();
		::Dynamic get_maxScrollV_dyn();

		bool get_multiline();
		::Dynamic get_multiline_dyn();

		bool set_multiline(bool value);
		::Dynamic set_multiline_dyn();

		bool get_passwordMode();
		::Dynamic get_passwordMode_dyn();

		bool set_passwordMode(bool value);
		::Dynamic set_passwordMode_dyn();

		int get_scrollH();
		::Dynamic get_scrollH_dyn();

		int set_scrollH(int value);
		::Dynamic set_scrollH_dyn();

		int get_scrollV();
		::Dynamic get_scrollV_dyn();

		int set_scrollV(int value);
		::Dynamic set_scrollV_dyn();

		int set_selectedTextColor(int value);
		::Dynamic set_selectedTextColor_dyn();

		int get_selectionBeginIndex();
		::Dynamic get_selectionBeginIndex_dyn();

		int set_selectionColor(int value);
		::Dynamic set_selectionColor_dyn();

		int get_selectionEndIndex();
		::Dynamic get_selectionEndIndex_dyn();

		bool set_useSelectedTextFormat(bool value);
		::Dynamic set_useSelectedTextFormat_dyn();

};

} // end namespace flixel
} // end namespace text

#endif /* INCLUDED_flixel_text_FlxInputText */ 

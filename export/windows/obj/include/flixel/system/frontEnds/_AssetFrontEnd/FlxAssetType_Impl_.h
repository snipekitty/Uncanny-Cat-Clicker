// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_system_frontEnds__AssetFrontEnd_FlxAssetType_Impl_
#define INCLUDED_flixel_system_frontEnds__AssetFrontEnd_FlxAssetType_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(flixel,_hx_system,frontEnds,_AssetFrontEnd,FlxAssetType_Impl_)

namespace flixel{
namespace _hx_system{
namespace frontEnds{
namespace _AssetFrontEnd{


class HXCPP_CLASS_ATTRIBUTES FlxAssetType_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxAssetType_Impl__obj OBJ_;
		FlxAssetType_Impl__obj();

	public:
		enum { _hx_ClassId = 0x37324771 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.system.frontEnds._AssetFrontEnd.FlxAssetType_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.system.frontEnds._AssetFrontEnd.FlxAssetType_Impl_"); }

		inline static ::hx::ObjectPtr< FlxAssetType_Impl__obj > __new() {
			::hx::ObjectPtr< FlxAssetType_Impl__obj > __this = new FlxAssetType_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxAssetType_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxAssetType_Impl__obj *__this = (FlxAssetType_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAssetType_Impl__obj), false, "flixel.system.frontEnds._AssetFrontEnd.FlxAssetType_Impl_"));
			*(void **)__this = FlxAssetType_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxAssetType_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxAssetType_Impl_",b8,68,67,1e); }

		static void __boot();
		static ::String BINARY;
		static ::String FONT;
		static ::String IMAGE;
		static ::String SOUND;
		static ::String TEXT;
		static ::String toOpenFlType(::String this1);
		static ::Dynamic toOpenFlType_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
} // end namespace _AssetFrontEnd

#endif /* INCLUDED_flixel_system_frontEnds__AssetFrontEnd_FlxAssetType_Impl_ */ 

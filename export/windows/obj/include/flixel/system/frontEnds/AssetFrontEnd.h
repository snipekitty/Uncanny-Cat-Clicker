// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_system_frontEnds_AssetFrontEnd
#define INCLUDED_flixel_system_frontEnds_AssetFrontEnd

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,log,LogStyle)
HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,AssetFrontEnd)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,app,Future)
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS2(openfl,text,Font)

namespace flixel{
namespace _hx_system{
namespace frontEnds{


class HXCPP_CLASS_ATTRIBUTES AssetFrontEnd_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AssetFrontEnd_obj OBJ_;
		AssetFrontEnd_obj();

	public:
		enum { _hx_ClassId = 0x773bbccc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.frontEnds.AssetFrontEnd")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.system.frontEnds.AssetFrontEnd"); }
		static ::hx::ObjectPtr< AssetFrontEnd_obj > __new();
		static ::hx::ObjectPtr< AssetFrontEnd_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,AssetFrontEnd_obj *_hx_obj);
		//~AssetFrontEnd_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AssetFrontEnd",a2,98,79,c2); }

		::String defaultSoundExtension;
		::Dynamic getAssetUnsafe;
		inline ::Dynamic &getAssetUnsafe_dyn() {return getAssetUnsafe; }

		 ::Dynamic getOpenflAssetUnsafe(::String id,::String type,::hx::Null< bool >  useCache);
		::Dynamic getOpenflAssetUnsafe_dyn();

		 ::Dynamic getAsset(::String id,::String type,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getAsset_dyn();

		::Dynamic loadAsset;
		inline ::Dynamic &loadAsset_dyn() {return loadAsset; }

		 ::lime::app::Future loadOpenflAsset(::String id,::String type,::hx::Null< bool >  useCache);
		::Dynamic loadOpenflAsset_dyn();

		::Dynamic exists;
		inline ::Dynamic &exists_dyn() {return exists; }

		::Dynamic isLocal;
		inline ::Dynamic &isLocal_dyn() {return isLocal; }

		::Dynamic list;
		inline ::Dynamic &list_dyn() {return list; }

		 ::openfl::display::BitmapData getBitmapDataUnsafe(::String id,::hx::Null< bool >  useCache);
		::Dynamic getBitmapDataUnsafe_dyn();

		 ::openfl::display::BitmapData getBitmapData(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getBitmapData_dyn();

		 ::openfl::media::Sound getSoundUnsafe(::String id,::hx::Null< bool >  useCache);
		::Dynamic getSoundUnsafe_dyn();

		 ::openfl::media::Sound getSound(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getSound_dyn();

		 ::openfl::media::Sound getSoundAddExt(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getSoundAddExt_dyn();

		::String addSoundExtIf(::String id);
		::Dynamic addSoundExtIf_dyn();

		::String addSoundExt(::String id);
		::Dynamic addSoundExt_dyn();

		::String getTextUnsafe(::String id,::hx::Null< bool >  useCache);
		::Dynamic getTextUnsafe_dyn();

		::String getText(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getText_dyn();

		 ::Xml getXmlUnsafe(::String id,::hx::Null< bool >  useCache);
		::Dynamic getXmlUnsafe_dyn();

		 ::Xml getXml(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getXml_dyn();

		 ::Dynamic getJsonUnsafe(::String id,::hx::Null< bool >  useCache);
		::Dynamic getJsonUnsafe_dyn();

		 ::Dynamic getJson(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getJson_dyn();

		 ::haxe::io::Bytes getBytesUnsafe(::String id,::hx::Null< bool >  useCache);
		::Dynamic getBytesUnsafe_dyn();

		 ::haxe::io::Bytes getBytes(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getBytes_dyn();

		 ::openfl::text::Font getFontUnsafe(::String id,::hx::Null< bool >  useCache);
		::Dynamic getFontUnsafe_dyn();

		 ::openfl::text::Font getFont(::String id,::hx::Null< bool >  useCache, ::flixel::_hx_system::debug::log::LogStyle logStyle);
		::Dynamic getFont_dyn();

		 ::lime::app::Future loadBitmapData(::String id,::hx::Null< bool >  useCache);
		::Dynamic loadBitmapData_dyn();

		 ::lime::app::Future loadSound(::String id,::hx::Null< bool >  useCache);
		::Dynamic loadSound_dyn();

		 ::lime::app::Future loadText(::String id,::hx::Null< bool >  useCache);
		::Dynamic loadText_dyn();

		 ::lime::app::Future loadXml(::String id,::hx::Null< bool >  useCache);
		::Dynamic loadXml_dyn();

		 ::lime::app::Future loadJson(::String id,::hx::Null< bool >  useCache);
		::Dynamic loadJson_dyn();

		 ::lime::app::Future loadBytes(::String id,::hx::Null< bool >  useCache);
		::Dynamic loadBytes_dyn();

		 ::lime::app::Future loadFont(::String id,::hx::Null< bool >  useCache);
		::Dynamic loadFont_dyn();

		 ::Dynamic parseJson(::String jsonText);
		::Dynamic parseJson_dyn();

		 ::Xml parseXml(::String xmlText);
		::Dynamic parseXml_dyn();

		 ::lime::app::Future wrapFuture( ::lime::app::Future future, ::Dynamic converter);
		::Dynamic wrapFuture_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds

#endif /* INCLUDED_flixel_system_frontEnds_AssetFrontEnd */ 

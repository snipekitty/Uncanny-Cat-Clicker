// Generated by Haxe 4.3.6
#ifndef INCLUDED_openfl_utils_Namespace
#define INCLUDED_openfl_utils_Namespace

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,utils,Namespace)

namespace openfl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Namespace_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Namespace_obj OBJ_;
		Namespace_obj();

	public:
		enum { _hx_ClassId = 0x29dc4666 };

		void __construct( ::Dynamic prefixValue, ::Dynamic uriValue);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.utils.Namespace")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.utils.Namespace"); }
		static ::hx::ObjectPtr< Namespace_obj > __new( ::Dynamic prefixValue, ::Dynamic uriValue);
		static ::hx::ObjectPtr< Namespace_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic prefixValue, ::Dynamic uriValue);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Namespace_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Namespace",7b,ca,c0,89); }

		::String _hx___prefix;
		::String _hx___uri;
		::String get_uri();
		::Dynamic get_uri_dyn();

		::String get_prefix();
		::Dynamic get_prefix_dyn();

};

} // end namespace openfl
} // end namespace utils

#endif /* INCLUDED_openfl_utils_Namespace */ 
